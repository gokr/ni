/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI10475134 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10240221 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10230049 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11105011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6257 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10196525 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10196520 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10205290 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10205285 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10205324 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10205319 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI116 = {size: 0,kind: 26,base: null,node: null,finalizer: null};
var NTI9971179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11996017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475117 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10195831 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10195751 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10195686 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1126907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9970204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971149 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971151 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4200232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4455011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9971160 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI8995015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10195618 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971165 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971163 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971162 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10435042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971170 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI9971173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971198 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971196 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971176 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971138 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971153 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971155 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971032 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9971146 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971090 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475138 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10475109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971078 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10475082 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10475119 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971086 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10475127 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10475136 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971140 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971144 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971135 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971142 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971186 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971168 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971182 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971184 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971088 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9971190 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971193 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971192 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9971200 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971084 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9971132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9971030 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9731017 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9971219 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9971216 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9971213 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9971203 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI9971123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11086017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI11086017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI11086017.node = NNI11086017;
var NNI9971123 = {kind: 1, offset: "token", len: 0, typ: NTI112, name: "token", sons: null};
NTI9971123.node = NNI9971123;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI9971123.base = NTI6008;
NTI11086017.base = NTI9971123;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI9971200 = {kind: 1, offset: "pos", len: 0, typ: NTI143, name: "pos", sons: null};
NTI9971200.node = NNI9971200;
NTI9971193.base = NTI9971030;
var NNI9971192 = {kind: 1, offset: "nodes", len: 0, typ: NTI9971193, name: "nodes", sons: null};
NTI9971192.node = NNI9971192;
var NNI9971190 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971190.node = NNI9971190;
NTI9971190.base = NTI9971132;
NTI9971192.base = NTI9971190;
NTI9971200.base = NTI9971192;
NTI9971084.base = NTI9971200;
var NNI9971132 = {kind: 1, offset: "tags", len: 0, typ: NTI9971084, name: "tags", sons: null};
NTI9971132.node = NNI9971132;
NTI9971132.base = NTI6008;
NTI9971030.base = NTI9971132;
var NNI9971228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI9971030, name: "key", sons: null}, 
{kind: 1, offset: "val", len: 0, typ: NTI9971030, name: "val", sons: null}]};
NTI9971228.node = NNI9971228;
NTI9971228.base = NTI9971132;
NTI9971088.base = NTI9971228;
var NNI9971219 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI9731017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI9971030, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI9971088, name: "Field2", sons: null}]};
NTI9971219.node = NNI9971219;
NTI9971216.base = NTI9971219;
var NNI9971213 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI9971216, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}]};
NTI9971213.node = NNI9971213;
var NNI9971203 = {kind: 1, offset: "bindings", len: 0, typ: NTI9971213, name: "bindings", sons: null};
NTI9971203.node = NNI9971203;
NTI9971203.base = NTI9971190;
var NNI9971130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971130.node = NNI9971130;
NTI9971130.base = NTI9971123;
var NNI9971126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971126.node = NNI9971126;
NTI9971126.base = NTI9971123;
var NNI9971128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971128.node = NNI9971128;
NTI9971128.base = NTI9971123;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI9971184 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971184.node = NNI9971184;
var NNI9971182 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971182.node = NNI9971182;
var NNI9971168 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971168.node = NNI9971168;
NTI9971168.base = NTI9971132;
NTI9971182.base = NTI9971168;
NTI9971184.base = NTI9971182;
var NNI9971186 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971186.node = NNI9971186;
NTI9971186.base = NTI9971182;
var NNI9971188 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971188.node = NNI9971188;
NTI9971188.base = NTI9971168;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
NTI6245.base = NTI6243;
var NNI9971142 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971142.node = NNI9971142;
var NNI9971135 = {kind: 1, offset: "word", len: 0, typ: NTI112, name: "word", sons: null};
NTI9971135.node = NNI9971135;
NTI9971135.base = NTI9971132;
NTI9971142.base = NTI9971135;
var NNI9971144 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971144.node = NNI9971144;
var NNI9971140 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971140.node = NNI9971140;
NTI9971140.base = NTI9971135;
NTI9971144.base = NTI9971140;
var NNI10475136 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475136.node = NNI10475136;
NTI9971086.base = NTI9971203;
var NNI10475127 = {kind: 1, offset: "locals", len: 0, typ: NTI9971086, name: "locals", sons: null};
NTI10475127.node = NNI10475127;
NTI10475082.base = NTI10475119;
NTI9971078.base = NTI9971192;
var NNI10475119 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "last", len: 0, typ: NTI9971030, name: "last", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI9971030, name: "self", sons: null}, 
{kind: 1, offset: "returned", len: 0, typ: NTI163, name: "returned", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI10475082, name: "parent", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI143, name: "pos", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9971078, name: "body", sons: null}]};
NTI10475119.node = NNI10475119;
NTI10475119.base = NTI9971132;
NTI10475127.base = NTI10475119;
NTI10475136.base = NTI10475127;
var NNI10475109 = {kind: 1, offset: "primitive", len: 0, typ: NTI10475138, name: "primitive", sons: null};
NTI10475109.node = NNI10475109;
NTI10475109.base = NTI9971132;
var NNI10475132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475132.node = NNI10475132;
NTI10475132.base = NTI10475119;
var NNI10475130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475130.node = NNI10475130;
NTI10475130.base = NTI10475127;
var NNI10475112 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475112.node = NNI10475112;
NTI10475112.base = NTI10475109;
var NNI9971090 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971090.node = NNI9971090;
NTI9971090.base = NTI6217;
NTI9971032.base = NTI9971135;
var NNI9971146 = {kind: 1, offset: "module", len: 0, typ: NTI9971032, name: "module", sons: null};
NTI9971146.node = NNI9971146;
NTI9971146.base = NTI9971144;
var NNI9971155 = {kind: 1, offset: "module", len: 0, typ: NTI9971032, name: "module", sons: null};
NTI9971155.node = NNI9971155;
var NNI9971153 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971153.node = NNI9971153;
var NNI9971138 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971138.node = NNI9971138;
NTI9971138.base = NTI9971135;
NTI9971153.base = NTI9971138;
NTI9971155.base = NTI9971153;
var NNI9971176 = {kind: 1, offset: "value", len: 0, typ: NTI112, name: "value", sons: null};
NTI9971176.node = NNI9971176;
NTI9971176.base = NTI9971168;
var NNI9971196 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971196.node = NNI9971196;
NTI9971196.base = NTI9971192;
var NNI9971198 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971198.node = NNI9971198;
NTI9971198.base = NTI9971192;
var NNI9971173 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI9971173.node = NNI9971173;
NTI9971173.base = NTI9971168;
var NNI9971170 = {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null};
NTI9971170.node = NNI9971170;
NTI9971170.base = NTI9971168;
NTI10435042.base = NTI9971030;
NTI9971163.base = NTI112;
NTI9971165.base = NTI9971030;
var NNI9971162 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI9971163, name: "keys", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI9971165, name: "args", sons: null}]};
NTI9971162.node = NNI9971162;
NTI9971162.base = NTI9971132;
NTI10195618.base = NTI9971030;
NTI8995015.base = NTI112;
var NNI9971018 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971018.node = NNI9971018;
NTI9971018.base = NTI6217;
var NNI9971160 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971160.node = NNI9971160;
NTI9971160.base = NTI9971138;
var NNI4455011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4200232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4455011.node = NNI4455011;
var NNI9971151 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971151.node = NNI9971151;
NTI9971151.base = NTI9971140;
var NNI9971158 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971158.node = NNI9971158;
NTI9971158.base = NTI9971138;
var NNI9971149 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9971149.node = NNI9971149;
NTI9971149.base = NTI9971140;
var NNI9970204 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9970204.node = NNI9970204;
NTI9970204.base = NTI6219;
var NNI1126907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI143, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI1126907.node = NNI1126907;
NTI10195686.base = NTI9971030;
NTI10195751.base = NTI9971030;
NTI10195831.base = NTI9971030;
var NNI10475114 = {kind: 1, offset: "parent", len: 0, typ: NTI10475082, name: "parent", sons: null};
NTI10475114.node = NNI10475114;
NTI10475114.base = NTI9971200;
var NNI10475117 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475117.node = NNI10475117;
NTI10475117.base = NTI10475114;
var NNI11996017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI11996017.node = NNI11996017;
NTI11996017.base = NTI10475117;
var NNI6277 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6277.node = NNI6277;
NTI6277.base = NTI6219;
var NNI9971179 = {kind: 1, offset: "value", len: 0, typ: NTI116, name: "value", sons: null};
NTI9971179.node = NNI9971179;
NTI9971179.base = NTI9971168;
NTI10205319.base = NTI9971030;
NTI10205324.base = NTI9971030;
NTI10205285.base = NTI9971030;
NTI10205290.base = NTI9971030;
NTI10196520.base = NTI9971030;
NTI10196525.base = NTI9971030;
var NNI6257 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6257.node = NNI6257;
NTI6257.base = NTI6219;
var NNI11105011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI143, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI11105011.node = NNI11105011;
var NNI10230049 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI112, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10230049.node = NNI10230049;
var NNI10240221 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI112, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10240221.node = NNI10240221;
var NNI10475134 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10475134.node = NNI10475134;
NTI10475134.base = NTI10475127;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    throw e_190218;

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
function isObj(obj_270062, subclass_270063) {
  var result_270064 = false;

  BeforeRet: do {
    var x_270065 = obj_270062;
    if ((x_270065 == subclass_270063)) {
    result_270064 = true;
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!!((x_270065 == subclass_270063))) break L2;
          if ((x_270065 == null)) {
          result_270064 = false;
          break BeforeRet;
          }
          
          x_270065 = x_270065.base;
        }
    } while(false);
    result_270064 = true;
    break BeforeRet;
  } while (false);

  return result_270064;

}
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet2 = setConstr(59, 92, 94, 38, 37, 124, 44, 126);
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet4 = setConstr(59, 92, 94, 38, 37, 124, 44, 126);
function absInt(a_230617) {
    var Tmp1;

  var result_230618 = 0;

    if ((a_230617 < 0)) {
    Tmp1 = (a_230617 * -1);
    }
    else {
    Tmp1 = a_230617;
    }
    
    result_230618 = Tmp1;

  return result_230618;

}
function negInt(a_230583) {
  var result_230584 = 0;

    result_230584 = (a_230583 * -1);

  return result_230584;

}
    var fact_table_1045463 = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600];
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet5 = setConstr(120, 88);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet8 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr(101, 69);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([48, 57]);
function nimParseBiggestFloat(s_275076, number_275078, number_275078_Idx, start_275079) {
  var result_275081 = 0;

  BeforeRet: do {
    var esign_275082 = 1.0000000000000000e+00;
    var sign_275083 = 1.0000000000000000e+00;
    var i_275084 = start_275079;
    var exponent_275085 = 0;
    var flags_275086 = 0;
    number_275078[number_275078_Idx] = 0.0;
    if ((s_275076[i_275084] == 43)) {
    i_275084 += 1;
    }
    else {
    if ((s_275076[i_275084] == 45)) {
    sign_275083 = -1.0000000000000000e+00;
    i_275084 += 1;
    }
    }
    if (((s_275076[i_275084] == 78) || (s_275076[i_275084] == 110))) {
    if (((s_275076[(i_275084 + 1)] == 65) || (s_275076[(i_275084 + 1)] == 97))) {
    if (((s_275076[(i_275084 + 2)] == 78) || (s_275076[(i_275084 + 2)] == 110))) {
    if (!((ConstSet7[s_275076[(i_275084 + 3)]] != undefined))) {
    number_275078[number_275078_Idx] = NaN;
    result_275081 = ((i_275084 + 3) - start_275079);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_275081 = 0;
    break BeforeRet;
    }
    
    if (((s_275076[i_275084] == 73) || (s_275076[i_275084] == 105))) {
    if (((s_275076[(i_275084 + 1)] == 78) || (s_275076[(i_275084 + 1)] == 110))) {
    if (((s_275076[(i_275084 + 2)] == 70) || (s_275076[(i_275084 + 2)] == 102))) {
    if (!((ConstSet8[s_275076[(i_275084 + 3)]] != undefined))) {
    number_275078[number_275078_Idx] = (Infinity * sign_275083);
    result_275081 = ((i_275084 + 3) - start_275079);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_275081 = 0;
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!(ConstSet9[s_275076[i_275084]] != undefined)) break L2;
          flags_275086 = (flags_275086 | 1);
          number_275078[number_275078_Idx] = ((number_275078[number_275078_Idx] * 1.0000000000000000e+01) + to_float_26459((s_275076[i_275084] - 48)));
          i_275084 += 1;
          L3: do {
              L4: while (true) {
              if (!(s_275076[i_275084] == 95)) break L4;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    if ((s_275076[i_275084] == 46)) {
    var hd_290029 = 1.0000000000000000e+00;
    i_275084 += 1;
    L5: do {
        L6: while (true) {
        if (!(ConstSet10[s_275076[i_275084]] != undefined)) break L6;
          flags_275086 = (flags_275086 | 2);
          number_275078[number_275078_Idx] = ((number_275078[number_275078_Idx] * 1.0000000000000000e+01) + to_float_26459((s_275076[i_275084] - 48)));
          hd_290029 = (hd_290029 * 1.0000000000000000e+01);
          i_275084 += 1;
          L7: do {
              L8: while (true) {
              if (!(s_275076[i_275084] == 95)) break L8;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] / hd_290029);
    }
    
    if ((flags_275086 == 0)) {
    result_275081 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet11[s_275076[i_275084]] != undefined)) {
    i_275084 += 1;
    if ((s_275076[i_275084] == 43)) {
    i_275084 += 1;
    }
    else {
    if ((s_275076[i_275084] == 45)) {
    esign_275082 = -1.0000000000000000e+00;
    i_275084 += 1;
    }
    }
    if (!((ConstSet12[s_275076[i_275084]] != undefined))) {
    result_275081 = 0;
    break BeforeRet;
    }
    
    L9: do {
        L10: while (true) {
        if (!(ConstSet13[s_275076[i_275084]] != undefined)) break L10;
          exponent_275085 = (((exponent_275085 * 10) + s_275076[i_275084]) - 48);
          i_275084 += 1;
          L11: do {
              L12: while (true) {
              if (!(s_275076[i_275084] == 95)) break L12;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    }
    
    var hd_310029 = ten_to_the_power_of_275046(exponent_275085);
    if ((0.0 < esign_275082)) {
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] * hd_310029);
    }
    else {
      number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] / hd_310029);
    }
    
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] * sign_275083);
    result_275081 = (i_275084 - start_275079);
  } while (false);

  return result_275081;

}
function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: makeNimstrLit("no exception to reraise"), parent: null, m_type: NTI6257, name: null, trace: null, up: null}, "ReraiseError");
    }
    else {
      if ((excHandler == 0)) {
      if (is_nim_exception_156082()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet14 = setConstr([48, 57]);
var ConstSet15 = setConstr([48, 57]);
function cmpStrings(a_230186, b_230187) {
        if (a_230186 == b_230187) return 0;
    if (!a_230186) return -1;
    if (!b_230187) return 1;
    for (var i = 0; i < a_230186.length && i < b_230187.length; i++) {
      var result = a_230186[i] - b_230187[i];
      if (result != 0) return result;
    }
    return a_230186.length - b_230187.length;
  

  
}
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_9735031 = [0];
function new_seq_9975087(len_9975090) {
  var result_9975092 = null;

    result_9975092 = new Array(len_9975090); for (var i=0;i<len_9975090;++i) {result_9975092[i]=null;}
  return result_9975092;

}
var parser_exts_9975144 = [new_seq_9975087(0)];
function add_parser_extension_9975158(ext_9975160) {
    if (parser_exts_9975144[0] != null) { parser_exts_9975144[0].push(ext_9975160); } else { parser_exts_9975144[0] = [ext_9975160]; };

  
}
function extend_parser_11145074(p_11145076) {
    if (p_11145076.valueParsers != null) { p_11145076.valueParsers.push({m_type: NTI11086017, token: null}); } else { p_11145076.valueParsers = [{m_type: NTI11086017, token: null}]; };

  
}
add_parser_extension_9975158(extend_parser_11145074);
var state_11162005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_11420231 = [null];
var local_instance_11420232 = [null];
function is_power_of_two_1080029(x_1080031) {
    var Tmp1;

  var result_1080032 = false;

  BeforeRet: do {
    if (!(0 < x_1080031)) Tmp1 = false; else {      Tmp1 = ((x_1080031 & (x_1080031 - 1)) == 0);    }    result_1080032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1080032;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function new_seq_225128(len_225131) {
  var result_225133 = null;

    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}
  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");

  
}
function raise_assert_102614(msg_102616) {
    sys_fatal_102618(msg_102616);

  
}
function failed_assert_impl_102680(msg_102682) {
    raise_assert_102614(msg_102682);

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function init_table_10105050(initial_size_10105054) {
  var result_10105056 = {data: null, counter: 0};

    if (!(is_power_of_two_1080029(initial_size_10105054))) {
    failed_assert_impl_102680(makeNimstrLit("tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    result_10105056.counter = 0;
    result_10105056.data = new Array(chckRange(initial_size_10105054, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10105054, 0, 2147483647);++i) {result_10105056.data[i]={Field0: 0, Field1: null, Field2: null};}
  return result_10105056;

}
function new_map_10105045() {
  var result_10105047 = null;

    result_10105047 = {bindings: init_table_10105050(64), m_type: NTI9971203, tags: null};

  return result_10105047;

}
function new_seq_10195614(len_10195617) {
  var result_10195619 = null;

    result_10195619 = new Array(len_10195617); for (var i=0;i<len_10195617;++i) {result_10195619[i]=null;}
  return result_10195619;

}
function new_seq_10240304(len_10240307) {
  var result_10240309 = null;

    result_10240309 = new Array(len_10240307); for (var i=0;i<len_10240307;++i) {result_10240309[i]=null;}
  return result_10240309;

}
function init_table_10240363(initial_size_10240367) {
  var result_10240369 = {data: null, counter: 0};

    if (!(is_power_of_two_1080029(initial_size_10240367))) {
    failed_assert_impl_102680(makeNimstrLit("tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    result_10240369.counter = 0;
    result_10240369.data = new Array(chckRange(initial_size_10240367, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10240367, 0, 2147483647);++i) {result_10240369.data[i]={Field0: 0, Field1: null, Field2: null};}
  return result_10240369;

}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function new_parser_10240275() {
  var result_10240277 = null;

    result_10240277 = {stack: new_seq_10195614(0), valueParsers: new_seq_10240304(0), litWords: init_table_10240363(64), token: null, specialCharDetected: false, ws: null};
    if (result_10240277.valueParsers != null) { result_10240277.valueParsers.push({m_type: NTI9971130, token: null}); } else { result_10240277.valueParsers = [{m_type: NTI9971130, token: null}]; };
    if (result_10240277.valueParsers != null) { result_10240277.valueParsers.push({m_type: NTI9971126, token: null}); } else { result_10240277.valueParsers = [{m_type: NTI9971126, token: null}]; };
    if (result_10240277.valueParsers != null) { result_10240277.valueParsers.push({m_type: NTI9971128, token: null}); } else { result_10240277.valueParsers = [{m_type: NTI9971128, token: null}]; };
    L1: do {
      var ex_10270214 = null;
      var i_12146041 = 0;
      var l_12146042 = (parser_exts_9975144[0] != null ? parser_exts_9975144[0].length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_12146041 < l_12146042)) break L3;
            ex_10270214 = parser_exts_9975144[0][chckIndx(i_12146041, 0, (parser_exts_9975144[0] != null ? parser_exts_9975144[0].length : 0)+0-1)-0];
            ex_10270214(result_10240277);
            i_12146041 = addInt(i_12146041, 1);
            if (!(((parser_exts_9975144[0] != null ? parser_exts_9975144[0].length : 0) == l_12146042))) {
            failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  return result_10240277;

}
function new_value_10196037(v_10196039) {
    var Tmp1;

  var result_10196040 = null;

    if (v_10196039) {
    Tmp1 = {m_type: NTI9971184, tags: null};
    }
    else {
    Tmp1 = {m_type: NTI9971186, tags: null};
    }
    
    result_10196040 = Tmp1;

  return result_10196040;

}
function new_nil_val_10196130() {
  var result_10196132 = null;

    result_10196132 = {m_type: NTI9971188, tags: null};

  return result_10196132;

}
function new_blok_10195717() {
  var result_10195719 = null;

    result_10195719 = {nodes: new_seq_10195614(0), m_type: NTI9971200, pos: 0, tags: null};

  return result_10195719;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function imul_9735517(a_9735519, b_9735520) {
  var result_9735521 = 0;

    var mask_9735522 = 65535;
    var a_hi_9735531 = (((a_9735519 >>> 0) >>> 16) & mask_9735522);
    var a_lo_9735532 = (a_9735519 & mask_9735522);
    var b_hi_9735541 = (((b_9735520 >>> 0) >>> 16) & mask_9735522);
    var b_lo_9735542 = (b_9735520 & mask_9735522);
    result_9735521 = ((((a_lo_9735532 * b_lo_9735542) >>> 0) + (((((a_hi_9735531 * b_lo_9735542) >>> 0) + ((a_lo_9735532 * b_hi_9735541) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_9735521;

}
function rotl32_9735601(x_9735603, r_9735604) {
  var result_9735605 = 0;

    result_9735605 = ((x_9735603 << r_9735604) | ((x_9735603 >>> 0) >>> subInt(32, r_9735604)));

  return result_9735605;

}
function murmur_hash_9735629(x_9735632) {
  var result_9735633 = 0;

  BeforeRet: do {
    var size_9735643 = (x_9735632 != null ? x_9735632.length : 0);
    var step_size_9735645 = 4;
    var n_9735646 = divInt(size_9735643, step_size_9735645);
    var h1_9735647 = 0;
    var i_9735649 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_9735649 < mulInt(n_9735646, step_size_9735645))) break L2;
          var k1_9735650 = 0;
          var j_9735651 = step_size_9735645;
          L3: do {
              L4: while (true) {
              if (!(0 < j_9735651)) break L4;
                j_9735651 = subInt(j_9735651, 1);
                k1_9735650 = ((k1_9735650 << 8) | x_9735632[chckIndx(addInt(i_9735649, j_9735651), 0, (x_9735632 != null ? x_9735632.length : 0)+0-1)-0]);
              }
          } while(false);
          i_9735649 = addInt(i_9735649, step_size_9735645);
          k1_9735650 = imul_9735517(k1_9735650, 3432918353);
          k1_9735650 = rotl32_9735601(k1_9735650, 15);
          k1_9735650 = imul_9735517(k1_9735650, 461845907);
          h1_9735647 = (h1_9735647 ^ k1_9735650);
          h1_9735647 = rotl32_9735601(h1_9735647, 13);
          h1_9735647 = ((((h1_9735647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    var k1_9740207 = 0;
    var rem_9740208 = modInt(size_9735643, step_size_9735645);
    L5: do {
        L6: while (true) {
        if (!(0 < rem_9740208)) break L6;
          rem_9740208 = subInt(rem_9740208, 1);
          k1_9740207 = ((k1_9740207 << 8) | x_9735632[chckIndx(addInt(i_9735649, rem_9740208), 0, (x_9735632 != null ? x_9735632.length : 0)+0-1)-0]);
        }
    } while(false);
    k1_9740207 = imul_9735517(k1_9740207, 3432918353);
    k1_9740207 = rotl32_9735601(k1_9740207, 15);
    k1_9740207 = imul_9735517(k1_9740207, 461845907);
    h1_9735647 = (h1_9735647 ^ k1_9740207);
    h1_9735647 = (h1_9735647 ^ size_9735643);
    h1_9735647 = (h1_9735647 ^ ((h1_9735647 >>> 0) >>> 16));
    h1_9735647 = imul_9735517(h1_9735647, 2246822507);
    h1_9735647 = (h1_9735647 ^ ((h1_9735647 >>> 0) >>> 13));
    h1_9735647 = imul_9735517(h1_9735647, 3266489909);
    h1_9735647 = (h1_9735647 ^ ((h1_9735647 >>> 0) >>> 16));
    result_9735633 = (h1_9735647|0);
    break BeforeRet;
  } while (false);

  return result_9735633;

}
function hash_9775214(x_9775216) {
  var result_9775217 = 0;

    result_9775217 = murmur_hash_9735629((x_9775216.slice(0, (x_9775216 != null ? (x_9775216.length-1) : -1)+1)));

  return result_9775217;

}
function is_filled_9797018(hcode_9797020) {
  var result_9797021 = false;

    result_9797021 = !((hcode_9797020 == 0));

  return result_9797021;

}
function next_try_9800014(h_9800016, max_hash_9800017) {
  var result_9800018 = 0;

    result_9800018 = (addInt(h_9800016, 1) & max_hash_9800017);

  return result_9800018;

}
function raw_get_10125860(t_10125864, key_10125865, hc_10125866, hc_10125866_Idx) {
            var Tmp3;

  var result_10125867 = 0;

  BeforeRet: do {
    hc_10125866[hc_10125866_Idx] = hash_9775214(key_10125865);
    if ((hc_10125866[hc_10125866_Idx] == 0)) {
    hc_10125866[hc_10125866_Idx] = 314159265;
    }
    
    if (((t_10125864.data != null ? t_10125864.data.length : 0) == 0)) {
    result_10125867 = -1;
    break BeforeRet;
    }
    
    var h_10135138 = (hc_10125866[hc_10125866_Idx] & (t_10125864.data != null ? (t_10125864.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_9797018(t_10125864.data[chckIndx(h_10135138, 0, (t_10125864.data != null ? t_10125864.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10125864.data[chckIndx(h_10135138, 0, (t_10125864.data != null ? t_10125864.data.length : 0)+0-1)-0].Field0 == hc_10125866[hc_10125866_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10125864.data[chckIndx(h_10135138, 0, (t_10125864.data != null ? t_10125864.data.length : 0)+0-1)-0].Field1, key_10125865);            }          if (Tmp3) {
          result_10125867 = h_10135138;
          break BeforeRet;
          }
          
          h_10135138 = next_try_9800014(h_10135138, (t_10125864.data != null ? (t_10125864.data.length-1) : -1));
        }
    } while(false);
    result_10125867 = subInt(-1, h_10135138);
  } while (false);

  return result_10125867;

}
function has_key_10125851(t_10125856, key_10125857) {
  var result_10125858 = false;

    var hc_10125859 = [0];
    result_10125858 = (0 <= raw_get_10125860(t_10125856, key_10125857, hc_10125859, 0));

  return result_10125858;

}
function HEX5BHEX5D_10135792(t_10135798, key_10135799) {
  var result_10135801 = null;
  var result_10135801_Idx = 0;

    var hcHEX60gensym9800414_10135802 = [0];
    var indexHEX60gensym9800415_10135811 = raw_get_10125860(t_10135798, key_10135799, hcHEX60gensym9800414_10135802, 0);
    if ((0 <= indexHEX60gensym9800415_10135811)) {
    result_10135801 = t_10135798.data[chckIndx(indexHEX60gensym9800415_10135811, 0, (t_10135798.data != null ? t_10135798.data.length : 0)+0-1)-0]; result_10135801_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10135799 || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    

  return [result_10135801, result_10135801_Idx];

}
function must_rehash_10165601(t_10165604) {
  var result_10165605 = false;

    if (!((t_10165604.counter < (t_10165604.data != null ? t_10165604.data.length : 0)))) {
    failed_assert_impl_102680(makeNimstrLit("hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_10165605 = ((mulInt((t_10165604.data != null ? t_10165604.data.length : 0), 2) < mulInt(t_10165604.counter, 3)) || (subInt((t_10165604.data != null ? t_10165604.data.length : 0), t_10165604.counter) < 4));

  return result_10165605;

}
function raw_insert_10191108(t_10191114, data_10191117, data_10191117_Idx, key_10191118, val_10191119, hc_10191120, h_10191121) {
    data_10191117[data_10191117_Idx][chckIndx(h_10191121, 0, (data_10191117[data_10191117_Idx] != null ? data_10191117[data_10191117_Idx].length : 0)+0-1)-0].Field1 = nimCopy(null, key_10191118, NTI112);
    data_10191117[data_10191117_Idx][chckIndx(h_10191121, 0, (data_10191117[data_10191117_Idx] != null ? data_10191117[data_10191117_Idx].length : 0)+0-1)-0].Field2 = val_10191119;
    data_10191117[data_10191117_Idx][chckIndx(h_10191121, 0, (data_10191117[data_10191117_Idx] != null ? data_10191117[data_10191117_Idx].length : 0)+0-1)-0].Field0 = hc_10191120;

  
}
function enlarge_10190161(t_10190167) {
    var n_10190175 = null;
    n_10190175 = new Array(chckRange(mulInt((t_10190167.data != null ? t_10190167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10190167.data != null ? t_10190167.data.length : 0), 2), 0, 2147483647);++i) {n_10190175[i]={Field0: 0, Field1: null, Field2: null};}    var Tmp1 = t_10190167.data; t_10190167.data = n_10190175; n_10190175 = Tmp1;    L2: do {
      var i_10190334 = 0;
      var colontmp__12146068 = 0;
      colontmp__12146068 = (n_10190175 != null ? (n_10190175.length-1) : -1);
      var res_12146073 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_12146073 <= colontmp__12146068)) break L4;
            i_10190334 = res_12146073;
            var eh_10190483 = n_10190175[chckIndx(i_10190334, 0, (n_10190175 != null ? n_10190175.length : 0)+0-1)-0].Field0;
            if (is_filled_9797018(eh_10190483)) {
            var j_10190490 = (eh_10190483 & (t_10190167.data != null ? (t_10190167.data.length-1) : -1));
            L5: do {
                L6: while (true) {
                if (!is_filled_9797018(t_10190167.data[chckIndx(j_10190490, 0, (t_10190167.data != null ? t_10190167.data.length : 0)+0-1)-0].Field0)) break L6;
                  j_10190490 = next_try_9800014(j_10190490, (t_10190167.data != null ? (t_10190167.data.length-1) : -1));
                }
            } while(false);
            raw_insert_10191108(t_10190167, t_10190167, "data", n_10190175[chckIndx(i_10190334, 0, (n_10190175 != null ? n_10190175.length : 0)+0-1)-0].Field1, n_10190175[chckIndx(i_10190334, 0, (n_10190175 != null ? n_10190175.length : 0)+0-1)-0].Field2, eh_10190483, j_10190490);
            }
            
            res_12146073 = addInt(res_12146073, 1);
          }
      } while(false);
    } while(false);

  
}
function raw_get_deep_10191609(t_10191613, key_10191614, hc_10191615, hc_10191615_Idx) {
  var result_10191616 = 0;

    hc_10191615[hc_10191615_Idx] = hash_9775214(key_10191614);
    if ((hc_10191615[hc_10191615_Idx] == 0)) {
    hc_10191615[hc_10191615_Idx] = 314159265;
    }
    
    var h_10195010 = (hc_10191615[hc_10191615_Idx] & (t_10191613.data != null ? (t_10191613.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_9797018(t_10191613.data[chckIndx(h_10195010, 0, (t_10191613.data != null ? t_10191613.data.length : 0)+0-1)-0].Field0)) break L2;
          h_10195010 = next_try_9800014(h_10195010, (t_10191613.data != null ? (t_10191613.data.length-1) : -1));
        }
    } while(false);
    result_10191616 = h_10195010;

  return result_10191616;

}
function add_10140104(t_10140110, key_10140111, val_10140112) {
    if (((t_10140110.data != null ? t_10140110.data.length : 0) == 0)) {
    if (!(is_power_of_two_1080029(64))) {
    failed_assert_impl_102680(makeNimstrLit("tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    t_10140110.counter = 0;
    t_10140110.data = new Array(64); for (var i=0;i<64;++i) {t_10140110.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    if (must_rehash_10165601(t_10140110)) {
    enlarge_10190161(t_10140110);
    }
    
    var hc_10191608 = [0];
    var j_10195179 = raw_get_deep_10191609(t_10140110, key_10140111, hc_10191608, 0);
    raw_insert_10191108(t_10140110, t_10140110, "data", key_10140111, val_10140112, hc_10191608[0], j_10195179);
    t_10140110.counter = addInt(t_10140110.counter, 1);

  
}
function new_or_get_lit_word_10125737(self_10125739, s_10125740) {
    var Tmp1;

  var result_10125741 = null;

  BeforeRet: do {
    if (has_key_10125851(self_10125739.litWords, s_10125740)) {
    result_10125741 = (Tmp1 = HEX5BHEX5D_10135792(self_10125739.litWords, s_10125740), Tmp1)[0][Tmp1[1]];
    break BeforeRet;
    }
    else {
      result_10125741 = {word: nimCopy(null, s_10125740, NTI112), m_type: NTI9971142, tags: null};
      add_10140104(self_10125739.litWords, s_10125740, result_10125741);
    }
    
  } while (false);

  return result_10125741;

}
function raw_get_10000002(t_10000006, key_10000007, hc_10000008, hc_10000008_Idx) {
            var Tmp3;

  var result_10000009 = 0;

  BeforeRet: do {
    hc_10000008[hc_10000008_Idx] = hash_9985903(key_10000007);
    if ((hc_10000008[hc_10000008_Idx] == 0)) {
    hc_10000008[hc_10000008_Idx] = 314159265;
    }
    
    if (((t_10000006.data != null ? t_10000006.data.length : 0) == 0)) {
    result_10000009 = -1;
    break BeforeRet;
    }
    
    var h_10010138 = (hc_10000008[hc_10000008_Idx] & (t_10000006.data != null ? (t_10000006.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_9797018(t_10000006.data[chckIndx(h_10010138, 0, (t_10000006.data != null ? t_10000006.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10000006.data[chckIndx(h_10010138, 0, (t_10000006.data != null ? t_10000006.data.length : 0)+0-1)-0].Field0 == hc_10000008[hc_10000008_Idx])) Tmp3 = false; else {              Tmp3 = HEX3DHEX3D_9985924(t_10000006.data[chckIndx(h_10010138, 0, (t_10000006.data != null ? t_10000006.data.length : 0)+0-1)-0].Field1, key_10000007);            }          if (Tmp3) {
          result_10000009 = h_10010138;
          break BeforeRet;
          }
          
          h_10010138 = next_try_9800014(h_10010138, (t_10000006.data != null ? (t_10000006.data.length-1) : -1));
        }
    } while(false);
    result_10000009 = subInt(-1, h_10010138);
  } while (false);

  return result_10000009;

}
function has_key_10015289(t_10015294, key_10015295) {
  var result_10015296 = false;

    var hc_10015297 = [0];
    result_10015296 = (0 <= raw_get_10000002(t_10015294, key_10015295, hc_10015297, 0));

  return result_10015296;

}
function HEX5BHEX5D_10015463(t_10015469, key_10015470) {
  var result_10015472 = null;
  var result_10015472_Idx = 0;

    var hcHEX60gensym9800414_10015473 = [0];
    var indexHEX60gensym9800415_10015482 = raw_get_10000002(t_10015469, key_10015470, hcHEX60gensym9800414_10015473, 0);
    if ((0 <= indexHEX60gensym9800415_10015482)) {
    result_10015472 = t_10015469.data[chckIndx(indexHEX60gensym9800415_10015482, 0, (t_10015469.data != null ? t_10015469.data.length : 0)+0-1)-0]; result_10015472_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_9975218(key_10015470) || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    

  return [result_10015472, result_10015472_Idx];

}
function must_rehash_10070601(t_10070604) {
  var result_10070605 = false;

    if (!((t_10070604.counter < (t_10070604.data != null ? t_10070604.data.length : 0)))) {
    failed_assert_impl_102680(makeNimstrLit("hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_10070605 = ((mulInt((t_10070604.data != null ? t_10070604.data.length : 0), 2) < mulInt(t_10070604.counter, 3)) || (subInt((t_10070604.data != null ? t_10070604.data.length : 0), t_10070604.counter) < 4));

  return result_10070605;

}
function raw_insert_10096108(t_10096114, data_10096117, data_10096117_Idx, key_10096118, val_10096119, hc_10096120, h_10096121) {
    data_10096117[data_10096117_Idx][chckIndx(h_10096121, 0, (data_10096117[data_10096117_Idx] != null ? data_10096117[data_10096117_Idx].length : 0)+0-1)-0].Field1 = key_10096118;
    data_10096117[data_10096117_Idx][chckIndx(h_10096121, 0, (data_10096117[data_10096117_Idx] != null ? data_10096117[data_10096117_Idx].length : 0)+0-1)-0].Field2 = val_10096119;
    data_10096117[data_10096117_Idx][chckIndx(h_10096121, 0, (data_10096117[data_10096117_Idx] != null ? data_10096117[data_10096117_Idx].length : 0)+0-1)-0].Field0 = hc_10096120;

  
}
function enlarge_10095161(t_10095167) {
    var n_10095175 = null;
    n_10095175 = new Array(chckRange(mulInt((t_10095167.data != null ? t_10095167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10095167.data != null ? t_10095167.data.length : 0), 2), 0, 2147483647);++i) {n_10095175[i]={Field0: 0, Field1: null, Field2: null};}    var Tmp1 = t_10095167.data; t_10095167.data = n_10095175; n_10095175 = Tmp1;    L2: do {
      var i_10095334 = 0;
      var colontmp__12146084 = 0;
      colontmp__12146084 = (n_10095175 != null ? (n_10095175.length-1) : -1);
      var res_12146085 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_12146085 <= colontmp__12146084)) break L4;
            i_10095334 = res_12146085;
            var eh_10095483 = n_10095175[chckIndx(i_10095334, 0, (n_10095175 != null ? n_10095175.length : 0)+0-1)-0].Field0;
            if (is_filled_9797018(eh_10095483)) {
            var j_10095490 = (eh_10095483 & (t_10095167.data != null ? (t_10095167.data.length-1) : -1));
            L5: do {
                L6: while (true) {
                if (!is_filled_9797018(t_10095167.data[chckIndx(j_10095490, 0, (t_10095167.data != null ? t_10095167.data.length : 0)+0-1)-0].Field0)) break L6;
                  j_10095490 = next_try_9800014(j_10095490, (t_10095167.data != null ? (t_10095167.data.length-1) : -1));
                }
            } while(false);
            raw_insert_10096108(t_10095167, t_10095167, "data", n_10095175[chckIndx(i_10095334, 0, (n_10095175 != null ? n_10095175.length : 0)+0-1)-0].Field1, n_10095175[chckIndx(i_10095334, 0, (n_10095175 != null ? n_10095175.length : 0)+0-1)-0].Field2, eh_10095483, j_10095490);
            }
            
            res_12146085 = addInt(res_12146085, 1);
          }
      } while(false);
    } while(false);

  
}
function raw_get_known_hc_10096593(t_10096597, key_10096598, hc_10096599) {
  var result_10096600 = 0;

  BeforeRet: do {
    if (((t_10096597.data != null ? t_10096597.data.length : 0) == 0)) {
    result_10096600 = -1;
    break BeforeRet;
    }
    
    var h_10100138 = (hc_10096599 & (t_10096597.data != null ? (t_10096597.data.length-1) : -1));
    L1: do {
        L2: while (true) {
        if (!is_filled_9797018(t_10096597.data[chckIndx(h_10100138, 0, (t_10096597.data != null ? t_10096597.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10096597.data[chckIndx(h_10100138, 0, (t_10096597.data != null ? t_10096597.data.length : 0)+0-1)-0].Field0 == hc_10096599) && HEX3DHEX3D_9985924(t_10096597.data[chckIndx(h_10100138, 0, (t_10096597.data != null ? t_10096597.data.length : 0)+0-1)-0].Field1, key_10096598))) {
          result_10096600 = h_10100138;
          break BeforeRet;
          }
          
          h_10100138 = next_try_9800014(h_10100138, (t_10096597.data != null ? (t_10096597.data.length-1) : -1));
        }
    } while(false);
    result_10096600 = subInt(-1, h_10100138);
  } while (false);

  return result_10096600;

}
function HEX5BHEX5DHEX3D_10022028(t_10022034, key_10022035, val_10022036) {
    if (((t_10022034.data != null ? t_10022034.data.length : 0) == 0)) {
    if (!(is_power_of_two_1080029(64))) {
    failed_assert_impl_102680(makeNimstrLit("tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    t_10022034.counter = 0;
    t_10022034.data = new Array(64); for (var i=0;i<64;++i) {t_10022034.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    var hc_10045601 = [0];
    var index_10045610 = raw_get_10000002(t_10022034, key_10022035, hc_10045601, 0);
    if ((0 <= index_10045610)) {
    t_10022034.data[chckIndx(index_10045610, 0, (t_10022034.data != null ? t_10022034.data.length : 0)+0-1)-0].Field2 = val_10022036;
    }
    else {
      if (((t_10022034.data != null ? t_10022034.data.length : 0) == 0)) {
      if (!(is_power_of_two_1080029(64))) {
      failed_assert_impl_102680(makeNimstrLit("tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      t_10022034.counter = 0;
      t_10022034.data = new Array(64); for (var i=0;i<64;++i) {t_10022034.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (must_rehash_10070601(t_10022034)) {
      enlarge_10095161(t_10022034);
      index_10045610 = raw_get_known_hc_10096593(t_10022034, key_10022035, hc_10045601[0]);
      }
      
      index_10045610 = subInt(-1, index_10045610);
      raw_insert_10096108(t_10022034, t_10022034, "data", key_10022035, val_10022036, hc_10045601[0], index_10045610);
      t_10022034.counter = addInt(t_10022034.counter, 1);
    }
    

  
}
function make_binding_10021643(self_10021645, key_10021646, val_10021647) {
    var Tmp1;

  var result_10021648 = null;

    if (has_key_10015289(self_10021645.bindings, key_10021646)) {
    result_10021648 = (Tmp1 = HEX5BHEX5D_10015463(self_10021645.bindings, key_10021646), Tmp1)[0][Tmp1[1]];
    result_10021648.val = val_10021647;
    result_10021648.key = key_10021646;
    }
    else {
      result_10021648 = {key: key_10021646, val: val_10021647, m_type: NTI9971228, tags: null};
      HEX5BHEX5DHEX3D_10022028(self_10021645.bindings, key_10021646, result_10021648);
    }
    

  return result_10021648;

}
function new_eval_word_10125690(s_10125692) {
  var result_10125693 = null;

    result_10125693 = {word: nimCopy(null, s_10125692, NTI112), m_type: NTI9971144, tags: null};

  return result_10125693;

}
function make_word_10625187(self_10625189, word_10625190, value_10625191) {
    make_binding_10021643(self_10625189.root, new_eval_word_10125690(word_10625190), value_10625191);

  
}
function new_root_activation_10480405(root_10480407) {
  var result_10480408 = null;

    result_10480408 = {body: new_blok_10195717(), locals: root_10480407, m_type: NTI10475136, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

  return result_10480408;

}
function new_interpreter_10665014() {
      var Tmp1;

  var result_10665016 = null;

    var spry_10665017 = {root: new_map_10105045(), parser: new_parser_10240275(), currentActivation: null, rootActivation: null, lastSelf: null, modules: null, trueVal: null, falseVal: null, nilVal: null, emptyBlok: null, objectTag: null, moduleTag: null};
    result_10665016 = spry_10665017;
    spry_10665017.trueVal = new_value_10196037(true);
    spry_10665017.falseVal = new_value_10196037(false);
    spry_10665017.nilVal = new_nil_val_10196130();
    spry_10665017.emptyBlok = new_blok_10195717();
    spry_10665017.objectTag = new_or_get_lit_word_10125737(spry_10665017.parser, makeNimstrLit("object"));
    spry_10665017.moduleTag = new_or_get_lit_word_10125737(spry_10665017.parser, makeNimstrLit("module"));
    spry_10665017.modules = new_blok_10195717();
    make_word_10625187(spry_10665017, makeNimstrLit("false"), spry_10665017.falseVal);
    make_word_10625187(spry_10665017, makeNimstrLit("true"), spry_10665017.trueVal);
    make_word_10625187(spry_10665017, makeNimstrLit("nil"), spry_10665017.nilVal);
    make_word_10625187(spry_10665017, makeNimstrLit("modules"), spry_10665017.modules);
    spry_10665017.rootActivation = new_root_activation_10480405(spry_10665017.root);
    spry_10665017.rootActivation.parent = spry_10665017.currentActivation;
      if (!(spry_10665017.rootActivation.self == null)) Tmp1 = false; else {        Tmp1 = !((spry_10665017.rootActivation.parent == null));      }    if (Tmp1) {
    spry_10665017.rootActivation.self = spry_10665017.rootActivation.parent.self;
    }
    
    spry_10665017.currentActivation = spry_10665017.rootActivation;

  return result_10665016;

}
function new_prim_func_10480185(primitive_10480187) {
  var result_10480188 = null;

    result_10480188 = {primitive: primitive_10480187, m_type: NTI10475109, tags: null};

  return result_10480188;

}
function arg_parent_10570019(spry_10570021) {
  var result_10570022 = null;

  BeforeRet: do {
    L1: do {
      var activation_10570023 = null;
      var activation_12146113 = spry_10570021.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!(!(isObj(activation_12146113.m_type, NTI10475132)))) break L3;
            activation_12146113 = activation_12146113.parent;
          }
      } while(false);
      activation_12146113 = activation_12146113.parent;
      L4: do {
          L5: while (true) {
          if (!!((activation_12146113 == null))) break L5;
            activation_10570023 = activation_12146113;
            result_10570022 = activation_10570023;
            break BeforeRet;
            activation_12146113 = activation_12146113.parent;
            L6: do {
                L7: while (true) {
                if (!!(!(isObj(activation_12146113.m_type, NTI10475132)))) break L7;
                  activation_12146113 = activation_12146113.parent;
                }
            } while(false);
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10570022;

}
function self_10625126(spry_10625128) {
  var result_10625129 = null;

    if ((spry_10625128.currentActivation.self == null)) {
    spry_10625128.currentActivation.self = spry_10625128.nilVal;
    }
    
    result_10625129 = spry_10625128.currentActivation.self;

  return result_10625129;

}
function new_prim_meth_10480247(primitive_10480249) {
  var result_10480250 = null;

    result_10480250 = {primitive: primitive_10480249, m_type: NTI10475112, tags: null};

  return result_10480250;

}
function eval_arg_infix_10625109(spry_10625111) {
  var result_10625112 = null;

    result_10625112 = eval_10475157(spry_10625111.currentActivation.last, spry_10625111);
    spry_10625111.lastSelf = result_10625112;

  return result_10625112;

}
function len_10480163(self_10480165) {
  var result_10480166 = 0;

    result_10480166 = (self_10480165.body.nodes != null ? self_10480165.body.nodes.length : 0);

  return result_10480166;

}
function at_end_10520903(self_10520905) {
  var result_10520906 = false;

    result_10520906 = (self_10520905.pos == len_10480163(self_10520905));

  return result_10520906;

}
function raise_runtime_exception_9971245(msg_9971247) {
    raiseException({message: nimCopy(null, msg_9971247, NTI112), parent: null, m_type: NTI9971090, name: null, trace: null, up: null}, "RuntimeException");

  
}
function HEX5BHEX5D_10480145(self_10480147, i_10480148) {
  var result_10480149 = null;

    result_10480149 = self_10480147.body.nodes[chckIndx(i_10480148, 0, (self_10480147.body.nodes != null ? self_10480147.body.nodes.length : 0)+0-1)-0];

  return result_10480149;

}
function next_10520920(self_10520922) {
  var result_10520923 = null;

    if (at_end_10520903(self_10520922)) {
    raise_runtime_exception_9971245(makeNimstrLit("End of current block, too few arguments?"));
    }
    else {
      result_10520923 = HEX5BHEX5D_10480145(self_10520922, self_10520922.pos);
      self_10520922.pos = addInt(self_10520922.pos, 1);
    }
    

  return result_10520923;

}
function eval_arg_10625170(spry_10625172) {
  var result_10625173 = null;

    result_10625173 = eval_10475157(next_10520920(spry_10625172.currentActivation), spry_10625172);

  return result_10625173;

}
function add_10196176(self_10196178, n_10196179) {
    if (self_10196178.nodes != null) { self_10196178.nodes.push(n_10196179); } else { self_10196178.nodes = [n_10196179]; };

  
}
function litify_10660041(spry_10660043, word_10660044) {
  var result_10660045 = null;

    result_10660045 = new_or_get_lit_word_10125737(spry_10660043.parser, HEX24_9975218(word_10660044));

  return result_10660045;

}
function bool_val_10625205(val_10625207, spry_10625208) {
  var result_10625209 = null;

    if (val_10625207) {
    result_10625209 = spry_10625208.trueVal;
    }
    else {
      result_10625209 = spry_10625208.falseVal;
    }
    

  return result_10625209;

}
function find_10196284(a_10196288, item_10196289) {
  var result_10196290 = 0;

  BeforeRet: do {
    L1: do {
      var i_10196296 = null;
      var i_12146125 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146125 < (a_10196288 != null ? a_10196288.length : 0))) break L3;
            i_10196296 = a_10196288[chckIndx(i_12146125, 0, (a_10196288 != null ? a_10196288.length : 0)+0-1)-0];
            if (HEX3DHEX3D_9985924(i_10196296, item_10196289)) {
            break BeforeRet;
            }
            
            result_10196290 = addInt(result_10196290, 1);
            i_12146125 = addInt(i_12146125, 1);
          }
      } while(false);
    } while(false);
    result_10196290 = -1;
  } while (false);

  return result_10196290;

}
function contains_10196277(a_10196281, item_10196282) {
  var result_10196283 = false;

  BeforeRet: do {
    result_10196283 = (0 <= find_10196284(a_10196281, item_10196282));
    break BeforeRet;
  } while (false);

  return result_10196283;

}
function contains_10196271(self_10196273, n_10196274) {
  var result_10196275 = false;

    result_10196275 = contains_10196277(self_10196273.nodes, n_10196274);

  return result_10196275;

}
function bind_and_assign_10625057(spry_10625059, word_10625060, val_10625061) {
    make_binding_in_map_10590019(spry_10625059, word_10625060, val_10625061);

  
}
function arg_infix_10625075(spry_10625077) {
  var result_10625078 = null;

    result_10625078 = spry_10625077.currentActivation.last;
    spry_10625077.lastSelf = result_10625078;

  return result_10625078;

}
function assign_10625039(spry_10625041, word_10625042, val_10625043) {
    assign_binding_in_map_10610019(spry_10625041, word_10625042, val_10625043);

  
}
function get_or_default_9997159(t_9997164, key_9997165) {
  var result_9997166 = null;

    var hcHEX60gensym9997167_10000001 = [0];
    var indexHEX60gensym9997168_10010603 = raw_get_10000002(t_9997164, key_9997165, hcHEX60gensym9997167_10000001, 0);
    if ((0 <= indexHEX60gensym9997168_10010603)) {
    result_9997166 = t_9997164.data[chckIndx(indexHEX60gensym9997168_10010603, 0, (t_9997164.data != null ? t_9997164.data.length : 0)+0-1)-0].Field2;
    }
    

  return result_9997166;

}
function lookup_9996969(self_9996971, key_9996972) {
  var result_9996973 = null;

    result_9996973 = get_or_default_9997159(self_9996971.bindings, key_9996972);

  return result_9996973;

}
function lookup_10540019(spry_10540021, key_10540022) {
                    var Tmp6;
              var Tmp7;

  var result_10540023 = null;

  BeforeRet: do {
    if (isObj(key_10540022.m_type, NTI9971146)) {
    var binding_10540032 = lookup_10540019(spry_10540021, key_10540022.module);
    if (!((binding_10540032 == null))) {
    var module_10545006 = binding_10540032.val;
    if (!((module_10545006 == null))) {
    result_10540023 = lookup_9996969(module_10545006, key_10540022);
    }
    
    }
    
    }
    else {
    if (isObj(key_10540022.m_type, NTI9971155)) {
    var binding_10550014 = lookup_10540019(spry_10540021, key_10540022.module);
    if (!((binding_10550014 == null))) {
    var module_10555006 = binding_10550014.val;
    if (!((module_10555006 == null))) {
    result_10540023 = lookup_9996969(module_10555006, key_10540022);
    }
    
    }
    
    }
    else {
      L1: do {
        var activation_10560006 = null;
        var activation_12146130 = spry_10540021.currentActivation;
        L2: do {
            L3: while (true) {
            if (!!((activation_12146130 == null))) break L3;
              L4: do {
                  L5: while (true) {
                  if (!!(!(isObj(activation_12146130.m_type, NTI10475132)))) break L5;
                    if (isObj(activation_12146130.m_type, NTI10475130)) {
                    Tmp6 = activation_12146130.body.parent;
                    }
                    else {
                    Tmp6 = activation_12146130.parent;
                    }
                    
                    activation_12146130 = Tmp6;
                  }
              } while(false);
              activation_10560006 = activation_12146130;
              var hit_10560007 = lookup_10530037(activation_10560006, key_10540022);
              if (!((hit_10560007 == null))) {
              result_10540023 = hit_10560007;
              break BeforeRet;
              }
              
              if (isObj(activation_12146130.m_type, NTI10475130)) {
              Tmp7 = activation_12146130.body.parent;
              }
              else {
              Tmp7 = activation_12146130.parent;
              }
              
              activation_12146130 = Tmp7;
            }
        } while(false);
      } while(false);
      L8: do {
        var map_10565012 = null;
        var i_12146138 = 0;
        var l_12146139 = (spry_10540021.modules.nodes != null ? spry_10540021.modules.nodes.length : 0);
        L9: do {
            L10: while (true) {
            if (!(i_12146138 < l_12146139)) break L10;
              map_10565012 = spry_10540021.modules.nodes[chckIndx(i_12146138, 0, (spry_10540021.modules.nodes != null ? spry_10540021.modules.nodes.length : 0)+0-1)-0];
              var hit_10565013 = lookup_9996969(map_10565012, key_10540022);
              if (!((hit_10565013 == null))) {
              result_10540023 = hit_10565013;
              break BeforeRet;
              }
              
              i_12146138 = addInt(i_12146138, 1);
              if (!(((spry_10540021.modules.nodes != null ? spry_10540021.modules.nodes.length : 0) == l_12146139))) {
              failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    }
  } while (false);

  return result_10540023;

}
function arg_10625092(spry_10625094) {
  var result_10625095 = null;

    result_10625095 = next_10520920(spry_10625094.currentActivation);

  return result_10625095;

}
function new_value_10195973(v_10195975) {
  var result_10195976 = null;

    result_10195976 = {value: nimCopy(null, v_10195975, NTI112), m_type: NTI9971176, tags: null};

  return result_10195976;

}
function new_value_10195941(v_10195943) {
  var result_10195944 = null;

    result_10195944 = {value: v_10195943, m_type: NTI9971173, tags: null};

  return result_10195944;

}
function to_float_26459(i_26461) {
  var result_26462 = 0.0;

    result_26462 = i_26461;

  return result_26462;

}
function new_value_10195909(v_10195911) {
  var result_10195912 = null;

    result_10195912 = {value: v_10195911, m_type: NTI9971170, tags: null};

  return result_10195912;

}
function to_int_26493(f_26495) {
    var Tmp1;

  var result_26496 = 0;

    if ((0.0 <= f_26495)) {
    Tmp1 = (((f_26495 + 5.0000000000000000e-01))|0);
    }
    else {
    Tmp1 = (((f_26495 - 5.0000000000000000e-01))|0);
    }
    
    result_26496 = Tmp1;

  return result_26496;

}
function current_keyword_10270478(self_10270480) {
  var result_10270481 = null;

  BeforeRet: do {
    if (isObj(self_10270480.stack[chckIndx((self_10270480.stack != null ? (self_10270480.stack.length-1) : -1), 0, (self_10270480.stack != null ? self_10270480.stack.length : 0)+0-1)-0].m_type, NTI9971162)) {
    result_10270481 = self_10270480.stack[chckIndx((self_10270480.stack != null ? (self_10270480.stack.length-1) : -1), 0, (self_10270480.stack != null ? self_10270480.stack.length : 0)+0-1)-0];
    break BeforeRet;
    }
    else {
      result_10270481 = null;
      break BeforeRet;
    }
    
  } while (false);

  return result_10270481;

}
function in_balance_10270387(self_10270389) {
  var result_10270390 = false;

  BeforeRet: do {
    result_10270390 = ((self_10270389.args != null ? self_10270389.args.length : 0) == (self_10270389.keys != null ? self_10270389.keys.length : 0));
    break BeforeRet;
  } while (false);

  return result_10270390;

}
function pop_10280028(s_10280033, s_10280033_Idx) {
  var result_10280034 = null;

    var l_10280040 = subInt((s_10280033[s_10280033_Idx] != null ? s_10280033[s_10280033_Idx].length : 0), 1);
    result_10280034 = s_10280033[s_10280033_Idx][chckIndx(l_10280040, 0, (s_10280033[s_10280033_Idx] != null ? s_10280033[s_10280033_Idx].length : 0)+0-1)-0];
    if (s_10280033[s_10280033_Idx] === null) s_10280033[s_10280033_Idx] = [];
               if (s_10280033[s_10280033_Idx].length < chckRange(l_10280040, 0, 2147483647)) { for (var i=s_10280033[s_10280033_Idx].length;i<chckRange(l_10280040, 0, 2147483647);++i) s_10280033[s_10280033_Idx].push(null); }
               else { s_10280033[s_10280033_Idx].length = chckRange(l_10280040, 0, 2147483647); };

  return result_10280034;

}
function nsuFindChar(s_9370216, sub_9370217, start_9370218, last_9370219) {
    var Tmp1;

  var result_9370221 = 0;

  BeforeRet: do {
    if ((last_9370219 == 0)) {
    Tmp1 = (s_9370216 != null ? (s_9370216.length-1) : -1);
    }
    else {
    Tmp1 = last_9370219;
    }
    
    var last_9370223 = Tmp1;
    L2: do {
      var i_9370606 = 0;
      var colontmp__12146175 = 0;
      colontmp__12146175 = start_9370218;
      var res_12146176 = colontmp__12146175;
      L3: do {
          L4: while (true) {
          if (!(res_12146176 <= last_9370223)) break L4;
            i_9370606 = res_12146176;
            if ((sub_9370217 == s_9370216[chckIndx(i_9370606, 0, (s_9370216 != null ? s_9370216.length : 0)+0-1)-0])) {
            result_9370221 = i_9370606;
            break BeforeRet;
            }
            
            res_12146176 = addInt(res_12146176, 1);
          }
      } while(false);
    } while(false);
    result_9370221 = -1;
    break BeforeRet;
  } while (false);

  return result_9370221;

}
function nsuInitSkipTable(a_9365081, sub_9365082) {
    var m_9365083 = (sub_9365082 != null ? sub_9365082.length : 0);
    var i_9365085 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_9365085 <= 248)) break L2;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 0), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 1), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 2), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 3), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 4), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 5), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 6), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          a_9365081[chckIndx(chckRange(addInt(i_9365085, 7), 0, 255), 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = m_9365083;
          i_9365085 = addInt(i_9365085, 8);
        }
    } while(false);
    L3: do {
      var i_9365101 = 0;
      var colontmp__12146183 = 0;
      colontmp__12146183 = subInt(m_9365083, 1);
      var i_12146184 = 0;
      L4: do {
          L5: while (true) {
          if (!(i_12146184 < colontmp__12146183)) break L5;
            i_9365101 = i_12146184;
            a_9365081[chckIndx(sub_9365082[chckIndx(i_9365101, 0, (sub_9365082 != null ? sub_9365082.length : 0)+0-1)-0], 0, (a_9365081 != null ? a_9365081.length : 0)+0-1)-0] = subInt(subInt(m_9365083, 1), i_9365101);
            i_12146184 = addInt(i_12146184, 1);
          }
      } while(false);
    } while(false);

  
}
function nsuFindStrA(a_9365117, s_9365118, sub_9365119, start_9365120, last_9365121) {
    var Tmp1;

  var result_9365123 = 0;

  BeforeRet: do {
    if ((last_9365121 == 0)) {
    Tmp1 = (s_9365118 != null ? (s_9365118.length-1) : -1);
    }
    else {
    Tmp1 = last_9365121;
    }
    
    var last_9365125 = Tmp1;
    var sub_last_9365126 = subInt((sub_9365119 != null ? sub_9365119.length : 0), 1);
    if ((sub_last_9365126 == -1)) {
    result_9365123 = start_9365120;
    break BeforeRet;
    }
    
    var skip_9365127 = start_9365120;
    L2: do {
        L3: while (true) {
        if (!(sub_last_9365126 <= subInt(last_9365125, skip_9365127))) break L3;
          var i_9370001 = sub_last_9365126;
          L4: do {
              L5: while (true) {
              if (!(s_9365118[chckIndx(addInt(skip_9365127, i_9370001), 0, (s_9365118 != null ? s_9365118.length : 0)+0-1)-0] == sub_9365119[chckIndx(i_9370001, 0, (sub_9365119 != null ? sub_9365119.length : 0)+0-1)-0])) break L5;
                if ((i_9370001 == 0)) {
                result_9365123 = skip_9365127;
                break BeforeRet;
                }
                
                i_9370001 = subInt(i_9370001, 1);
              }
          } while(false);
          skip_9365127 = addInt(skip_9365127, a_9365117[chckIndx(s_9365118[chckIndx(addInt(skip_9365127, sub_last_9365126), 0, (s_9365118 != null ? s_9365118.length : 0)+0-1)-0], 0, (a_9365117 != null ? a_9365117.length : 0)+0-1)-0]);
        }
    } while(false);
    result_9365123 = -1;
    break BeforeRet;
  } while (false);

  return result_9365123;

}
function nsuFindStr(s_9375022, sub_9375023, start_9375024, last_9375025) {
  var result_9375027 = 0;

  BeforeRet: do {
    if (((s_9375022 != null ? s_9375022.length : 0) < (sub_9375023 != null ? sub_9375023.length : 0))) {
    result_9375027 = -1;
    break BeforeRet;
    }
    
    if (((sub_9375023 != null ? sub_9375023.length : 0) == 1)) {
    result_9375027 = nsuFindChar(s_9375022, sub_9375023[chckIndx(0, 0, (sub_9375023 != null ? sub_9375023.length : 0)+0-1)-0], start_9375024, last_9375025);
    break BeforeRet;
    }
    
    var a_9380001 = [new Int32Array(256)];
    nsuInitSkipTable(a_9380001[0], sub_9375023);
    result_9375027 = nsuFindStrA(a_9380001[0], s_9375022, sub_9375023, start_9375024, last_9375025);
  } while (false);

  return result_9375027;

}
function contains_9430277(s_9430279, sub_9430280) {
  var result_9430281 = false;

  BeforeRet: do {
    result_9430281 = (0 <= nsuFindStr(s_9430279, sub_9430280, 0, 0));
    break BeforeRet;
  } while (false);

  return result_9430281;

}
function substr_eq_8800026(s_8800028, pos_8800029, substr_8800030) {
  var result_8800031 = false;

  BeforeRet: do {
    var i_8800033 = 0;
    var length_8800034 = (substr_8800030 != null ? substr_8800030.length : 0);
    L1: do {
        L2: while (true) {
        if (!(((i_8800033 < length_8800034) && (addInt(pos_8800029, i_8800033) < (s_8800028 != null ? s_8800028.length : 0))) && (s_8800028[chckIndx(addInt(pos_8800029, i_8800033), 0, (s_8800028 != null ? s_8800028.length : 0)+0-1)-0] == substr_8800030[chckIndx(i_8800033, 0, (substr_8800030 != null ? substr_8800030.length : 0)+0-1)-0]))) break L2;
          i_8800033 = addInt(i_8800033, 1);
        }
    } while(false);
    result_8800031 = (i_8800033 == length_8800034);
    break BeforeRet;
  } while (false);

  return result_8800031;

}
function substr_340822(s_340824, first_340825, last_340826) {
  var result_340827 = null;

    var first_340828 = nimMax(first_340825, 0);
    var l_340830 = nimMax(addInt(subInt(nimMin(last_340826, (s_340824 != null ? (s_340824.length-1) : -1)), first_340828), 1), 0);
    result_340827 = nimCopy(null, mnewString(chckRange(l_340830, 0, 2147483647)), NTI112);
    L1: do {
      var i_340839 = 0;
      var colontmp__12146199 = 0;
      colontmp__12146199 = subInt(l_340830, 1);
      var res_12146200 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12146200 <= colontmp__12146199)) break L3;
            i_340839 = res_12146200;
            result_340827[chckIndx(i_340839, 0, (result_340827 != null ? result_340827.length : 0)+0-1)-0] = s_340824[chckIndx(addInt(i_340839, first_340828), 0, (s_340824 != null ? s_340824.length : 0)+0-1)-0];
            res_12146200 = addInt(res_12146200, 1);
          }
      } while(false);
    } while(false);

  return result_340827;

}
function nsuSplitString(s_8975039, sep_8975040, maxsplit_8975041) {
  var result_8975043 = null;

    if (!((0 < (sep_8975040 != null ? sep_8975040.length : 0)))) {
    failed_assert_impl_102680(makeNimstrLit("strutils.nim(756, 11) `sep.len > 0` "));
    }
    
    result_8975043 = nimCopy(null, [], NTI8995015);
    L1: do {
      var xHEX60gensym8990201_8995016 = null;
      var lastHEX60gensym8835043_12146192 = 0;
      var splitsHEX60gensym8835044_12146193 = maxsplit_8975041;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym8835043_12146192 <= (s_8975039 != null ? s_8975039.length : 0))) break L3;
            var firstHEX60gensym8835045_12146195 = lastHEX60gensym8835043_12146192;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym8835043_12146192 < (s_8975039 != null ? s_8975039.length : 0)) && !(substr_eq_8800026(s_8975039, lastHEX60gensym8835043_12146192, sep_8975040)))) break L5;
                  lastHEX60gensym8835043_12146192 = addInt(lastHEX60gensym8835043_12146192, 1);
                }
            } while(false);
            if ((splitsHEX60gensym8835044_12146193 == 0)) {
            lastHEX60gensym8835043_12146192 = (s_8975039 != null ? s_8975039.length : 0);
            }
            
            xHEX60gensym8990201_8995016 = substr_340822(s_8975039, firstHEX60gensym8835045_12146195, subInt(lastHEX60gensym8835043_12146192, 1));
            var Tmp6 = nimCopy(null, xHEX60gensym8990201_8995016, NTI112);
            if (result_8975043 != null) { result_8975043.push(Tmp6); } else { result_8975043 = [Tmp6]; };
            if ((splitsHEX60gensym8835044_12146193 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym8835044_12146193 = subInt(splitsHEX60gensym8835044_12146193, 1);
            lastHEX60gensym8835043_12146192 = addInt(lastHEX60gensym8835043_12146192, (sep_8975040 != null ? sep_8975040.length : 0));
          }
      } while(false);
    } while(false);

  return result_8975043;

}
function new_eval_module_word_10195254(s_10195256) {
  var result_10195257 = null;

    var both_10195258 = nsuSplitString(s_10195256, makeNimstrLit("::"), -1);
    result_10195257 = {word: nimCopy(null, both_10195258[chckIndx(1, 0, (both_10195258 != null ? both_10195258.length : 0)+0-1)-0], NTI112), module: new_eval_word_10125690(both_10195258[chckIndx(0, 0, (both_10195258 != null ? both_10195258.length : 0)+0-1)-0]), m_type: NTI9971146, tags: null};

  return result_10195257;

}
function nsuJoinSep(a_9360018, sep_9360019) {
  var result_9360020 = null;

    if ((0 < (a_9360018 != null ? a_9360018.length : 0))) {
    var l_9365009 = mulInt((sep_9360019 != null ? sep_9360019.length : 0), subInt((a_9360018 != null ? a_9360018.length : 0), 1));
    L1: do {
      var i_9365023 = 0;
      var colontmp__12146206 = 0;
      colontmp__12146206 = (a_9360018 != null ? (a_9360018.length-1) : -1);
      var res_12146207 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12146207 <= colontmp__12146206)) break L3;
            i_9365023 = res_12146207;
            l_9365009 = addInt(l_9365009, (a_9360018[chckIndx(i_9365023, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0] != null ? a_9360018[chckIndx(i_9365023, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0].length : 0));
            res_12146207 = addInt(res_12146207, 1);
          }
      } while(false);
    } while(false);
    result_9360020 = nimCopy(null, mnewString(0), NTI112);
    if (result_9360020 != null) { result_9360020 = (result_9360020).concat(a_9360018[chckIndx(0, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0]); } else { result_9360020 = a_9360018[chckIndx(0, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0].slice(); };
    L4: do {
      var i_9365043 = 0;
      var colontmp__12146213 = 0;
      colontmp__12146213 = (a_9360018 != null ? (a_9360018.length-1) : -1);
      var res_12146214 = 1;
      L5: do {
          L6: while (true) {
          if (!(res_12146214 <= colontmp__12146213)) break L6;
            i_9365043 = res_12146214;
            if (result_9360020 != null) { result_9360020 = (result_9360020).concat(sep_9360019); } else { result_9360020 = sep_9360019.slice(); };
            if (result_9360020 != null) { result_9360020 = (result_9360020).concat(a_9360018[chckIndx(i_9365043, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0]); } else { result_9360020 = a_9360018[chckIndx(i_9365043, 0, (a_9360018 != null ? a_9360018.length : 0)+0-1)-0].slice(); };
            res_12146214 = addInt(res_12146214, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      result_9360020 = nimCopy(null, [], NTI112);
    }
    

  return result_9360020;

}
function add_10196205(x_10196210, x_10196210_Idx, y_10196212) {
    var Tmp1;

    var xl_10196218 = (x_10196210[x_10196210_Idx] != null ? x_10196210[x_10196210_Idx].length : 0);
    if (x_10196210[x_10196210_Idx] === null) x_10196210[x_10196210_Idx] = [];
               if (x_10196210[x_10196210_Idx].length < (Tmp1 = chckRange(addInt(xl_10196218, (y_10196212 != null ? y_10196212.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_10196210[x_10196210_Idx].length;i<Tmp1;++i) x_10196210[x_10196210_Idx].push(null); }
               else { x_10196210[x_10196210_Idx].length = Tmp1; };
    L2: do {
      var i_10196243 = 0;
      var colontmp__12146220 = 0;
      colontmp__12146220 = (y_10196212 != null ? (y_10196212.length-1) : -1);
      var res_12146221 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_12146221 <= colontmp__12146220)) break L4;
            i_10196243 = res_12146221;
            x_10196210[x_10196210_Idx][chckIndx(addInt(xl_10196218, i_10196243), 0, (x_10196210[x_10196210_Idx] != null ? x_10196210[x_10196210_Idx].length : 0)+0-1)-0] = y_10196212[chckIndx(i_10196243, 0, (y_10196212 != null ? y_10196212.length : 0)+0-1)-0];
            res_12146221 = addInt(res_12146221, 1);
          }
      } while(false);
    } while(false);

  
}
function produce_nodes_10270414(self_10270416) {
  var result_10270418 = [null];

    result_10270418[0] = nimCopy(null, new_seq_10195614(0), NTI10195618);
    if (contains_9430277(self_10270416.keys[chckIndx(0, 0, (self_10270416.keys != null ? self_10270416.keys.length : 0)+0-1)-0], makeNimstrLit("::"))) {
    if (result_10270418[0] != null) { result_10270418[0].push(new_eval_module_word_10195254(nsuJoinSep(self_10270416.keys, []))); } else { result_10270418[0] = [new_eval_module_word_10195254(nsuJoinSep(self_10270416.keys, []))]; };
    }
    else {
    if (result_10270418[0] != null) { result_10270418[0].push(new_eval_word_10125690(nsuJoinSep(self_10270416.keys, []))); } else { result_10270418[0] = [new_eval_word_10125690(nsuJoinSep(self_10270416.keys, []))]; };
    }
    
    add_10196205(result_10270418, 0, self_10270416.args);

  return result_10270418[0];

}
function delete_10205356(x_10205361, x_10205361_Idx, i_10205362) {
    x_10205361[x_10205361_Idx].splice(i_10205362, 1);

  
}
function remove_last_10205347(self_10205349) {
    delete_10205356(self_10205349, "nodes", chckRange((self_10205349.nodes != null ? (self_10205349.nodes.length-1) : -1), 0, 2147483647));

  
}
function add_10196200(self_10196202, n_10196204) {
    add_10196205(self_10196202, "nodes", n_10196204);

  
}
function close_keyword_10280024(self_10280026) {
    var keyword_10280027 = current_keyword_10270478(self_10280026);
    pop_10280028(self_10280026, "stack");
    var nodes_10280222 = produce_nodes_10270414(keyword_10280027);
    remove_last_10205347(self_10280026.stack[chckIndx((self_10280026.stack != null ? (self_10280026.stack.length-1) : -1), 0, (self_10280026.stack != null ? self_10280026.stack.length : 0)+0-1)-0]);
    add_10196200(self_10280026.stack[chckIndx((self_10280026.stack != null ? (self_10280026.stack.length-1) : -1), 0, (self_10280026.stack != null ? self_10280026.stack.length : 0)+0-1)-0], nodes_10280222);

  
}
function do_add_node_10295026(self_10295028, node_10295029) {
    var keyword_10295030 = current_keyword_10270478(self_10295028);
    if ((keyword_10295030 == null)) {
    add_10196176(self_10295028.stack[chckIndx((self_10295028.stack != null ? (self_10295028.stack.length-1) : -1), 0, (self_10295028.stack != null ? self_10295028.stack.length : 0)+0-1)-0], node_10295029);
    }
    else {
      if (in_balance_10270387(keyword_10295030)) {
      close_keyword_10280024(self_10295028);
      do_add_node_10295026(self_10295028, node_10295029);
      }
      else {
      if (keyword_10295030.args != null) { keyword_10295030.args.push(node_10295029); } else { keyword_10295030.args = [node_10295029]; };
      }
      
    }
    

  
}
function push_10300031(self_10300033, n_10300034) {
    if (!(((self_10300033.stack != null ? self_10300033.stack.length : 0) == 0))) {
    do_add_node_10295026(self_10300033, n_10300034);
    }
    
    if (self_10300033.stack != null) { self_10300033.stack.push(n_10300034); } else { self_10300033.stack = [n_10300034]; };

  
}
function raise_parse_exception_10100965(msg_10100967) {
    raiseException({message: nimCopy(null, msg_10100967, NTI112), parent: null, m_type: NTI9971018, name: null, trace: null, up: null}, "ParseException");

  
}
function new_get_arg_word_10195538(s_10195540) {
  var result_10195541 = null;

    result_10195541 = {word: nimCopy(null, s_10195540, NTI112), m_type: NTI9971160, tags: null};

  return result_10195541;

}
function HEX5BHEX5D_4455068(s_4455072, x_4455074) {
  var result_4455075 = null;

    var a_4455201 = x_4455074.a;
    var l_4455401 = addInt(subInt(subInt((s_4455072 != null ? s_4455072.length : 0), x_4455074.b), a_4455201), 1);
    result_4455075 = nimCopy(null, mnewString(chckRange(l_4455401, 0, 2147483647)), NTI112);
    L1: do {
      var i_4455409 = 0;
      var i_12146252 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146252 < l_4455401)) break L3;
            i_4455409 = i_12146252;
            result_4455075[chckIndx(i_4455409, 0, (result_4455075 != null ? result_4455075.length : 0)+0-1)-0] = s_4455072[chckIndx(addInt(i_4455409, a_4455201), 0, (s_4455072 != null ? s_4455072.length : 0)+0-1)-0];
            i_12146252 = addInt(i_12146252, 1);
          }
      } while(false);
    } while(false);

  return result_4455075;

}
function HEX2EHEX2E_4455001(a_4455006, b_4455008) {
  var result_4455014 = {a: 0, b: 0};

    nimCopy(result_4455014, {a: a_4455006, b: b_4455008}, NTI4455011);

  return result_4455014;

}
function new_eval_arg_word_10195491(s_10195493) {
  var result_10195494 = null;

    result_10195494 = {word: nimCopy(null, s_10195493, NTI112), m_type: NTI9971151, tags: null};

  return result_10195494;

}
function new_get_self_word_10195444(s_10195446) {
  var result_10195447 = null;

    result_10195447 = {word: nimCopy(null, s_10195446, NTI112), m_type: NTI9971158, tags: null};

  return result_10195447;

}
function new_get_module_word_10195396(s_10195398) {
  var result_10195399 = null;

    var both_10195400 = nsuSplitString(s_10195398, makeNimstrLit("::"), -1);
    result_10195399 = {word: nimCopy(null, both_10195400[chckIndx(1, 0, (both_10195400 != null ? both_10195400.length : 0)+0-1)-0], NTI112), module: new_eval_word_10125690(both_10195400[chckIndx(0, 0, (both_10195400 != null ? both_10195400.length : 0)+0-1)-0]), m_type: NTI9971155, tags: null};

  return result_10195399;

}
function new_get_word_10195349(s_10195351) {
  var result_10195352 = null;

    result_10195352 = {word: nimCopy(null, s_10195351, NTI112), m_type: NTI9971153, tags: null};

  return result_10195352;

}
function HEX5BHEX5D_326029(s_326031, i_326032) {
  var result_326033 = 0;

    result_326033 = s_326031[chckIndx(subInt((s_326031 != null ? s_326031.length : 0), i_326032), 0, (s_326031 != null ? s_326031.length : 0)+0-1)-0];

  return result_326033;

}
function new_seq_610232(len_610235) {
  var result_610237 = null;

    result_610237 = new Array(len_610235); for (var i=0;i<len_610235;++i) {result_610237[i]=null;}
  return result_610237;

}
function new_key_word_10195585() {
  var result_10195587 = null;

    result_10195587 = {keys: new_seq_610232(0), args: new_seq_10195614(0), m_type: NTI9971162, tags: null};

  return result_10195587;

}
function add_key_10270363(self_10270365, key_10270366) {
    var Tmp1 = nimCopy(null, key_10270366, NTI112);
    if (self_10270365.keys != null) { self_10270365.keys.push(Tmp1); } else { self_10270365.keys = [Tmp1]; };

  
}
function new_eval_self_word_10195302(s_10195304) {
  var result_10195305 = null;

    result_10195305 = {word: nimCopy(null, s_10195304, NTI112), m_type: NTI9971149, tags: null};

  return result_10195305;

}
function new_word_10305026(self_10305028, token_10305029) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;

  var result_10305030 = null;

  BeforeRet: do {
    var len_10305031 = (token_10305029 != null ? token_10305029.length : 0);
    var first_10305032 = token_10305029[chckIndx(0, 0, (token_10305029 != null ? token_10305029.length : 0)+0-1)-0];
      if (!(first_10305032 == 58)) Tmp2 = false; else {        Tmp2 = (1 < len_10305031);      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = !((token_10305029[chckIndx(1, 0, (token_10305029 != null ? token_10305029.length : 0)+0-1)-0] == 61));      }    if (Tmp1) {
    if ((token_10305029[chckIndx(1, 0, (token_10305029 != null ? token_10305029.length : 0)+0-1)-0] == 36)) {
    if (((token_10305029 != null ? token_10305029.length : 0) < 3)) {
    raise_parse_exception_10100965(makeNimstrLit("Malformed get argword, missing at least 1 character"));
    }
    
    result_10305030 = new_get_arg_word_10195538(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(2, 1)));
    break BeforeRet;
    }
    else {
      result_10305030 = new_eval_arg_word_10195491(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(1, 1)));
      break BeforeRet;
    }
    
    }
    
      if (!(first_10305032 == 36)) Tmp3 = false; else {        Tmp3 = (1 < len_10305031);      }    if (Tmp3) {
    if ((token_10305029[chckIndx(1, 0, (token_10305029 != null ? token_10305029.length : 0)+0-1)-0] == 64)) {
    if ((2 < len_10305031)) {
    result_10305030 = new_get_self_word_10195444(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(2, 1)));
    break BeforeRet;
    }
    else {
    raise_parse_exception_10100965(makeNimstrLit("Malformed self lookup word, missing at least 1 character"));
    }
    
    }
    else {
      if (contains_9430277(token_10305029, makeNimstrLit("::"))) {
      result_10305030 = new_get_module_word_10195396(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(1, 1)));
      break BeforeRet;
      }
      else {
        result_10305030 = new_get_word_10195349(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(1, 1)));
        break BeforeRet;
      }
      
    }
    
    }
    
    if ((first_10305032 == 39)) {
    if ((len_10305031 < 2)) {
    raise_parse_exception_10100965(makeNimstrLit("Malformed literal word, missing at least 1 character"));
    }
    else {
      result_10305030 = new_or_get_lit_word_10125737(self_10305028, HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(1, 1)));
      break BeforeRet;
    }
    
    }
    
      if (!(1 < len_10305031)) Tmp4 = false; else {        Tmp4 = (HEX5BHEX5D_326029(token_10305029, 1) == 58);      }    if (Tmp4) {
    if ((self_10305028 == null)) {
    result_10305030 = new_eval_word_10125690(token_10305029);
    break BeforeRet;
    }
    else {
      if ((current_keyword_10270478(self_10305028) == null)) {
      push_10300031(self_10305028, new_key_word_10195585());
      }
      
      if (in_balance_10270387(current_keyword_10270478(self_10305028))) {
      add_key_10270363(current_keyword_10270478(self_10305028), token_10305029);
      }
      else {
      raise_parse_exception_10100965(makeNimstrLit("Malformed keyword syntax, expecting an argument"));
      }
      
      result_10305030 = null;
      break BeforeRet;
    }
    
    }
    
    if ((first_10305032 == 64)) {
    if ((1 < len_10305031)) {
    result_10305030 = new_eval_self_word_10195302(HEX5BHEX5D_4455068(token_10305029, HEX2EHEX2E_4455001(1, 1)));
    break BeforeRet;
    }
    else {
    raise_parse_exception_10100965(makeNimstrLit("Malformed self eval word, missing at least 1 character"));
    }
    
    }
    else {
      if (contains_9430277(token_10305029, makeNimstrLit("::"))) {
      result_10305030 = new_eval_module_word_10195254(token_10305029);
      break BeforeRet;
      }
      else {
        result_10305030 = new_eval_word_10125690(token_10305029);
        break BeforeRet;
      }
      
    }
    
  } while (false);

  return result_10305030;

}
function new_word_or_value_10410053(self_10410055) {
  var result_10410056 = null;

  BeforeRet: do {
    var token_10410057 = nimCopy(null, self_10410055.token, NTI112);
    self_10410055.token = nimCopy(null, [], NTI112);
    self_10410055.ws = nimCopy(null, [], NTI112);
    L1: do {
      var p_10420214 = null;
      var i_12146236 = 0;
      var l_12146237 = (self_10410055.valueParsers != null ? self_10410055.valueParsers.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_12146236 < l_12146237)) break L3;
            p_10420214 = self_10410055.valueParsers[chckIndx(i_12146236, 0, (self_10410055.valueParsers != null ? self_10410055.valueParsers.length : 0)+0-1)-0];
            var value_or_nil_10420215 = parse_value_10210638(p_10420214, token_10410057);
            if (!((value_or_nil_10420215 == null))) {
            result_10410056 = value_or_nil_10420215;
            break BeforeRet;
            }
            
            i_12146236 = addInt(i_12146236, 1);
            if (!(((self_10410055.valueParsers != null ? self_10410055.valueParsers.length : 0) == l_12146237))) {
            failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_10410056 = new_word_10305026(self_10410055, token_10410057);
  } while (false);

  return result_10410056;

}
function add_node_10425019(self_10425021) {
    if ((0 < (self_10425021.token != null ? self_10425021.token.length : 0))) {
    var node_10430001 = new_word_or_value_10410053(self_10425021);
    if (!((node_10430001 == null))) {
    do_add_node_10295026(self_10425021, node_10430001);
    }
    
    }
    

  
}
function is_some_10445022(self_10445026) {
  var result_10445027 = false;

    result_10445027 = self_10445026.has;

  return result_10445027;

}
function is_none_10445280(self_10445284) {
  var result_10445285 = false;

    result_10445285 = !(self_10445284.has);

  return result_10445285;

}
function get_10445259(self_10445263) {
  var result_10445264 = null;

    if (is_none_10445280(self_10445263)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9970204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_10445264 = nimCopy(null, self_10445263.val, NTI112);

  return result_10445264;

}
function new_paren_10195797() {
  var result_10195799 = null;

    result_10195799 = {nodes: new_seq_10195614(0), m_type: NTI9971196, tags: null};

  return result_10195799;

}
function new_curly_10195877() {
  var result_10195879 = null;

    result_10195879 = {nodes: new_seq_10195614(0), m_type: NTI9971198, tags: null};

  return result_10195879;

}
function pop_10290024(self_10290026) {
  var result_10290027 = null;

    if (!((current_keyword_10270478(self_10290026) == null))) {
    close_keyword_10280024(self_10290026);
    }
    
    result_10290027 = pop_10280028(self_10290026, "stack");

  return result_10290027;

}
function HEX5BHEX5D_10475005(s_10475010, i_10475011) {
  var result_10475013 = null;
  var result_10475013_Idx = 0;

    result_10475013 = s_10475010; result_10475013_Idx = chckIndx(subInt((s_10475010 != null ? s_10475010.length : 0), i_10475011), 0, (s_10475010 != null ? s_10475010.length : 0)+0-1)-0;

  return [result_10475013, result_10475013_Idx];

}
function parse_10435019(self_10435021, str_10435022) {
            var Tmp3;
                          var Tmp7;
                        var Tmp10;
    var Tmp11;

  var result_10435023 = null;

    var ch_10435024 = 0;
    var current_value_parser_10435025 = null;
    var pos_10435027 = 0;
    self_10435021.stack = nimCopy(null, [], NTI10435042);
    self_10435021.token = nimCopy(null, [], NTI112);
    self_10435021.ws = nimCopy(null, [], NTI112);
    var blok_10435043 = new_blok_10195717();
    push_10300031(self_10435021, blok_10435043);
    L1: do {
        L2: while (true) {
        if (!(pos_10435027 < (str_10435022 != null ? str_10435022.length : 0))) break L2;
          ch_10435024 = str_10435022[chckIndx(pos_10435027, 0, (str_10435022 != null ? str_10435022.length : 0)+0-1)-0];
          pos_10435027 = addInt(pos_10435027, 1);
            if (!self_10435021.specialCharDetected) Tmp3 = false; else {              Tmp3 = (ConstSet2[ch_10435024] != undefined);            }          if (Tmp3) {
          if (self_10435021.token != null) { addChar(self_10435021.token, ch_10435024); } else { self_10435021.token = [ch_10435024]; };
          }
          else {
            if (self_10435021.specialCharDetected) {
            add_node_10425019(self_10435021);
            self_10435021.specialCharDetected = false;
            }
            
            if (!((current_value_parser_10435025 == null))) {
            var found_10445006 = token_ready_10230075(current_value_parser_10435025, self_10435021.token, ch_10435024);
            if (is_some_10445022(found_10445006)) {
            self_10435021.token = nimCopy(null, get_10445259(found_10445006), NTI112);
            add_node_10425019(self_10435021);
            current_value_parser_10435025 = null;
            }
            else {
            if (self_10435021.token != null) { addChar(self_10435021.token, ch_10435024); } else { self_10435021.token = [ch_10435024]; };
            }
            
            }
            else {
              if (((current_value_parser_10435025 == null) && (ConstSet3[ch_10435024] != undefined))) {
              add_node_10425019(self_10435021);
              if (self_10435021.ws != null) { addChar(self_10435021.ws, ch_10435024); } else { self_10435021.ws = [ch_10435024]; };
              }
              else {
                var token_len_10455007 = addInt((self_10435021.token != null ? self_10435021.token.length : 0), 1);
                if (((current_value_parser_10435025 == null) && (token_len_10455007 < 5))) {
                L4: do {
                  var p_10455019 = null;
                  var i_12146159 = 0;
                  var l_12146160 = (self_10435021.valueParsers != null ? self_10435021.valueParsers.length : 0);
                  L5: do {
                      L6: while (true) {
                      if (!(i_12146159 < l_12146160)) break L6;
                        p_10455019 = self_10435021.valueParsers[chckIndx(i_12146159, 0, (self_10435021.valueParsers != null ? self_10435021.valueParsers.length : 0)+0-1)-0];
                          if (!(prefix_length_10230035(p_10455019) == token_len_10455007)) Tmp7 = false; else {                            Tmp7 = token_start_10230097(p_10455019, self_10435021.token, ch_10435024);                          }                        if (Tmp7) {
                        current_value_parser_10435025 = p_10455019;
                        break L4;
                        }
                        
                        i_12146159 = addInt(i_12146159, 1);
                        if (!(((self_10435021.valueParsers != null ? self_10435021.valueParsers.length : 0) == l_12146160))) {
                        failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
                }
                
                if ((current_value_parser_10435025 == null)) {
                switch (ch_10435024) {
                case 35:
                  add_node_10425019(self_10435021);
                  if (self_10435021.ws != null) { addChar(self_10435021.ws, 35); } else { self_10435021.ws = [35]; };
                  L8: do {
                      L9: while (true) {
                        if (!(pos_10435027 < (str_10435022 != null ? str_10435022.length : 0))) Tmp10 = false; else {                          Tmp10 = !((str_10435022[chckIndx(pos_10435027, 0, (str_10435022 != null ? str_10435022.length : 0)+0-1)-0] == 10));                        }                      if (!Tmp10) break L9;
                        if (self_10435021.ws != null) { addChar(self_10435021.ws, str_10435022[chckIndx(pos_10435027, 0, (str_10435022 != null ? str_10435022.length : 0)+0-1)-0]); } else { self_10435021.ws = [str_10435022[chckIndx(pos_10435027, 0, (str_10435022 != null ? str_10435022.length : 0)+0-1)-0]]; };
                        pos_10435027 = addInt(pos_10435027, 1);
                      }
                  } while(false);
                  break;
                case 40:
                  var n_10460007 = new_paren_10195797();
                  add_node_10425019(self_10435021);
                  push_10300031(self_10435021, n_10460007);
                  break;
                case 91:
                  var n_10460008 = new_blok_10195717();
                  add_node_10425019(self_10435021);
                  push_10300031(self_10435021, n_10460008);
                  break;
                case 123:
                  var n_10460009 = new_curly_10195877();
                  add_node_10425019(self_10435021);
                  push_10300031(self_10435021, n_10460009);
                  break;
                case 41:
                  add_node_10425019(self_10435021);
                  pop_10290024(self_10435021);
                  break;
                case 93:
                  add_node_10425019(self_10435021);
                  pop_10290024(self_10435021);
                  break;
                case 125:
                  add_node_10425019(self_10435021);
                  pop_10290024(self_10435021);
                  break;
                default: 
                  if ((ConstSet4[ch_10435024] != undefined)) {
                  add_node_10425019(self_10435021);
                  self_10435021.specialCharDetected = true;
                  if (self_10435021.token != null) { addChar(self_10435021.token, ch_10435024); } else { self_10435021.token = [ch_10435024]; };
                  }
                  else {
                  if (self_10435021.token != null) { addChar(self_10435021.token, ch_10435024); } else { self_10435021.token = [ch_10435024]; };
                  }
                  
                  break;
                }
                }
                else {
                if (self_10435021.token != null) { addChar(self_10435021.token, ch_10435024); } else { self_10435021.token = [ch_10435024]; };
                }
                
              }
              
            }
            
          }
          
        }
    } while(false);
    add_node_10425019(self_10435021);
    if (!((current_keyword_10270478(self_10435021) == null))) {
    close_keyword_10280024(self_10435021);
    }
    
    result_10435023 = (Tmp11 = HEX5BHEX5D_10475005(blok_10435043.nodes, 1), Tmp11)[0][Tmp11[1]];

  return result_10435023;

}
function len_9975386(t_9975391) {
  var result_9975392 = 0;

    result_9975392 = t_9975391.counter;

  return result_9975392;

}
function HEX5BHEX5D_10480019(self_10480021, key_10480022) {
  var result_10480023 = null;

    result_10480023 = self_10480021.nodes[chckIndx(key_10480022.value, 0, (self_10480021.nodes != null ? self_10480021.nodes.length : 0)+0-1)-0];

  return result_10480023;

}
function HEX5BHEX5D_10475252(self_10475254, key_10475255) {
  var result_10475256 = null;

  BeforeRet: do {
    var val_10475449 = get_or_default_9997159(self_10475254.bindings, key_10475255);
    if (!((val_10475449 == null))) {
    result_10475256 = val_10475449.val;
    break BeforeRet;
    }
    
  } while (false);

  return result_10475256;

}
function HEX5BHEX5DHEX3D_10480091(self_10480093, key_10480094, val_10480095) {
    self_10480093.nodes[chckIndx(key_10480094.value, 0, (self_10480093.nodes != null ? self_10480093.nodes.length : 0)+0-1)-0] = val_10480095;

  
}
function HEX5BHEX5DHEX3D_10480073(self_10480075, key_10480076, val_10480077) {
    make_binding_10021643(self_10480075, key_10480076, val_10480077);

  
}
function contains_10196342(self_10196344, n_10196345) {
  var result_10196346 = false;

    result_10196346 = has_key_10015289(self_10196344.bindings, n_10196345);

  return result_10196346;

}
function remove_first_10210428(self_10210430) {
    delete_10205356(self_10210430, "nodes", 0);

  
}
function remove_at_10210458(self_10210460, index_10210461) {
    delete_10205356(self_10210460, "nodes", chckRange(index_10210461, 0, 2147483647));

  
}
function is_empty_9797001(hcode_9797003) {
  var result_9797004 = false;

    result_9797004 = (hcode_9797003 == 0);

  return result_9797004;

}
function del_10020167(t_10020173, key_10020174) {
                    var Tmp6;
                    var Tmp7;
                    var Tmp8;
                      var Tmp9;
                      var Tmp10;

    var hc_10020175 = [0];
    var i_10020184 = raw_get_10000002(t_10020173, key_10020174, hc_10020175, 0);
    var mskHEX60gensym9800563_10020191 = (t_10020173.data != null ? (t_10020173.data.length-1) : -1);
    if ((0 <= i_10020184)) {
    t_10020173.counter = subInt(t_10020173.counter, 1);
    L1: do {
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            var jHEX60gensym9800565_10020199 = i_10020184;
            var rHEX60gensym9800566_10020200 = jHEX60gensym9800565_10020199;
            t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0].Field0 = 0;
            t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0].Field1 = null;
            t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0].Field2 = null;
            L4: do {
                L5: while (true) {
                if (!true) break L5;
                  i_10020184 = (addInt(i_10020184, 1) & mskHEX60gensym9800563_10020191);
                  if (is_empty_9797001(t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0].Field0)) {
                  break L1;
                  }
                  
                  rHEX60gensym9800566_10020200 = (t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0].Field0 & mskHEX60gensym9800563_10020191);
                    if (!(rHEX60gensym9800566_10020200 <= i_10020184)) Tmp8 = false; else {                      Tmp8 = (jHEX60gensym9800565_10020199 < rHEX60gensym9800566_10020200);                    }                    if (Tmp8) Tmp7 = true; else {                      if (!(jHEX60gensym9800565_10020199 < rHEX60gensym9800566_10020200)) Tmp9 = false; else {                        Tmp9 = (i_10020184 < jHEX60gensym9800565_10020199);                      }                      Tmp7 = Tmp9;                    }                    if (Tmp7) Tmp6 = true; else {                      if (!(i_10020184 < jHEX60gensym9800565_10020199)) Tmp10 = false; else {                        Tmp10 = (rHEX60gensym9800566_10020200 <= i_10020184);                      }                      Tmp6 = Tmp10;                    }                  if (!(Tmp6)) {
                  break L4;
                  }
                  
                }
            } while(false);
            nimCopy(t_10020173.data[chckIndx(jHEX60gensym9800565_10020199, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0], t_10020173.data[chckIndx(i_10020184, 0, (t_10020173.data != null ? t_10020173.data.length : 0)+0-1)-0], NTI9971219);
          }
      } while(false);
    } while(false);
    }
    

  
}
function remove_binding_10015175(self_10015177, key_10015178) {
    var Tmp1;

  var result_10015179 = null;

    if (has_key_10015289(self_10015177.bindings, key_10015178)) {
    result_10015179 = (Tmp1 = HEX5BHEX5D_10015463(self_10015177.bindings, key_10015178), Tmp1)[0][Tmp1[1]];
    del_10020167(self_10015177.bindings, key_10015178);
    }
    

  return result_10015179;

}
function HEX5BHEX5D_2005283(s_2005287, x_2005289) {
  var result_2005290 = null;

    var a_2005401 = x_2005289.a;
    var l_2005601 = addInt(subInt(x_2005289.b, a_2005401), 1);
    result_2005290 = nimCopy(null, mnewString(chckRange(l_2005601, 0, 2147483647)), NTI112);
    L1: do {
      var i_2005609 = 0;
      var i_12146290 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146290 < l_2005601)) break L3;
            i_2005609 = i_12146290;
            result_2005290[chckIndx(i_2005609, 0, (result_2005290 != null ? result_2005290.length : 0)+0-1)-0] = s_2005287[chckIndx(addInt(i_2005609, a_2005401), 0, (s_2005287 != null ? s_2005287.length : 0)+0-1)-0];
            i_12146290 = addInt(i_12146290, 1);
          }
      } while(false);
    } while(false);

  return result_2005290;

}
function HEX2EHEX2E_2005220(a_2005225, b_2005227) {
  var result_2005229 = {a: 0, b: 0};

    nimCopy(result_2005229, {a: a_2005225, b: b_2005227}, NTI1126907);

  return result_2005229;

}
function new_blok_10195684(nodes_10195687) {
  var result_10195688 = null;

    result_10195688 = {nodes: nimCopy(null, nodes_10195687, NTI10195686), m_type: NTI9971200, pos: 0, tags: null};

  return result_10195688;

}
function HEX5BHEX5D_10945078(s_10945084, x_10945086) {
  var result_10945088 = null;

    var a_10945201 = x_10945086.a;
    var l_10945401 = addInt(subInt(x_10945086.b, a_10945201), 1);
    result_10945088 = new Array(chckRange(l_10945401, 0, 2147483647)); for (var i=0;i<chckRange(l_10945401, 0, 2147483647);++i) {result_10945088[i]=null;}    L1: do {
      var i_10945416 = 0;
      var i_12146298 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146298 < l_10945401)) break L3;
            i_10945416 = i_12146298;
            result_10945088[chckIndx(i_10945416, 0, (result_10945088 != null ? result_10945088.length : 0)+0-1)-0] = s_10945084[chckIndx(addInt(i_10945416, a_10945201), 0, (s_10945084 != null ? s_10945084.length : 0)+0-1)-0];
            i_12146298 = addInt(i_12146298, 1);
          }
      } while(false);
    } while(false);

  return result_10945088;

}
function new_paren_10195749(nodes_10195752) {
  var result_10195753 = null;

    result_10195753 = {nodes: nimCopy(null, nodes_10195752, NTI10195751), m_type: NTI9971196, tags: null};

  return result_10195753;

}
function new_curly_10195829(nodes_10195832) {
  var result_10195833 = null;

    result_10195833 = {nodes: nimCopy(null, nodes_10195832, NTI10195831), m_type: NTI9971198, tags: null};

  return result_10195833;

}
function new_activation_10480499(body_10480501) {
  var result_10480502 = null;

    result_10480502 = {body: body_10480501, m_type: NTI10475127, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

  return result_10480502;

}
function peek_10520943(self_10520945) {
  var result_10520946 = null;

  BeforeRet: do {
    if (at_end_10520903(self_10520945)) {
    result_10520946 = null;
    break BeforeRet;
    }
    else {
      result_10520946 = HEX5BHEX5D_10480145(self_10520945, self_10520945.pos);
      break BeforeRet;
    }
    
  } while (false);

  return result_10520946;

}
function eval_10630590(current_10630592, spry_10630593) {
      var Tmp1;

  var result_10630594 = null;

  BeforeRet: do {
    current_10630592.parent = spry_10630593.currentActivation;
      if (!(current_10630592.self == null)) Tmp1 = false; else {        Tmp1 = !((current_10630592.parent == null));      }    if (Tmp1) {
    current_10630592.self = current_10630592.parent.self;
    }
    
    spry_10630593.currentActivation = current_10630592;
    L2: do {
        L3: while (true) {
        if (!(current_10630592.pos < len_10480163(current_10630592))) break L3;
          var next_10640006 = next_10520920(current_10630592);
          if ((current_10630592.pos == len_10480163(current_10630592))) {
          current_10630592.last = eval_10475157(next_10640006, spry_10630593);
          if (current_10630592.returned) {
          do_return_10525019(spry_10630593.currentActivation, spry_10630593);
          result_10630594 = current_10630592.last;
          break BeforeRet;
          }
          
          }
          else {
            var peek_10640007 = peek_10520943(current_10630592);
            if (is_method_10630076(peek_10640007, spry_10630593)) {
            current_10630592.last = next_10640006;
            next_10640006 = next_10520920(current_10630592);
            }
            
            current_10630592.last = eval_10475157(next_10640006, spry_10630593);
            if (current_10630592.returned) {
            do_return_10525019(spry_10630593.currentActivation, spry_10630593);
            result_10630594 = current_10630592.last;
            break BeforeRet;
            }
            
          }
          
        }
    } while(false);
    if (isObj(current_10630592.last.m_type, NTI9971228)) {
    current_10630592.last = current_10630592.last.val;
    }
    
    spry_10630593.lastSelf = spry_10630593.currentActivation.self;
    spry_10630593.currentActivation = spry_10630593.currentActivation.parent;
    result_10630594 = current_10630592.last;
    break BeforeRet;
  } while (false);

  return result_10630594;

}
function reset_10485024(self_10485026) {
    self_10485026.returned = false;
    self_10485026.pos = 0;

  
}
function new_funk_10480294(body_10480296, parent_10480297) {
  var result_10480298 = null;

    result_10480298 = {nodes: nimCopy(null, body_10480296.nodes, NTI9971193), parent: parent_10480297, m_type: NTI10475114, pos: 0, tags: null};

  return result_10480298;

}
function funk_10475141(spry_10475143, body_10475144) {
  var result_10630026 = null;

    result_10630026 = new_funk_10480294(body_10475144, spry_10475143.currentActivation);

  return result_10630026;

}
function new_meth_10480357(body_10480359, parent_10480360) {
  var result_10480361 = null;

    result_10480361 = {nodes: nimCopy(null, body_10480359.nodes, NTI9971193), parent: parent_10480360, m_type: NTI10475117, pos: 0, tags: null};

  return result_10480361;

}
function meth_10475145(spry_10475147, body_10475148) {
  var result_10630044 = null;

    result_10630044 = new_meth_10480357(body_10475148, spry_10475147.currentActivation);

  return result_10630044;

}
function reify_10625223(word_10625225) {
  var result_10625226 = null;

    result_10625226 = new_word_10305026(null, word_10625225.word);

  return result_10625226;

}
function to_by_do_10686041(frm_10686043, to_10686044, by_10686045, fn_10686046, self_10686047, spry_10686048) {
  var result_10686049 = null;

  BeforeRet: do {
    var current_10686050 = spry_10686048.currentActivation;
    var orig_10686051 = current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0];
    var oldpos_10686052 = current_10686050.pos;
    current_10686050.pos = 0;
    var activation_10686053 = new_activation_10480499(fn_10686046);
    if ((by_10686045 < 0)) {
    L1: do {
      var i_10686060 = 0;
      var colontmp__12146318 = 0;
      colontmp__12146318 = chckRange(absInt(by_10686045), 1, 2147483647);
      var res_12146323 = frm_10686043;
      L2: do {
          L3: while (true) {
          if (!(to_10686044 <= res_12146323)) break L3;
            i_10686060 = res_12146323;
            current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0] = new_value_10195909(i_10686060);
            result_10686049 = eval_10630590(activation_10686053, spry_10686048);
            reset_10485024(activation_10686053);
            current_10686050.pos = 0;
            if (current_10686050.returned) {
            current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0] = orig_10686051;
            current_10686050.pos = oldpos_10686052;
            break BeforeRet;
            }
            
            res_12146323 = subInt(res_12146323, colontmp__12146318);
          }
      } while(false);
    } while(false);
    }
    else {
      L4: do {
        var i_10686067 = 0;
        var colontmp__12146329 = 0;
        colontmp__12146329 = chckRange(by_10686045, 1, 2147483647);
        var res_12146330 = frm_10686043;
        L5: do {
            L6: while (true) {
            if (!(res_12146330 <= to_10686044)) break L6;
              i_10686067 = res_12146330;
              current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0] = new_value_10195909(i_10686067);
              result_10686049 = eval_10630590(activation_10686053, spry_10686048);
              reset_10485024(activation_10686053);
              current_10686050.pos = 0;
              if (current_10686050.returned) {
              current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0] = orig_10686051;
              current_10686050.pos = oldpos_10686052;
              break BeforeRet;
              }
              
              res_12146330 = addInt(res_12146330, colontmp__12146329);
            }
        } while(false);
      } while(false);
    }
    
    current_10686050.body.nodes[chckIndx(0, 0, (current_10686050.body.nodes != null ? current_10686050.body.nodes.length : 0)+0-1)-0] = orig_10686051;
    current_10686050.pos = oldpos_10686052;
    result_10686049 = self_10686047;
    break BeforeRet;
  } while (false);

  return result_10686049;

}
function add_core_10686081(spry_10686083) {
    function HEX3Aanonymous_10690001(spry_10690003) {
      var result_10690004 = null;

        result_10690004 = spry_10690003.root;

      return result_10690004;

    }
    function HEX3Aanonymous_10695001(spry_10695003) {
      var result_10695004 = null;

        result_10695004 = spry_10695003.currentActivation;

      return result_10695004;

    }
    function HEX3Aanonymous_10700001(spry_10700003) {
                      var Tmp6;
                var Tmp7;

      var result_10700004 = null;

      BeforeRet: do {
        L1: do {
          var activation_10700005 = null;
          var activation_12146100 = spry_10700003.currentActivation;
          L2: do {
              L3: while (true) {
              if (!!((activation_12146100 == null))) break L3;
                L4: do {
                    L5: while (true) {
                    if (!!(!(isObj(activation_12146100.m_type, NTI10475132)))) break L5;
                      if (isObj(activation_12146100.m_type, NTI10475130)) {
                      Tmp6 = activation_12146100.body.parent;
                      }
                      else {
                      Tmp6 = activation_12146100.parent;
                      }
                      
                      activation_12146100 = Tmp6;
                    }
                } while(false);
                activation_10700005 = activation_12146100;
                if ((activation_10700005.locals == null)) {
                activation_10700005.locals = new_map_10105045();
                }
                
                result_10700004 = activation_10700005.locals;
                break BeforeRet;
                if (isObj(activation_12146100.m_type, NTI10475130)) {
                Tmp7 = activation_12146100.body.parent;
                }
                else {
                Tmp7 = activation_12146100.parent;
                }
                
                activation_12146100 = Tmp7;
              }
          } while(false);
        } while(false);
      } while (false);

      return result_10700004;

    }
    function HEX3Aanonymous_10710001(spry_10710003) {
      var result_10710004 = null;

        var act_10710005 = arg_parent_10570019(spry_10710003);
        if (!((act_10710005 == null))) {
        result_10710004 = act_10710005.last;
        if ((result_10710004 == null)) {
        spry_10710003.currentActivation.self = spry_10710003.nilVal;
        result_10710004 = spry_10710003.nilVal;
        }
        
        }
        

      return result_10710004;

    }
    function HEX3Aanonymous_10720001(spry_10720003) {
      var result_10720004 = null;

        result_10720004 = self_10625126(spry_10720003);

      return result_10720004;

    }
    function HEX3Aanonymous_10725001(spry_10725003) {
      var result_10725004 = null;

        result_10725004 = spry_10725003.lastSelf;
        if ((result_10725004 == null)) {
        result_10725004 = spry_10725003.nilVal;
        }
        

      return result_10725004;

    }
    function HEX3Aanonymous_10730001(spry_10730003) {
      var result_10730004 = null;

        result_10730004 = eval_arg_infix_10625109(spry_10730003);
        var tag_10730005 = eval_arg_10625170(spry_10730003);
        if ((result_10730004.tags == null)) {
        result_10730004.tags = new_blok_10195717();
        }
        
        if (isObj(tag_10730005.m_type, NTI9971142)) {
        add_10196176(result_10730004.tags, tag_10730005);
        }
        else {
        add_10196176(result_10730004.tags, litify_10660041(spry_10730003, tag_10730005));
        }
        

      return result_10730004;

    }
    function HEX3Aanonymous_10735001(spry_10735003) {
      var result_10735004 = null;

      BeforeRet: do {
        var node_10735005 = eval_arg_infix_10625109(spry_10735003);
        var tag_10735006 = eval_arg_10625170(spry_10735003);
        if ((node_10735005.tags == null)) {
        result_10735004 = spry_10735003.falseVal;
        break BeforeRet;
        }
        
        if (isObj(tag_10735006.m_type, NTI9971142)) {
        result_10735004 = bool_val_10625205(contains_10196271(node_10735005.tags, tag_10735006), spry_10735003);
        break BeforeRet;
        }
        else {
          result_10735004 = bool_val_10625205(contains_10196271(node_10735005.tags, litify_10660041(spry_10735003, tag_10735006)), spry_10735003);
          break BeforeRet;
        }
        
      } while (false);

      return result_10735004;

    }
    function HEX3Aanonymous_10740001(spry_10740003) {
      var result_10740004 = null;

      BeforeRet: do {
        var node_10740005 = eval_arg_infix_10625109(spry_10740003);
        if ((node_10740005.tags == null)) {
        result_10740004 = spry_10740003.emptyBlok;
        break BeforeRet;
        }
        
        result_10740004 = node_10740005.tags;
        break BeforeRet;
      } while (false);

      return result_10740004;

    }
    function HEX3Aanonymous_10745001(spry_10745003) {
      var result_10745004 = null;

        result_10745004 = eval_arg_infix_10625109(spry_10745003);
        result_10745004.tags = eval_arg_10625170(spry_10745003);

      return result_10745004;

    }
    function HEX3Aanonymous_10750001(spry_10750003) {
      var result_10750004 = null;

        result_10750004 = eval_arg_10625170(spry_10750003);
        bind_and_assign_10625057(spry_10750003, arg_infix_10625075(spry_10750003), result_10750004);

      return result_10750004;

    }
    function HEX3Aanonymous_10755001(spry_10755003) {
      var result_10755004 = null;

        result_10755004 = eval_arg_10625170(spry_10755003);
        assign_10625039(spry_10755003, arg_infix_10625075(spry_10755003), result_10755004);

      return result_10755004;

    }
    function HEX3Aanonymous_10760001(spry_10760003) {
      var result_10760004 = null;

        result_10760004 = eval_arg_10625170(spry_10760003);
        bind_and_assign_10625057(spry_10760003, eval_arg_infix_10625109(spry_10760003), result_10760004);

      return result_10760004;

    }
    function HEX3Aanonymous_10765001(spry_10765003) {
      var result_10765004 = null;

      BeforeRet: do {
        var binding_10765005 = lookup_10540019(spry_10765003, arg_infix_10625075(spry_10765003));
        if ((binding_10765005 == null)) {
        result_10765004 = spry_10765003.falseVal;
        break BeforeRet;
        }
        
        result_10765004 = spry_10765003.trueVal;
        break BeforeRet;
      } while (false);

      return result_10765004;

    }
    function HEX3Aanonymous_10770001(spry_10770003) {
      var result_10770004 = null;

        result_10770004 = new_value_10196037(isObj(eval_arg_infix_10625109(spry_10770003).m_type, NTI9971188));

      return result_10770004;

    }
    function HEX3Aanonymous_10775001(spry_10775003) {
      var result_10775004 = null;

        result_10775004 = HEX2B_10520040(eval_arg_infix_10625109(spry_10775003), eval_arg_10625170(spry_10775003));

      return result_10775004;

    }
    function HEX3Aanonymous_10780001(spry_10780003) {
      var result_10780004 = null;

        result_10780004 = HEX2D_10520133(eval_arg_infix_10625109(spry_10780003), eval_arg_10625170(spry_10780003));

      return result_10780004;

    }
    function HEX3Aanonymous_10785001(spry_10785003) {
      var result_10785004 = null;

        result_10785004 = HEX2A_10520226(eval_arg_infix_10625109(spry_10785003), eval_arg_10625170(spry_10785003));

      return result_10785004;

    }
    function HEX3Aanonymous_10790001(spry_10790003) {
      var result_10790004 = null;

        result_10790004 = HEX2F_10520319(eval_arg_infix_10625109(spry_10790003), eval_arg_10625170(spry_10790003));

      return result_10790004;

    }
    function HEX3Aanonymous_10795001(spry_10795003) {
      var result_10795004 = null;

        result_10795004 = HEX3C_10520412(eval_arg_infix_10625109(spry_10795003), eval_arg_10625170(spry_10795003));

      return result_10795004;

    }
    function HEX3Aanonymous_10800001(spry_10800003) {
      var result_10800004 = null;

        result_10800004 = HEX3C_10520412(eval_arg_10625170(spry_10800003), eval_arg_infix_10625109(spry_10800003));

      return result_10800004;

    }
    function HEX3Aanonymous_10810001(spry_10810003) {
      var result_10810004 = null;

        result_10810004 = HEX3CHEX3D_10520523(eval_arg_infix_10625109(spry_10810003), eval_arg_10625170(spry_10810003));

      return result_10810004;

    }
    function HEX3Aanonymous_10815001(spry_10815003) {
      var result_10815004 = null;

        result_10815004 = HEX3CHEX3D_10520523(eval_arg_10625170(spry_10815003), eval_arg_infix_10625109(spry_10815003));

      return result_10815004;

    }
    function HEX3Aanonymous_10825001(spry_10825003) {
      var result_10825004 = null;

        result_10825004 = eq_10520634(eval_arg_infix_10625109(spry_10825003), eval_arg_10625170(spry_10825003));

      return result_10825004;

    }
    function HEX3Aanonymous_10830001(spry_10830003) {
      var result_10830004 = null;

        result_10830004 = new_value_10196037((eval_arg_infix_10625109(spry_10830003) == eval_arg_10625170(spry_10830003)));

      return result_10830004;

    }
    function HEX3Aanonymous_10835001(spry_10835003) {
      var result_10835004 = null;

        result_10835004 = new_value_10196037(!(value_9995455(eq_10520634(eval_arg_infix_10625109(spry_10835003), eval_arg_10625170(spry_10835003)))));

      return result_10835004;

    }
    function HEX3Aanonymous_10840001(spry_10840003) {
      var result_10840004 = null;

        result_10840004 = new_value_10196037(!((eval_arg_infix_10625109(spry_10840003) == eval_arg_10625170(spry_10840003))));

      return result_10840004;

    }
    function HEX3Aanonymous_10845001(spry_10845003) {
      var result_10845004 = null;

        result_10845004 = new_value_10196037(!(value_9995455(eval_arg_infix_10625109(spry_10845003))));

      return result_10845004;

    }
    function HEX3Aanonymous_10850001(spry_10850003) {
        var Tmp1;

      var result_10850004 = null;

        var arg1_10850005 = value_9995455(eval_arg_infix_10625109(spry_10850003));
        var arg2_10850006 = arg_10625092(spry_10850003);
        if (!arg1_10850005) Tmp1 = false; else {          Tmp1 = value_9995455(eval_10475157(arg2_10850006, spry_10850003));        }        result_10850004 = new_value_10196037(Tmp1);

      return result_10850004;

    }
    function HEX3Aanonymous_10855001(spry_10855003) {
        var Tmp1;

      var result_10855004 = null;

        var arg1_10855005 = value_9995455(eval_arg_infix_10625109(spry_10855003));
        var arg2_10855006 = arg_10625092(spry_10855003);
        if (arg1_10855005) Tmp1 = true; else {          Tmp1 = value_9995455(eval_10475157(arg2_10855006, spry_10855003));        }        result_10855004 = new_value_10196037(Tmp1);

      return result_10855004;

    }
    function HEX3Aanonymous_10860001(spry_10860003) {
      var result_10860004 = null;

      BeforeRet: do {
        var val_10860005 = eval_arg_infix_10625109(spry_10860003);
        if (isObj(val_10860005.m_type, NTI9971176)) {
        result_10860004 = HEX26_10520855(val_10860005, eval_arg_10625170(spry_10860003));
        break BeforeRet;
        }
        else {
        if (isObj(val_10860005.m_type, NTI9971200)) {
        result_10860004 = concat_10196511(val_10860005, eval_arg_10625170(spry_10860003).nodes);
        break BeforeRet;
        }
        else {
        if (isObj(val_10860005.m_type, NTI9971196)) {
        result_10860004 = concat_10196511(val_10860005, eval_arg_10625170(spry_10860003).nodes);
        break BeforeRet;
        }
        else {
        if (isObj(val_10860005.m_type, NTI9971198)) {
        result_10860004 = concat_10196511(val_10860005, eval_arg_10625170(spry_10860003).nodes);
        break BeforeRet;
        }
        }}}
      } while (false);

      return result_10860004;

    }
    function HEX3Aanonymous_10865001(spry_10865003) {
      var result_10865004 = null;

        result_10865004 = new_value_10195973(print_9996883(eval_arg_infix_10625109(spry_10865003)));

      return result_10865004;

    }
    function HEX3Aanonymous_10870001(spry_10870003) {
      var result_10870004 = null;

      BeforeRet: do {
        var val_10870005 = eval_arg_infix_10625109(spry_10870003);
        if (isObj(val_10870005.m_type, NTI9971173)) {
        result_10870004 = val_10870005;
        break BeforeRet;
        }
        else {
        if (isObj(val_10870005.m_type, NTI9971170)) {
        result_10870004 = new_value_10195941(to_float_26459(val_10870005.value));
        break BeforeRet;
        }
        else {
        raise_runtime_exception_9971245(makeNimstrLit("Can not convert to float"));
        }
        }
      } while (false);

      return result_10870004;

    }
    function HEX3Aanonymous_10875001(spry_10875003) {
      var result_10875004 = null;

      BeforeRet: do {
        var val_10875005 = eval_arg_infix_10625109(spry_10875003);
        if (isObj(val_10875005.m_type, NTI9971170)) {
        result_10875004 = val_10875005;
        break BeforeRet;
        }
        else {
        if (isObj(val_10875005.m_type, NTI9971173)) {
        result_10875004 = new_value_10195909(to_int_26493(val_10875005.value));
        break BeforeRet;
        }
        else {
        raise_runtime_exception_9971245(makeNimstrLit("Can not convert to int"));
        }
        }
      } while (false);

      return result_10875004;

    }
    function HEX3Aanonymous_10880001(spry_10880003) {
      var result_10880004 = null;

        result_10880004 = new_value_10195973(HEX24_9975218(eval_arg_10625170(spry_10880003)));

      return result_10880004;

    }
    function HEX3Aanonymous_10885001(spry_10885003) {
      var result_10885004 = null;

        result_10885004 = parse_10435019(spry_10885003.parser, eval_arg_10625170(spry_10885003).value);

      return result_10885004;

    }
    function HEX3Aanonymous_10890001(spry_10890003) {
        var Tmp1;

      var result_10890004 = null;

      BeforeRet: do {
        var comp_10890005 = eval_arg_infix_10625109(spry_10890003);
        if (isObj(comp_10890005.m_type, NTI9971176)) {
        result_10890004 = new_value_10195909((comp_10890005.value != null ? comp_10890005.value.length : 0));
        }
        else {
        if (isObj(comp_10890005.m_type, NTI9971192)) {
        result_10890004 = new_value_10195909(((Tmp1 = eval_arg_infix_10625109(spry_10890003).nodes, Tmp1) != null ? Tmp1.length : 0));
        break BeforeRet;
        }
        else {
        if (isObj(comp_10890005.m_type, NTI9971203)) {
        result_10890004 = new_value_10195909(len_9975386(eval_arg_infix_10625109(spry_10890003).bindings));
        break BeforeRet;
        }
        }}
      } while (false);

      return result_10890004;

    }
    function HEX3Aanonymous_10895001(spry_10895003) {
        var Tmp1;

      var result_10895004 = null;

      BeforeRet: do {
        var comp_10895005 = eval_arg_infix_10625109(spry_10895003);
        if (isObj(comp_10895005.m_type, NTI9971176)) {
        result_10895004 = new_value_10196037(((comp_10895005.value != null ? comp_10895005.value.length : 0) == 0));
        }
        else {
        if (isObj(comp_10895005.m_type, NTI9971192)) {
        result_10895004 = new_value_10196037((((Tmp1 = eval_arg_infix_10625109(spry_10895003).nodes, Tmp1) != null ? Tmp1.length : 0) == 0));
        break BeforeRet;
        }
        else {
        if (isObj(comp_10895005.m_type, NTI9971203)) {
        result_10895004 = new_value_10196037((len_9975386(eval_arg_infix_10625109(spry_10895003).bindings) == 0));
        break BeforeRet;
        }
        }}
      } while (false);

      return result_10895004;

    }
    function HEX3Aanonymous_10900001(spry_10900003) {
      var result_10900004 = null;

      BeforeRet: do {
        var comp_10900005 = eval_arg_infix_10625109(spry_10900003);
        if (isObj(comp_10900005.m_type, NTI9971192)) {
        result_10900004 = HEX5BHEX5D_10480019(comp_10900005, eval_arg_10625170(spry_10900003));
        break BeforeRet;
        }
        else {
        if (isObj(comp_10900005.m_type, NTI9971203)) {
        var hit_10900022 = HEX5BHEX5D_10475252(comp_10900005, eval_arg_10625170(spry_10900003));
        if ((hit_10900022 == null)) {
        result_10900004 = spry_10900003.nilVal;
        break BeforeRet;
        }
        else {
          result_10900004 = hit_10900022;
          break BeforeRet;
        }
        
        }
        }
      } while (false);

      return result_10900004;

    }
    function HEX3Aanonymous_10905001(spry_10905003) {
      var result_10905004 = null;

      BeforeRet: do {
        var comp_10905005 = eval_arg_infix_10625109(spry_10905003);
        var key_10905006 = eval_arg_10625170(spry_10905003);
        var val_10905007 = eval_arg_10625170(spry_10905003);
        if (isObj(comp_10905005.m_type, NTI9971192)) {
        HEX5BHEX5DHEX3D_10480091(comp_10905005, key_10905006, val_10905007);
        }
        else {
        if (isObj(comp_10905005.m_type, NTI9971203)) {
        HEX5BHEX5DHEX3D_10480073(comp_10905005, key_10905006, val_10905007);
        }
        }
        result_10905004 = comp_10905005;
        break BeforeRet;
      } while (false);

      return result_10905004;

    }
    function HEX3Aanonymous_10910001(spry_10910003) {
        var Tmp1;

      var result_10910004 = null;

        var comp_10910005 = eval_arg_infix_10625109(spry_10910003);
        var word_10910006 = arg_10625092(spry_10910003);
        var hit_10910007 = HEX5BHEX5D_10475252(comp_10910005, word_10910006);
        if ((hit_10910007 == null)) {
        Tmp1 = spry_10910003.nilVal;
        }
        else {
        Tmp1 = hit_10910007;
        }
        
        result_10910004 = Tmp1;

      return result_10910004;

    }
    function HEX3Aanonymous_10915001(spry_10915003) {
      var result_10915004 = null;

      BeforeRet: do {
        var comp_10915005 = eval_arg_infix_10625109(spry_10915003);
        var word_10915006 = arg_10625092(spry_10915003);
        var val_10915007 = eval_arg_10625170(spry_10915003);
        HEX5BHEX5DHEX3D_10480073(comp_10915005, word_10915006, val_10915007);
        result_10915004 = comp_10915005;
        break BeforeRet;
      } while (false);

      return result_10915004;

    }
    function HEX3Aanonymous_10920001(spry_10920003) {
      var result_10920004 = null;

      BeforeRet: do {
        var comp_10920005 = eval_arg_infix_10625109(spry_10920003);
        var key_10920006 = eval_arg_10625170(spry_10920003);
        if (isObj(comp_10920005.m_type, NTI9971192)) {
        result_10920004 = new_value_10196037(contains_10196271(comp_10920005, key_10920006));
        break BeforeRet;
        }
        else {
        if (isObj(comp_10920005.m_type, NTI9971203)) {
        result_10920004 = new_value_10196037(contains_10196342(comp_10920005, key_10920006));
        break BeforeRet;
        }
        }
        result_10920004 = comp_10920005;
        break BeforeRet;
      } while (false);

      return result_10920004;

    }
    function HEX3Aanonymous_10925001(spry_10925003) {
      var result_10925004 = null;

        result_10925004 = eval_arg_infix_10625109(spry_10925003);
        var comp_10925005 = result_10925004;
        add_10196176(comp_10925005, eval_arg_10625170(spry_10925003));

      return result_10925004;

    }
    function HEX3Aanonymous_10930001(spry_10930003) {
      var result_10930004 = null;

        result_10930004 = eval_arg_infix_10625109(spry_10930003);
        var comp_10930005 = result_10930004;
        remove_last_10205347(comp_10930005);

      return result_10930004;

    }
    function HEX3Aanonymous_10935001(spry_10935003) {
      var result_10935004 = null;

        result_10935004 = eval_arg_infix_10625109(spry_10935003);
        var comp_10935005 = result_10935004;
        remove_first_10210428(comp_10935005);

      return result_10935004;

    }
    function HEX3Aanonymous_10940001(spry_10940003) {
      var result_10940004 = null;

      BeforeRet: do {
        var comp_10940005 = eval_arg_infix_10625109(spry_10940003);
        var key_10940006 = eval_arg_10625170(spry_10940003);
        if (isObj(comp_10940005.m_type, NTI9971192)) {
        var index_10940015 = key_10940006.value;
        remove_at_10210458(comp_10940005, index_10940015);
        }
        else {
        if (isObj(comp_10940005.m_type, NTI9971203)) {
        remove_binding_10015175(comp_10940005, key_10940006);
        }
        }
        result_10940004 = comp_10940005;
        break BeforeRet;
      } while (false);

      return result_10940004;

    }
    function HEX3Aanonymous_10945001(spry_10945003) {
      var result_10945004 = null;

        var comp_10945005 = eval_arg_infix_10625109(spry_10945003);
        var frm_10945006 = eval_arg_10625170(spry_10945003).value;
        var to_10945007 = eval_arg_10625170(spry_10945003).value;
        if (isObj(comp_10945005.m_type, NTI9971176)) {
        result_10945004 = new_value_10195973(HEX5BHEX5D_2005283(comp_10945005.value, HEX2EHEX2E_2005220(frm_10945006, to_10945007)));
        }
        else {
        if (isObj(comp_10945005.m_type, NTI9971200)) {
        result_10945004 = new_blok_10195684(HEX5BHEX5D_10945078(comp_10945005.nodes, HEX2EHEX2E_2005220(frm_10945006, to_10945007)));
        }
        else {
        if (isObj(comp_10945005.m_type, NTI9971196)) {
        result_10945004 = new_paren_10195749(HEX5BHEX5D_10945078(comp_10945005.nodes, HEX2EHEX2E_2005220(frm_10945006, to_10945007)));
        }
        else {
        if (isObj(comp_10945005.m_type, NTI9971198)) {
        result_10945004 = new_curly_10195829(HEX5BHEX5D_10945078(comp_10945005.nodes, HEX2EHEX2E_2005220(frm_10945006, to_10945007)));
        }
        }}}
        if (!((comp_10945005.tags == null))) {
        result_10945004.tags = comp_10945005.tags;
        }
        

      return result_10945004;

    }
    function HEX3Aanonymous_10955001(spry_10955003) {
      var result_10955004 = null;

      BeforeRet: do {
        var blk1_10955005 = eval_arg_infix_10625109(spry_10955003);
        var blk2_10955006 = eval_arg_10625170(spry_10955003);
        var current_10955007 = spry_10955003.currentActivation;
        var orig_10955008 = current_10955007.body.nodes[chckIndx(0, 0, (current_10955007.body.nodes != null ? current_10955007.body.nodes.length : 0)+0-1)-0];
        var oldpos_10955009 = current_10955007.pos;
        current_10955007.pos = 0;
        var activation_10955010 = new_activation_10480499(blk2_10955006);
        L1: do {
          var each_10955017 = null;
          var i_12146303 = 0;
          var l_12146304 = (blk1_10955005.nodes != null ? blk1_10955005.nodes.length : 0);
          L2: do {
              L3: while (true) {
              if (!(i_12146303 < l_12146304)) break L3;
                each_10955017 = blk1_10955005.nodes[chckIndx(i_12146303, 0, (blk1_10955005.nodes != null ? blk1_10955005.nodes.length : 0)+0-1)-0];
                current_10955007.body.nodes[chckIndx(0, 0, (current_10955007.body.nodes != null ? current_10955007.body.nodes.length : 0)+0-1)-0] = each_10955017;
                result_10955004 = eval_10630590(activation_10955010, spry_10955003);
                reset_10485024(activation_10955010);
                if (current_10955007.returned) {
                current_10955007.body.nodes[chckIndx(0, 0, (current_10955007.body.nodes != null ? current_10955007.body.nodes.length : 0)+0-1)-0] = orig_10955008;
                current_10955007.pos = oldpos_10955009;
                break BeforeRet;
                }
                
                current_10955007.pos = 0;
                i_12146303 = addInt(i_12146303, 1);
                if (!(((blk1_10955005.nodes != null ? blk1_10955005.nodes.length : 0) == l_12146304))) {
                failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        current_10955007.body.nodes[chckIndx(0, 0, (current_10955007.body.nodes != null ? current_10955007.body.nodes.length : 0)+0-1)-0] = orig_10955008;
        current_10955007.pos = oldpos_10955009;
        result_10955004 = blk1_10955005;
        break BeforeRet;
      } while (false);

      return result_10955004;

    }
    function HEX3Aanonymous_10960001(spry_10960003) {
      var result_10960004 = null;

        exit(eval_arg_10625170(spry_10960003).value);

      return result_10960004;

    }
    function HEX3Aanonymous_10965001(spry_10965003) {
      var result_10965004 = null;

        result_10965004 = funk_10475141(spry_10965003, eval_arg_10625170(spry_10965003));

      return result_10965004;

    }
    function HEX3Aanonymous_10970001(spry_10970003) {
      var result_10970004 = null;

        result_10970004 = meth_10475145(spry_10970003, eval_arg_10625170(spry_10970003));

      return result_10970004;

    }
    function HEX3Aanonymous_10975001(spry_10975003) {
      var result_10975004 = null;

        result_10975004 = eval_do_10475163(eval_arg_10625170(spry_10975003), spry_10975003);

      return result_10975004;

    }
    function HEX3Aanonymous_10980001(spry_10980003) {
      var result_10980004 = null;

        result_10980004 = arg_10625092(spry_10980003);

      return result_10980004;

    }
    function HEX3Aanonymous_10985001(spry_10985003) {
      var result_10985004 = null;

        result_10985004 = eval_arg_10625170(spry_10985003);

      return result_10985004;

    }
    function HEX3Aanonymous_10990001(spry_10990003) {
      var result_10990004 = null;

        result_10990004 = eval_10475157(eval_arg_10625170(spry_10990003), spry_10990003);

      return result_10990004;

    }
    function HEX3Aanonymous_10995001(spry_10995003) {
      var result_10995004 = null;

        result_10995004 = reify_10625223(eval_arg_10625170(spry_10995003));

      return result_10995004;

    }
    function HEX3Aanonymous_11000001(spry_11000003) {
      var result_11000004 = null;

        result_11000004 = litify_10660041(spry_11000003, eval_arg_10625170(spry_11000003));

      return result_11000004;

    }
    function HEX3Aanonymous_11005001(spry_11005003) {
      var result_11005004 = null;

        result_11005004 = new_or_get_lit_word_10125737(spry_11005003.parser, HEX24_9975218(arg_10625092(spry_11005003)));

      return result_11005004;

    }
    function HEX3Aanonymous_11015001(spry_11015003) {
      var result_11015004 = null;

        result_11015004 = new_or_get_lit_word_10125737(spry_11015003.parser, eval_arg_10625170(spry_11015003).value);

      return result_11015004;

    }
    function HEX3Aanonymous_11025001(spry_11025003) {
      var result_11025004 = null;

        result_11025004 = new_word_10305026(null, eval_arg_10625170(spry_11025003).value);

      return result_11025004;

    }
    function HEX3Aanonymous_11035001(spry_11035003) {
      var result_11035004 = null;

        result_11035004 = clone_10210500(eval_arg_10625170(spry_11035003));

      return result_11035004;

    }
    function HEX3Aanonymous_11040001(spry_11040003) {
      var result_11040004 = null;

        result_11040004 = eval_arg_10625170(spry_11040003);
        spry_11040003.currentActivation.returned = true;

      return result_11040004;

    }
    function HEX3Aanonymous_11045001(spry_11045003) {
      var result_11045004 = null;

      BeforeRet: do {
        if (value_9995455(eval_arg_infix_10625109(spry_11045003))) {
        result_11045004 = eval_do_10475163(eval_arg_10625170(spry_11045003), spry_11045003);
        break BeforeRet;
        }
        else {
          arg_10625092(spry_11045003);
          result_11045004 = spry_11045003.nilVal;
          break BeforeRet;
        }
        
      } while (false);

      return result_11045004;

    }
    function HEX3Aanonymous_11050001(spry_11050003) {
      var result_11050004 = null;

      BeforeRet: do {
        if (value_9995455(eval_arg_infix_10625109(spry_11050003))) {
        arg_10625092(spry_11050003);
        result_11050004 = spry_11050003.nilVal;
        break BeforeRet;
        }
        else {
          result_11050004 = eval_do_10475163(eval_arg_10625170(spry_11050003), spry_11050003);
          break BeforeRet;
        }
        
      } while (false);

      return result_11050004;

    }
    function HEX3Aanonymous_11055001(spry_11055003) {
      var result_11055004 = null;

      BeforeRet: do {
        if (value_9995455(eval_arg_infix_10625109(spry_11055003))) {
        var res_11055005 = eval_do_10475163(eval_arg_10625170(spry_11055003), spry_11055003);
        arg_10625092(spry_11055003);
        result_11055004 = res_11055005;
        break BeforeRet;
        }
        else {
          arg_10625092(spry_11055003);
          result_11055004 = eval_do_10475163(eval_arg_10625170(spry_11055003), spry_11055003);
          break BeforeRet;
        }
        
      } while (false);

      return result_11055004;

    }
    function HEX3Aanonymous_11060001(spry_11060003) {
      var result_11060004 = null;

      BeforeRet: do {
        if (value_9995455(eval_arg_infix_10625109(spry_11060003))) {
        arg_10625092(spry_11060003);
        result_11060004 = eval_do_10475163(eval_arg_10625170(spry_11060003), spry_11060003);
        break BeforeRet;
        }
        else {
          var res_11060005 = eval_do_10475163(eval_arg_10625170(spry_11060003), spry_11060003);
          arg_10625092(spry_11060003);
          result_11060004 = res_11060005;
          break BeforeRet;
        }
        
      } while (false);

      return result_11060004;

    }
    function HEX3Aanonymous_11065001(spry_11065003) {
      var result_11065004 = null;

      BeforeRet: do {
        var times_11065005 = eval_arg_infix_10625109(spry_11065003).value;
        var fn_11065006 = eval_arg_10625170(spry_11065003);
        L1: do {
          var i_11065015 = 0;
          var res_12146312 = 1;
          L2: do {
              L3: while (true) {
              if (!(res_12146312 <= times_11065005)) break L3;
                i_11065015 = res_12146312;
                result_11065004 = eval_do_10475163(fn_11065006, spry_11065003);
                if (spry_11065003.currentActivation.returned) {
                break BeforeRet;
                }
                
                res_12146312 = addInt(res_12146312, 1);
              }
          } while(false);
        } while(false);
      } while (false);

      return result_11065004;

    }
    function HEX3Aanonymous_11070001(spry_11070003) {
      var result_11070004 = null;

      BeforeRet: do {
        var self_11070005 = eval_arg_infix_10625109(spry_11070003);
        var frm_11070006 = self_11070005.value;
        var to_11070007 = eval_arg_10625170(spry_11070003).value;
        var fn_11070008 = eval_arg_10625170(spry_11070003);
        result_11070004 = to_by_do_10686041(frm_11070006, to_11070007, 1, fn_11070008, self_11070005, spry_11070003);
        break BeforeRet;
      } while (false);

      return result_11070004;

    }
    function HEX3Aanonymous_11075001(spry_11075003) {
      var result_11075004 = null;

      BeforeRet: do {
        var self_11075005 = eval_arg_infix_10625109(spry_11075003);
        var frm_11075006 = self_11075005.value;
        var to_11075007 = eval_arg_10625170(spry_11075003).value;
        var by_11075008 = eval_arg_10625170(spry_11075003).value;
        var fn_11075009 = eval_arg_10625170(spry_11075003);
        result_11075004 = to_by_do_10686041(frm_11075006, to_11075007, by_11075008, fn_11075009, self_11075005, spry_11075003);
        break BeforeRet;
      } while (false);

      return result_11075004;

    }
    function HEX3Aanonymous_11080001(spry_11080003) {
      var result_11080004 = null;

      BeforeRet: do {
        var blk1_11080005 = eval_arg_infix_10625109(spry_11080003);
        var blk2_11080006 = eval_arg_10625170(spry_11080003);
        result_11080004 = eval_do_10475163(blk1_11080005, spry_11080003);
        if (spry_11080003.currentActivation.returned) {
        break BeforeRet;
        }
        
        L1: do {
            L2: while (true) {
            if (!value_9995455(result_11080004)) break L2;
              result_11080004 = eval_do_10475163(blk2_11080006, spry_11080003);
              if (spry_11080003.currentActivation.returned) {
              break BeforeRet;
              }
              
              result_11080004 = eval_do_10475163(blk1_11080005, spry_11080003);
              if (spry_11080003.currentActivation.returned) {
              break BeforeRet;
              }
              
            }
        } while(false);
      } while (false);

      return result_11080004;

    }
    function HEX3Aanonymous_11085001(spry_11085003) {
      var result_11085004 = null;

      BeforeRet: do {
        var blk1_11085005 = eval_arg_infix_10625109(spry_11085003);
        var blk2_11085006 = eval_arg_10625170(spry_11085003);
        result_11085004 = eval_do_10475163(blk1_11085005, spry_11085003);
        if (spry_11085003.currentActivation.returned) {
        break BeforeRet;
        }
        
        L1: do {
            L2: while (true) {
            if (!!(value_9995455(result_11085004))) break L2;
              result_11085004 = eval_do_10475163(blk2_11085006, spry_11085003);
              if (spry_11085003.currentActivation.returned) {
              break BeforeRet;
              }
              
              result_11085004 = eval_do_10475163(blk1_11085005, spry_11085003);
              if (spry_11085003.currentActivation.returned) {
              break BeforeRet;
              }
              
            }
        } while(false);
      } while (false);

      return result_11085004;

    }

    make_word_10625187(spry_10686083, makeNimstrLit("root"), new_prim_func_10480185(HEX3Aanonymous_10690001));
    make_word_10625187(spry_10686083, makeNimstrLit("activation"), new_prim_func_10480185(HEX3Aanonymous_10695001));
    make_word_10625187(spry_10686083, makeNimstrLit("locals"), new_prim_func_10480185(HEX3Aanonymous_10700001));
    make_word_10625187(spry_10686083, makeNimstrLit("node"), new_prim_func_10480185(HEX3Aanonymous_10710001));
    make_word_10625187(spry_10686083, makeNimstrLit("self"), new_prim_func_10480185(HEX3Aanonymous_10720001));
    make_word_10625187(spry_10686083, makeNimstrLit(";"), new_prim_func_10480185(HEX3Aanonymous_10725001));
    make_word_10625187(spry_10686083, makeNimstrLit("tag:"), new_prim_meth_10480247(HEX3Aanonymous_10730001));
    make_word_10625187(spry_10686083, makeNimstrLit("tag?"), new_prim_meth_10480247(HEX3Aanonymous_10735001));
    make_word_10625187(spry_10686083, makeNimstrLit("tags"), new_prim_meth_10480247(HEX3Aanonymous_10740001));
    make_word_10625187(spry_10686083, makeNimstrLit("tags:"), new_prim_meth_10480247(HEX3Aanonymous_10745001));
    make_word_10625187(spry_10686083, makeNimstrLit("="), new_prim_meth_10480247(HEX3Aanonymous_10750001));
    make_word_10625187(spry_10686083, makeNimstrLit(":="), new_prim_meth_10480247(HEX3Aanonymous_10755001));
    make_word_10625187(spry_10686083, makeNimstrLit("set:"), new_prim_meth_10480247(HEX3Aanonymous_10760001));
    make_word_10625187(spry_10686083, makeNimstrLit("set?"), new_prim_meth_10480247(HEX3Aanonymous_10765001));
    make_word_10625187(spry_10686083, makeNimstrLit("nil?"), new_prim_meth_10480247(HEX3Aanonymous_10770001));
    make_word_10625187(spry_10686083, makeNimstrLit("+"), new_prim_meth_10480247(HEX3Aanonymous_10775001));
    make_word_10625187(spry_10686083, makeNimstrLit("-"), new_prim_meth_10480247(HEX3Aanonymous_10780001));
    make_word_10625187(spry_10686083, makeNimstrLit("*"), new_prim_meth_10480247(HEX3Aanonymous_10785001));
    make_word_10625187(spry_10686083, makeNimstrLit("/"), new_prim_meth_10480247(HEX3Aanonymous_10790001));
    make_word_10625187(spry_10686083, makeNimstrLit("<"), new_prim_meth_10480247(HEX3Aanonymous_10795001));
    make_word_10625187(spry_10686083, makeNimstrLit(">"), new_prim_meth_10480247(HEX3Aanonymous_10800001));
    make_word_10625187(spry_10686083, makeNimstrLit("<="), new_prim_meth_10480247(HEX3Aanonymous_10810001));
    make_word_10625187(spry_10686083, makeNimstrLit(">="), new_prim_meth_10480247(HEX3Aanonymous_10815001));
    make_word_10625187(spry_10686083, makeNimstrLit("=="), new_prim_meth_10480247(HEX3Aanonymous_10825001));
    make_word_10625187(spry_10686083, makeNimstrLit("==="), new_prim_meth_10480247(HEX3Aanonymous_10830001));
    make_word_10625187(spry_10686083, makeNimstrLit("!="), new_prim_meth_10480247(HEX3Aanonymous_10835001));
    make_word_10625187(spry_10686083, makeNimstrLit("!=="), new_prim_meth_10480247(HEX3Aanonymous_10840001));
    make_word_10625187(spry_10686083, makeNimstrLit("not"), new_prim_meth_10480247(HEX3Aanonymous_10845001));
    make_word_10625187(spry_10686083, makeNimstrLit("and"), new_prim_meth_10480247(HEX3Aanonymous_10850001));
    make_word_10625187(spry_10686083, makeNimstrLit("or"), new_prim_meth_10480247(HEX3Aanonymous_10855001));
    make_word_10625187(spry_10686083, makeNimstrLit(","), new_prim_meth_10480247(HEX3Aanonymous_10860001));
    make_word_10625187(spry_10686083, makeNimstrLit("print"), new_prim_meth_10480247(HEX3Aanonymous_10865001));
    make_word_10625187(spry_10686083, makeNimstrLit("asFloat"), new_prim_meth_10480247(HEX3Aanonymous_10870001));
    make_word_10625187(spry_10686083, makeNimstrLit("asInt"), new_prim_meth_10480247(HEX3Aanonymous_10875001));
    make_word_10625187(spry_10686083, makeNimstrLit("serialize"), new_prim_func_10480185(HEX3Aanonymous_10880001));
    make_word_10625187(spry_10686083, makeNimstrLit("parse"), new_prim_func_10480185(HEX3Aanonymous_10885001));
    make_word_10625187(spry_10686083, makeNimstrLit("size"), new_prim_meth_10480247(HEX3Aanonymous_10890001));
    make_word_10625187(spry_10686083, makeNimstrLit("empty?"), new_prim_meth_10480247(HEX3Aanonymous_10895001));
    make_word_10625187(spry_10686083, makeNimstrLit("at:"), new_prim_meth_10480247(HEX3Aanonymous_10900001));
    make_word_10625187(spry_10686083, makeNimstrLit("at:put:"), new_prim_meth_10480247(HEX3Aanonymous_10905001));
    make_word_10625187(spry_10686083, makeNimstrLit("get:"), new_prim_meth_10480247(HEX3Aanonymous_10910001));
    make_word_10625187(spry_10686083, makeNimstrLit("set:to:"), new_prim_meth_10480247(HEX3Aanonymous_10915001));
    make_word_10625187(spry_10686083, makeNimstrLit("contains:"), new_prim_meth_10480247(HEX3Aanonymous_10920001));
    make_word_10625187(spry_10686083, makeNimstrLit("add:"), new_prim_meth_10480247(HEX3Aanonymous_10925001));
    make_word_10625187(spry_10686083, makeNimstrLit("removeLast"), new_prim_meth_10480247(HEX3Aanonymous_10930001));
    make_word_10625187(spry_10686083, makeNimstrLit("removeFirst"), new_prim_meth_10480247(HEX3Aanonymous_10935001));
    make_word_10625187(spry_10686083, makeNimstrLit("removeAt:"), new_prim_meth_10480247(HEX3Aanonymous_10940001));
    make_word_10625187(spry_10686083, makeNimstrLit("copyFrom:to:"), new_prim_meth_10480247(HEX3Aanonymous_10945001));
    make_word_10625187(spry_10686083, makeNimstrLit("do:"), new_prim_meth_10480247(HEX3Aanonymous_10955001));
    make_word_10625187(spry_10686083, makeNimstrLit("quit"), new_prim_func_10480185(HEX3Aanonymous_10960001));
    make_word_10625187(spry_10686083, makeNimstrLit("func"), new_prim_func_10480185(HEX3Aanonymous_10965001));
    make_word_10625187(spry_10686083, makeNimstrLit("method"), new_prim_func_10480185(HEX3Aanonymous_10970001));
    make_word_10625187(spry_10686083, makeNimstrLit("do"), new_prim_func_10480185(HEX3Aanonymous_10975001));
    make_word_10625187(spry_10686083, makeNimstrLit("$"), new_prim_func_10480185(HEX3Aanonymous_10980001));
    make_word_10625187(spry_10686083, makeNimstrLit("eva"), new_prim_func_10480185(HEX3Aanonymous_10985001));
    make_word_10625187(spry_10686083, makeNimstrLit("eval"), new_prim_func_10480185(HEX3Aanonymous_10990001));
    make_word_10625187(spry_10686083, makeNimstrLit("reify"), new_prim_func_10480185(HEX3Aanonymous_10995001));
    make_word_10625187(spry_10686083, makeNimstrLit("litify"), new_prim_func_10480185(HEX3Aanonymous_11000001));
    make_word_10625187(spry_10686083, makeNimstrLit("quote"), new_prim_func_10480185(HEX3Aanonymous_11005001));
    make_word_10625187(spry_10686083, makeNimstrLit("litword"), new_prim_func_10480185(HEX3Aanonymous_11015001));
    make_word_10625187(spry_10686083, makeNimstrLit("word"), new_prim_func_10480185(HEX3Aanonymous_11025001));
    make_word_10625187(spry_10686083, makeNimstrLit("clone"), new_prim_func_10480185(HEX3Aanonymous_11035001));
    make_word_10625187(spry_10686083, makeNimstrLit("^"), new_prim_func_10480185(HEX3Aanonymous_11040001));
    make_word_10625187(spry_10686083, makeNimstrLit("then:"), new_prim_meth_10480247(HEX3Aanonymous_11045001));
    make_word_10625187(spry_10686083, makeNimstrLit("else:"), new_prim_meth_10480247(HEX3Aanonymous_11050001));
    make_word_10625187(spry_10686083, makeNimstrLit("then:else:"), new_prim_meth_10480247(HEX3Aanonymous_11055001));
    make_word_10625187(spry_10686083, makeNimstrLit("else:then:"), new_prim_meth_10480247(HEX3Aanonymous_11060001));
    make_word_10625187(spry_10686083, makeNimstrLit("repeat:"), new_prim_meth_10480247(HEX3Aanonymous_11065001));
    make_word_10625187(spry_10686083, makeNimstrLit("to:do:"), new_prim_meth_10480247(HEX3Aanonymous_11070001));
    make_word_10625187(spry_10686083, makeNimstrLit("to:by:do:"), new_prim_meth_10480247(HEX3Aanonymous_11075001));
    make_word_10625187(spry_10686083, makeNimstrLit("whileTrue:"), new_prim_meth_10480247(HEX3Aanonymous_11080001));
    make_word_10625187(spry_10686083, makeNimstrLit("whileFalse:"), new_prim_meth_10480247(HEX3Aanonymous_11085001));

  
}
function eval_reduce_11145156(self_11145158, spry_11145159) {
      var Tmp1;

  var result_11145160 = null;

  BeforeRet: do {
    var collect_11145177 = new_seq_10195614(0);
    var current_11145178 = new_activation_10480499(self_11145158);
    current_11145178.parent = spry_11145159.currentActivation;
      if (!(current_11145178.self == null)) Tmp1 = false; else {        Tmp1 = !((current_11145178.parent == null));      }    if (Tmp1) {
    current_11145178.self = current_11145178.parent.self;
    }
    
    spry_11145159.currentActivation = current_11145178;
    L2: do {
        L3: while (true) {
        if (!!(at_end_10520903(current_11145178))) break L3;
          var next_11155006 = next_10520920(current_11145178);
          if (can_eval_10630175(next_11155006, spry_11145159)) {
          current_11145178.last = eval_10475157(next_11155006, spry_11145159);
          if (current_11145178.returned) {
          do_return_10525019(spry_11145159.currentActivation, spry_11145159);
          result_11145160 = current_11145178.last;
          break BeforeRet;
          }
          
          if (collect_11145177 != null) { collect_11145177.push(current_11145178.last); } else { collect_11145177 = [current_11145178.last]; };
          }
          else {
            current_11145178.last = next_11155006;
          }
          
        }
    } while(false);
    spry_11145159.lastSelf = spry_11145159.currentActivation.self;
    spry_11145159.currentActivation = spry_11145159.currentActivation.parent;
    result_11145160 = new_blok_10195684(collect_11145177);
    break BeforeRet;
  } while (false);

  return result_11145160;

}
function prim_reduce_11160014(spry_11160016) {
  var result_11160017 = null;

    result_11160017 = eval_reduce_11145156(eval_arg_10625170(spry_11160016), spry_11160016);

  return result_11160017;

}
function add_extend_11160031(spry_11160033) {
    make_word_10625187(spry_11160033, makeNimstrLit("reduce"), new_prim_func_10480185(prim_reduce_11160014));

  
}
function binom_1043014(n_1043016, k_1043017) {
  var result_1043018 = 0;

  BeforeRet: do {
    if ((k_1043017 <= 0)) {
    result_1043018 = 1;
    break BeforeRet;
    }
    
    if ((n_1043016 < mulInt(2, k_1043017))) {
    result_1043018 = binom_1043014(n_1043016, subInt(n_1043016, k_1043017));
    break BeforeRet;
    }
    
    result_1043018 = n_1043016;
    L1: do {
      var i_1045221 = 0;
      var res_12146340 = 2;
      L2: do {
          L3: while (true) {
          if (!(res_12146340 <= k_1043017)) break L3;
            i_1045221 = res_12146340;
            result_1043018 = divInt(mulInt(result_1043018, subInt(addInt(n_1043016, 1), i_1045221)), i_1045221);
            res_12146340 = addInt(res_12146340, 1);
          }
      } while(false);
    } while(false);
  } while (false);

  return result_1043018;

}
function fac_1045250(n_1045252) {
  var result_1045253 = 0;

    if (!((0 <= n_1045252))) {
    failed_assert_impl_102680((makeNimstrLit("math.nim(96, 9) `n >= 0` ") || []).concat(cstrToNimstr((n_1045252)+"") || [],makeNimstrLit(" must not be negative.") || []));
    }
    
    if (!((n_1045252 < 13))) {
    failed_assert_impl_102680((makeNimstrLit("math.nim(97, 9) `n < factTable.len` ") || []).concat(cstrToNimstr((n_1045252)+"") || [],makeNimstrLit(" is too large to look up in the table") || []));
    }
    
    result_1045253 = fact_table_1045463[chckIndx(n_1045252, 0, (fact_table_1045463 != null ? fact_table_1045463.length : 0)+0-1)-0];

  return result_1045253;

}
function next_power_of_two_1085014(x_1085016) {
  var result_1085017 = 0;

    result_1085017 = (x_1085016 - 1);
    result_1085017 = (result_1085017 | (result_1085017 >> 16));
    result_1085017 = (result_1085017 | (result_1085017 >> 8));
    result_1085017 = (result_1085017 | (result_1085017 >> 4));
    result_1085017 = (result_1085017 | (result_1085017 >> 2));
    result_1085017 = (result_1085017 | (result_1085017 >> 1));
    result_1085017 += (1 + ((x_1085016 <= 0) ? 1:0));

  return result_1085017;

}
function rotl_11162230(x_11162232, k_11162233) {
  var result_11162234 = 0;

    result_11162234 = ((x_11162232 << k_11162233) | ((x_11162232 >>> 0) >>> ((64 - k_11162233) >>> 0)));

  return result_11162234;

}
function next_11162258(r_11162261) {
  var result_11162262 = 0;

    var s0_11162263 = r_11162261.a0;
    var s1_11162264 = r_11162261.a1;
    result_11162262 = ((s0_11162263 + s1_11162264) >>> 0);
    s1_11162264 = (s1_11162264 ^ s0_11162263);
    r_11162261.a0 = ((rotl_11162230(s0_11162263, 55) ^ s1_11162264) ^ (s1_11162264 << 14));
    r_11162261.a1 = rotl_11162230(s1_11162264, 36);

  return result_11162262;

}
function rand_11165281(r_11165284, max_11165307) {
  var result_11165308 = 0.0;

    var x_11165309 = next_11162258(r_11165284);
    result_11165308 = ((x_11165309 / 4294967295) * max_11165307);

  return result_11165308;

}
function rand_11165435(max_11165437) {
  var result_11165438 = 0.0;

    result_11165438 = rand_11165281(state_11162005[0], chckRange(max_11165437, 0.0, Infinity));

  return result_11165438;

}
function rand_11165243(r_11165246, max_11165247) {
  var result_11165248 = 0;

  BeforeRet: do {
    if ((max_11165247 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_11165249 = next_11162258(r_11165246);
          if ((x_11165249 <= ((4294967295 - (4294967295 % max_11165247)) >>> 0))) {
          result_11165248 = chckRange((x_11165249 % ((max_11165247 + 1) )), -2147483648, 2147483647);
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_11165248;

}
function rand_11165263(max_11165265) {
  var result_11165266 = 0;

    result_11165266 = rand_11165243(state_11162005[0], chckRange(max_11165265, 0, 2147483647));

  return result_11165266;

}
function add_math_11948214(spry_11948216) {
    function HEX3Aanonymous_11950001(spry_11950003) {
      var result_11950004 = null;

      BeforeRet: do {
        var v_11950005 = eval_arg_infix_10625109(spry_11950003);
        if (isObj(v_11950005.m_type, NTI9971173)) {
        result_11950004 = new_value_10195941(-(v_11950005.value));
        break BeforeRet;
        }
        else {
          result_11950004 = new_value_10195909(negInt(v_11950005.value));
          break BeforeRet;
        }
        
      } while (false);

      return result_11950004;

    }
    function HEX3Aanonymous_11955001(spry_11955003) {
      var result_11955004 = null;

        result_11955004 = new_value_10195909(binom_1043014(eval_arg_infix_10625109(spry_11955003).value, eval_arg_10625170(spry_11955003).value));

      return result_11955004;

    }
    function HEX3Aanonymous_11960001(spry_11960003) {
      var result_11960004 = null;

        result_11960004 = new_value_10195909(fac_1045250(eval_arg_infix_10625109(spry_11960003).value));

      return result_11960004;

    }
    function HEX3Aanonymous_11965001(spry_11965003) {
      var result_11965004 = null;

        result_11965004 = new_value_10196037(is_power_of_two_1080029(eval_arg_infix_10625109(spry_11965003).value));

      return result_11965004;

    }
    function HEX3Aanonymous_11970001(spry_11970003) {
      var result_11970004 = null;

        result_11970004 = new_value_10195909(next_power_of_two_1085014(eval_arg_infix_10625109(spry_11970003).value));

      return result_11970004;

    }
    function HEX3Aanonymous_11975001(spry_11975003) {
      var result_11975004 = null;

      BeforeRet: do {
        var max_11975005 = eval_arg_infix_10625109(spry_11975003);
        if (isObj(max_11975005.m_type, NTI9971173)) {
        result_11975004 = new_value_10195941(rand_11165435(max_11975005.value));
        break BeforeRet;
        }
        else {
          result_11975004 = new_value_10195909(rand_11165263(max_11975005.value));
          break BeforeRet;
        }
        
      } while (false);

      return result_11975004;

    }
    function HEX3Aanonymous_11980001(spry_11980003) {
      var result_11980004 = null;

      BeforeRet: do {
        var self_11980005 = eval_arg_infix_10625109(spry_11980003);
        if (isObj(self_11980005.m_type, NTI9971173)) {
        result_11980004 = new_value_10195941(Math.sqrt(self_11980005.value));
        break BeforeRet;
        }
        else {
          result_11980004 = new_value_10195941(Math.sqrt(self_11980005.value));
          break BeforeRet;
        }
        
      } while (false);

      return result_11980004;

    }
    function HEX3Aanonymous_11985001(spry_11985003) {
      var result_11985004 = null;

        result_11985004 = new_value_10195941(Math.sin(eval_arg_infix_10625109(spry_11985003).value));

      return result_11985004;

    }
    function HEX3Aanonymous_11990001(spry_11990003) {
      var result_11990004 = null;

        result_11990004 = new_value_10195941(Math.cos(eval_arg_infix_10625109(spry_11990003).value));

      return result_11990004;

    }
    function HEX3Aanonymous_11995001(spry_11995003) {
      var result_11995004 = null;

      BeforeRet: do {
        var a_11995005 = eval_arg_infix_10625109(spry_11995003);
        var b_11995006 = eval_arg_10625170(spry_11995003);
        if (isObj(a_11995005.m_type, NTI9971173)) {
        result_11995004 = new_value_10195941(a_11995005.value % b_11995006.value);
        break BeforeRet;
        }
        else {
          result_11995004 = new_value_10195909(modInt(a_11995005.value, b_11995006.value));
          break BeforeRet;
        }
        
      } while (false);

      return result_11995004;

    }

    make_word_10625187(spry_11948216, makeNimstrLit("negated"), new_prim_meth_10480247(HEX3Aanonymous_11950001));
    make_word_10625187(spry_11948216, makeNimstrLit("binom"), new_prim_meth_10480247(HEX3Aanonymous_11955001));
    make_word_10625187(spry_11948216, makeNimstrLit("fac"), new_prim_meth_10480247(HEX3Aanonymous_11960001));
    make_word_10625187(spry_11948216, makeNimstrLit("powerOfTwo?"), new_prim_meth_10480247(HEX3Aanonymous_11965001));
    make_word_10625187(spry_11948216, makeNimstrLit("nextPowerOfTwo"), new_prim_meth_10480247(HEX3Aanonymous_11970001));
    make_word_10625187(spry_11948216, makeNimstrLit("random"), new_prim_meth_10480247(HEX3Aanonymous_11975001));
    make_word_10625187(spry_11948216, makeNimstrLit("sqrt"), new_prim_meth_10480247(HEX3Aanonymous_11980001));
    make_word_10625187(spry_11948216, makeNimstrLit("sin"), new_prim_meth_10480247(HEX3Aanonymous_11985001));
    make_word_10625187(spry_11948216, makeNimstrLit("cos"), new_prim_meth_10480247(HEX3Aanonymous_11990001));
    make_word_10625187(spry_11948216, makeNimstrLit("mod"), new_prim_meth_10480247(HEX3Aanonymous_11995001));

  
}
function new_poly_meth_11996019(methods_11996021, parent_11996022) {
  var result_11996023 = null;

    result_11996023 = {nodes: nimCopy(null, methods_11996021.nodes, NTI9971193), parent: parent_11996022, m_type: NTI11996017, pos: 0, tags: null};

  return result_11996023;

}
function polymeth_11996067(methods_11996069, spry_11996070) {
  var result_11996071 = null;

    result_11996071 = new_poly_meth_11996019(methods_11996069, spry_11996070.currentActivation);

  return result_11996071;

}
function add_oo_11996161(spry_11996163) {
    function HEX3Aanonymous_12000001(spry_12000003) {
      var result_12000004 = null;

        result_12000004 = polymeth_11996067(eval_arg_10625170(spry_12000003), spry_12000003);

      return result_12000004;

    }
    function HEX3Aanonymous_12005001(spry_12005003) {
      var result_12005004 = null;

        var tags_12005005 = eval_arg_infix_10625109(spry_12005003);
        result_12005004 = meth_10475145(spry_12005003, eval_arg_10625170(spry_12005003));
        result_12005004.tags = tags_12005005;

      return result_12005004;

    }

    make_word_10625187(spry_11996163, makeNimstrLit("polymethod"), new_prim_func_10480185(HEX3Aanonymous_12000001));
    make_word_10625187(spry_11996163, makeNimstrLit("->"), new_prim_meth_10480247(HEX3Aanonymous_12005001));

  
}
function dump_12006364(spry_12006366) {
    rawEcho(makeNimstrLit("STACK:"));
    L1: do {
      var a_12006371 = null;
      var activation_12146358 = spry_12006366.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146358 == null))) break L3;
            a_12006371 = activation_12146358;
            dump_12006242(a_12006371);
            rawEcho(makeNimstrLit("-----------------------------"));
            activation_12146358 = activation_12146358.parent;
          }
      } while(false);
    } while(false);
    rawEcho(makeNimstrLit("========================================"));

  
}
function add_debug_12006393(spry_12006395) {
    function HEX3Aanonymous_12010001(spry_12010003) {
      var result_12010004 = null;

        dump_12006364(spry_12010003);

      return result_12010004;

    }

    make_word_10625187(spry_12006395, makeNimstrLit("dump"), new_prim_func_10480185(HEX3Aanonymous_12010001));

  
}
function substr_340853(s_340855, first_340856) {
  var result_340858 = null;

    result_340858 = nimCopy(null, substr_340822(s_340855, first_340856, (s_340855 != null ? (s_340855.length-1) : -1)), NTI112);

  return result_340858;

}
function nsuReplaceStr(s_9440016, sub_9440017, by_9440018) {
  var result_9440019 = null;

    result_9440019 = nimCopy(null, [], NTI112);
    var sub_len_9440020 = (sub_9440017 != null ? sub_9440017.length : 0);
    if ((sub_len_9440020 == 0)) {
    result_9440019 = nimCopy(null, s_9440016, NTI112);
    }
    else {
    if ((sub_len_9440020 == 1)) {
    var c_9440021 = sub_9440017[chckIndx(0, 0, (sub_9440017 != null ? sub_9440017.length : 0)+0-1)-0];
    var last_9440023 = (s_9440016 != null ? (s_9440016.length-1) : -1);
    var i_9440025 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var j_9440026 = nsuFindChar(s_9440016, c_9440021, chckRange(i_9440025, 0, 2147483647), last_9440023);
          if ((j_9440026 < 0)) {
          break L1;
          }
          
          if (result_9440019 != null) { result_9440019 = (result_9440019).concat(substr_340822(s_9440016, i_9440025, subInt(j_9440026, 1))); } else { result_9440019 = substr_340822(s_9440016, i_9440025, subInt(j_9440026, 1)).slice(); };
          if (result_9440019 != null) { result_9440019 = (result_9440019).concat(by_9440018); } else { result_9440019 = by_9440018.slice(); };
          i_9440025 = addInt(j_9440026, sub_len_9440020);
        }
    } while(false);
    if (result_9440019 != null) { result_9440019 = (result_9440019).concat(substr_340853(s_9440016, i_9440025)); } else { result_9440019 = substr_340853(s_9440016, i_9440025).slice(); };
    }
    else {
      var a_9440027 = [new Int32Array(256)];
      nsuInitSkipTable(a_9440027[0], sub_9440017);
      var last_9440030 = (s_9440016 != null ? (s_9440016.length-1) : -1);
      var i_9440032 = 0;
      L3: do {
          L4: while (true) {
          if (!true) break L4;
            var j_9440033 = nsuFindStrA(a_9440027[0], s_9440016, sub_9440017, chckRange(i_9440032, 0, 2147483647), last_9440030);
            if ((j_9440033 < 0)) {
            break L3;
            }
            
            if (result_9440019 != null) { result_9440019 = (result_9440019).concat(substr_340822(s_9440016, i_9440032, subInt(j_9440033, 1))); } else { result_9440019 = substr_340822(s_9440016, i_9440032, subInt(j_9440033, 1)).slice(); };
            if (result_9440019 != null) { result_9440019 = (result_9440019).concat(by_9440018); } else { result_9440019 = by_9440018.slice(); };
            i_9440032 = addInt(j_9440033, sub_len_9440020);
          }
      } while(false);
      if (result_9440019 != null) { result_9440019 = (result_9440019).concat(substr_340853(s_9440016, i_9440032)); } else { result_9440019 = substr_340853(s_9440016, i_9440032).slice(); };
    }
    }

  return result_9440019;

}
function eval_root_do_10645268(self_10645270, spry_10645271) {
      var Tmp1;

  var result_10645272 = null;

    spry_10645271.lastSelf = spry_10645271.currentActivation.self;
    spry_10645271.currentActivation = spry_10645271.currentActivation.parent;
    spry_10645271.rootActivation.body = self_10645270;
    spry_10645271.rootActivation.pos = 0;
    result_10645272 = eval_10630590(spry_10645271.rootActivation, spry_10645271);
    spry_10645271.rootActivation.parent = spry_10645271.currentActivation;
      if (!(spry_10645271.rootActivation.self == null)) Tmp1 = false; else {        Tmp1 = !((spry_10645271.rootActivation.parent == null));      }    if (Tmp1) {
    spry_10645271.rootActivation.self = spry_10645271.rootActivation.parent.self;
    }
    
    spry_10645271.currentActivation = spry_10645271.rootActivation;

  return result_10645272;

}
function eval_root_10475149(spry_10475151, code_10475152) {
  var result_10660023 = null;

    result_10660023 = eval_root_do_10645268(parse_10435019(spry_10475151.parser, code_10475152), spry_10475151);

  return result_10660023;

}
function add_string_12011028(spry_12011030) {
    function HEX3Aanonymous_12015001(spry_12015003) {
      var result_12015004 = null;

      BeforeRet: do {
        var s_12015005 = nimCopy(null, eval_arg_infix_10625109(spry_12015003).value, NTI112);
        var sep_12015006 = nimCopy(null, eval_arg_10625170(spry_12015003).value, NTI112);
        var blk_12015007 = new_blok_10195717();
        L1: do {
          var token_12015008 = null;
          var lastHEX60gensym8835043_12146361 = 0;
          var splitsHEX60gensym8835044_12146362 = -1;
          L2: do {
              L3: while (true) {
              if (!(lastHEX60gensym8835043_12146361 <= (s_12015005 != null ? s_12015005.length : 0))) break L3;
                var firstHEX60gensym8835045_12146364 = lastHEX60gensym8835043_12146361;
                L4: do {
                    L5: while (true) {
                    if (!((lastHEX60gensym8835043_12146361 < (s_12015005 != null ? s_12015005.length : 0)) && !(substr_eq_8800026(s_12015005, lastHEX60gensym8835043_12146361, sep_12015006)))) break L5;
                      lastHEX60gensym8835043_12146361 = addInt(lastHEX60gensym8835043_12146361, 1);
                    }
                } while(false);
                if ((splitsHEX60gensym8835044_12146362 == 0)) {
                lastHEX60gensym8835043_12146361 = (s_12015005 != null ? s_12015005.length : 0);
                }
                
                token_12015008 = substr_340822(s_12015005, firstHEX60gensym8835045_12146364, subInt(lastHEX60gensym8835043_12146361, 1));
                add_10196176(blk_12015007, new_value_10195973(token_12015008));
                if ((splitsHEX60gensym8835044_12146362 == 0)) {
                break L2;
                }
                
                splitsHEX60gensym8835044_12146362 = subInt(splitsHEX60gensym8835044_12146362, 1);
                lastHEX60gensym8835043_12146361 = addInt(lastHEX60gensym8835043_12146361, (sep_12015006 != null ? sep_12015006.length : 0));
              }
          } while(false);
        } while(false);
        result_12015004 = blk_12015007;
        break BeforeRet;
      } while (false);

      return result_12015004;

    }
    function HEX3Aanonymous_12020001(spry_12020003) {
      var result_12020004 = null;

      BeforeRet: do {
        var self_12020005 = eval_arg_infix_10625109(spry_12020003);
        var sub_12020006 = nimCopy(null, eval_arg_10625170(spry_12020003).value, NTI112);
        var by_12020007 = nimCopy(null, eval_arg_10625170(spry_12020003).value, NTI112);
        self_12020005.value = nimCopy(null, nsuReplaceStr(self_12020005.value, sub_12020006, by_12020007), NTI112);
        result_12020004 = self_12020005;
        break BeforeRet;
      } while (false);

      return result_12020004;

    }
    function HEX3Aanonymous_12025001(spry_12025003) {
      var result_12025004 = null;

        var self_12025005 = nimCopy(null, eval_arg_infix_10625109(spry_12025003).value, NTI112);
        var sub_12025006 = nimCopy(null, eval_arg_10625170(spry_12025003).value, NTI112);
        var start_12025007 = eval_arg_10625170(spry_12025003).value;
        result_12025004 = new_value_10195909(nsuFindStr(self_12025005, sub_12025006, chckRange(start_12025007, 0, 2147483647), 0));

      return result_12025004;

    }

    make_word_10625187(spry_12011030, makeNimstrLit("split:"), new_prim_meth_10480247(HEX3Aanonymous_12015001));
    make_word_10625187(spry_12011030, makeNimstrLit("replace:with:"), new_prim_meth_10480247(HEX3Aanonymous_12020001));
    make_word_10625187(spry_12011030, makeNimstrLit("findString:startingAt:"), new_prim_meth_10480247(HEX3Aanonymous_12025001));
    eval_root_10475149(spry_12011030, makeNimstrLit("[\x0A    findString: = method [self findString: :s startingAt: 0]\x0A  ]"));

  
}
function add_modules_12026015(spry_12026017) {
    eval_root_10475149(spry_12026017, makeNimstrLit("[\x0A    # Load a Module from a string\x0A    loadString: = func [:code\x0A      map = eval parse code\x0A      loadMap: map as: ((map at: \'_meta) at: \'name)\x0A    ]\x0A\x0A    loadString:as: = func [:code :name\x0A      loadMap: (eval parse code) as: name\x0A    ]\x0A\x0A    loadFile: = func [\x0A      loadString: readFile :fileName]\x0A\x0A    loadFile:as: = func [\x0A      loadString: (readFile :fileName) as: :name]\x0A\x0A    loadMap:as: = func [:map :name\x0A      # Make a module of the map (tagging it)\x0A      m = module map\x0A      # Insert module at given name\x0A      root at: name put: m\x0A      # Add module last in modules (for shadowed global lookup)\x0A      modules add: m\x0A      true\x0A    ]\x0A\x0A    existsFile \"spry.sy\" then: [\x0A      #echo \"Loading spry.sy ...\"\x0A      loadFile: \"spry.sy\"\x0A    ]\x0A  ]"));

  
}
function add_reflect_12027375(spry_12027377) {
    function HEX3Aanonymous_12030001(spry_12030003) {
      var result_12030004 = null;

        result_12030004 = new_or_get_lit_word_10125737(spry_12030003.parser, type_name_12027032(eval_arg_infix_10625109(spry_12030003)));

      return result_12030004;

    }

    make_word_10625187(spry_12027377, makeNimstrLit("type"), new_prim_meth_10480247(HEX3Aanonymous_12030001));

  
}
function HEX5BHEX5D_10480055(self_10480057, key_10480058) {
  var result_10480059 = null;

    result_10480059 = self_10480057.nodes[chckIndx(key_10480058, 0, (self_10480057.nodes != null ? self_10480057.nodes.length : 0)+0-1)-0];

  return result_10480059;

}
function HEX5BHEX5DHEX3D_10480127(self_10480129, key_10480130, val_10480131) {
    self_10480129.nodes[chckIndx(key_10480130, 0, (self_10480129.nodes != null ? self_10480129.nodes.length : 0)+0-1)-0] = val_10480131;

  
}
function new_blok_12036028(size_12036030) {
  var result_12036031 = null;

    result_12036031 = {nodes: new_seq_10195614(chckRange(size_12036030, 0, 2147483647)), m_type: NTI9971200, pos: 0, tags: null};

  return result_12036031;

}
function fill_12095011(a_12095016, value_12095017) {
    var xHEX60gensym12095024_12100002 = 0;
    L1: do {
        L2: while (true) {
        if (!(xHEX60gensym12095024_12100002 <= (a_12095016 != null ? (a_12095016.length-1) : -1))) break L2;
          a_12095016[chckIndx(xHEX60gensym12095024_12100002, 0, (a_12095016 != null ? a_12095016.length : 0)+0-1)-0] = value_12095017;
          xHEX60gensym12095024_12100002 = addInt(xHEX60gensym12095024_12100002, 1);
        }
    } while(false);

  
}
function reverse_12110022(a_12110027, first_12110028, last_12110029) {
    var x_12110030 = first_12110028;
    var y_12110031 = last_12110029;
    L1: do {
        L2: while (true) {
        if (!(x_12110030 < y_12110031)) break L2;
          var Tmp3 = a_12110027[chckIndx(x_12110030, 0, (a_12110027 != null ? a_12110027.length : 0)+0-1)-0]; a_12110027[chckIndx(x_12110030, 0, (a_12110027 != null ? a_12110027.length : 0)+0-1)-0] = a_12110027[chckIndx(y_12110031, 0, (a_12110027 != null ? a_12110027.length : 0)+0-1)-0]; a_12110027[chckIndx(y_12110031, 0, (a_12110027 != null ? a_12110027.length : 0)+0-1)-0] = Tmp3;          y_12110031 = subInt(y_12110031, 1);
          x_12110030 = addInt(x_12110030, 1);
        }
    } while(false);

  
}
function reverse_12110010(a_12110015) {
    reverse_12110022(a_12110015, 0, chckRange(nimMax(0, (a_12110015 != null ? (a_12110015.length-1) : -1)), 0, 2147483647));

  
}
function add_block_12036061(spry_12036063) {
    function HEX3Aanonymous_12040001(spry_12040003) {
      var result_12040004 = null;

        result_12040004 = HEX5BHEX5D_10480055(eval_arg_infix_10625109(spry_12040003), 0);

      return result_12040004;

    }
    function HEX3Aanonymous_12045001(spry_12045003) {
      var result_12045004 = null;

        var nodes_12045005 = nimCopy(null, eval_arg_infix_10625109(spry_12045003).nodes, NTI9971193);
        result_12045004 = nodes_12045005[chckIndx((nodes_12045005 != null ? (nodes_12045005.length-1) : -1), 0, (nodes_12045005 != null ? nodes_12045005.length : 0)+0-1)-0];

      return result_12045004;

    }
    function HEX3Aanonymous_12050001(spry_12050003) {
      var result_12050004 = null;

        eval_arg_infix_10625109(spry_12050003).pos = 0;

      return result_12050004;

    }
    function HEX3Aanonymous_12055001(spry_12055003) {
      var result_12055004 = null;

        result_12055004 = new_value_10195909(eval_arg_infix_10625109(spry_12055003).pos);

      return result_12055004;

    }
    function HEX3Aanonymous_12060001(spry_12060003) {
      var result_12060004 = null;

        result_12060004 = eval_arg_infix_10625109(spry_12060003);
        var comp_12060005 = result_12060004;
        comp_12060005.pos = eval_arg_10625170(spry_12060003).value;

      return result_12060004;

    }
    function HEX3Aanonymous_12065001(spry_12065003) {
      var result_12065004 = null;

        var comp_12065005 = eval_arg_infix_10625109(spry_12065003);
        result_12065004 = HEX5BHEX5D_10480055(comp_12065005, comp_12065005.pos);

      return result_12065004;

    }
    function HEX3Aanonymous_12070001(spry_12070003) {
      var result_12070004 = null;

        result_12070004 = eval_arg_infix_10625109(spry_12070003);
        var comp_12070005 = result_12070004;
        HEX5BHEX5DHEX3D_10480127(comp_12070005, comp_12070005.pos, eval_arg_10625170(spry_12070003));

      return result_12070004;

    }
    function HEX3Aanonymous_12075001(spry_12075003) {
      var result_12075004 = null;

      BeforeRet: do {
        var comp_12075005 = eval_arg_infix_10625109(spry_12075003);
        if ((comp_12075005.pos == (comp_12075005.nodes != null ? comp_12075005.nodes.length : 0))) {
        result_12075004 = spry_12075003.nilVal;
        break BeforeRet;
        }
        
        result_12075004 = HEX5BHEX5D_10480055(comp_12075005, comp_12075005.pos);
        comp_12075005.pos = addInt(comp_12075005.pos, 1);
      } while (false);

      return result_12075004;

    }
    function HEX3Aanonymous_12080001(spry_12080003) {
      var result_12080004 = null;

      BeforeRet: do {
        var comp_12080005 = eval_arg_infix_10625109(spry_12080003);
        if ((comp_12080005.pos == 0)) {
        result_12080004 = spry_12080003.nilVal;
        break BeforeRet;
        }
        
        comp_12080005.pos = subInt(comp_12080005.pos, 1);
        result_12080004 = HEX5BHEX5D_10480055(comp_12080005, comp_12080005.pos);
      } while (false);

      return result_12080004;

    }
    function HEX3Aanonymous_12085001(spry_12085003) {
      var result_12085004 = null;

        var comp_12085005 = eval_arg_infix_10625109(spry_12085003);
        result_12085004 = new_value_10196037((comp_12085005.pos == (comp_12085005.nodes != null ? comp_12085005.nodes.length : 0)));

      return result_12085004;

    }
    function HEX3Aanonymous_12090001(spry_12090003) {
      var result_12090004 = null;

      BeforeRet: do {
        result_12090004 = new_blok_10195717();
        break BeforeRet;
      } while (false);

      return result_12090004;

    }
    function HEX3Aanonymous_12095001(spry_12095003) {
      var result_12095004 = null;

      BeforeRet: do {
        var size_12095005 = eval_arg_10625170(spry_12095003);
        var blok_12095006 = new_blok_12036028(size_12095005.value);
        fill_12095011(blok_12095006.nodes, spry_12095003.nilVal);
        result_12095004 = blok_12095006;
        break BeforeRet;
      } while (false);

      return result_12095004;

    }
    function HEX3Aanonymous_12105001(spry_12105003) {
      var result_12105004 = null;

      BeforeRet: do {
        var self_12105005 = eval_arg_infix_10625109(spry_12105003);
        var filler_12105006 = eval_arg_10625170(spry_12105003);
        fill_12095011(self_12105005.nodes, filler_12105006);
        result_12105004 = self_12105005;
        break BeforeRet;
      } while (false);

      return result_12105004;

    }
    function HEX3Aanonymous_12110001(spry_12110003) {
      var result_12110004 = null;

      BeforeRet: do {
        var self_12110005 = eval_arg_infix_10625109(spry_12110003);
        reverse_12110010(self_12110005.nodes);
        result_12110004 = self_12110005;
        break BeforeRet;
      } while (false);

      return result_12110004;

    }
    function HEX3Aanonymous_12115001(spry_12115003) {
      var result_12115004 = null;

      BeforeRet: do {
        var self_12115005 = eval_arg_infix_10625109(spry_12115003);
        var blk_12115006 = eval_arg_10625170(spry_12115003);
        var return_blok_12115007 = new_blok_10195717();
        var current_12115008 = spry_12115003.currentActivation;
        var orig_12115009 = current_12115008.body.nodes[chckIndx(0, 0, (current_12115008.body.nodes != null ? current_12115008.body.nodes.length : 0)+0-1)-0];
        var oldpos_12115010 = current_12115008.pos;
        current_12115008.pos = 0;
        var activation_12115011 = new_activation_10480499(blk_12115006);
        L1: do {
          var each_12115018 = null;
          var i_12146372 = 0;
          var l_12146373 = (self_12115005.nodes != null ? self_12115005.nodes.length : 0);
          L2: do {
              L3: while (true) {
              if (!(i_12146372 < l_12146373)) break L3;
                each_12115018 = self_12115005.nodes[chckIndx(i_12146372, 0, (self_12115005.nodes != null ? self_12115005.nodes.length : 0)+0-1)-0];
                current_12115008.body.nodes[chckIndx(0, 0, (current_12115008.body.nodes != null ? current_12115008.body.nodes.length : 0)+0-1)-0] = each_12115018;
                result_12115004 = eval_10630590(activation_12115011, spry_12115003);
                reset_10485024(activation_12115011);
                if (current_12115008.returned) {
                current_12115008.body.nodes[chckIndx(0, 0, (current_12115008.body.nodes != null ? current_12115008.body.nodes.length : 0)+0-1)-0] = orig_12115009;
                current_12115008.pos = oldpos_12115010;
                break BeforeRet;
                }
                
                add_10196176(return_blok_12115007, result_12115004);
                current_12115008.pos = 0;
                i_12146372 = addInt(i_12146372, 1);
                if (!(((self_12115005.nodes != null ? self_12115005.nodes.length : 0) == l_12146373))) {
                failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        current_12115008.body.nodes[chckIndx(0, 0, (current_12115008.body.nodes != null ? current_12115008.body.nodes.length : 0)+0-1)-0] = orig_12115009;
        current_12115008.pos = oldpos_12115010;
        result_12115004 = return_blok_12115007;
        break BeforeRet;
      } while (false);

      return result_12115004;

    }
    function HEX3Aanonymous_12120001(spry_12120003) {
      var result_12120004 = null;

      BeforeRet: do {
        var self_12120005 = eval_arg_infix_10625109(spry_12120003);
        var blk_12120006 = eval_arg_10625170(spry_12120003);
        var return_blok_12120007 = new_blok_10195717();
        var current_12120008 = spry_12120003.currentActivation;
        var orig_12120009 = current_12120008.body.nodes[chckIndx(0, 0, (current_12120008.body.nodes != null ? current_12120008.body.nodes.length : 0)+0-1)-0];
        var oldpos_12120010 = current_12120008.pos;
        current_12120008.pos = 0;
        var activation_12120011 = new_activation_10480499(blk_12120006);
        L1: do {
          var each_12120018 = null;
          var i_12146376 = 0;
          var l_12146377 = (self_12120005.nodes != null ? self_12120005.nodes.length : 0);
          L2: do {
              L3: while (true) {
              if (!(i_12146376 < l_12146377)) break L3;
                each_12120018 = self_12120005.nodes[chckIndx(i_12146376, 0, (self_12120005.nodes != null ? self_12120005.nodes.length : 0)+0-1)-0];
                current_12120008.body.nodes[chckIndx(0, 0, (current_12120008.body.nodes != null ? current_12120008.body.nodes.length : 0)+0-1)-0] = each_12120018;
                result_12120004 = eval_10630590(activation_12120011, spry_12120003);
                reset_10485024(activation_12120011);
                if (current_12120008.returned) {
                current_12120008.body.nodes[chckIndx(0, 0, (current_12120008.body.nodes != null ? current_12120008.body.nodes.length : 0)+0-1)-0] = orig_12120009;
                current_12120008.pos = oldpos_12120010;
                break BeforeRet;
                }
                
                if (value_9995455(result_12120004)) {
                add_10196176(return_blok_12120007, each_12120018);
                }
                
                current_12120008.pos = 0;
                i_12146376 = addInt(i_12146376, 1);
                if (!(((self_12120005.nodes != null ? self_12120005.nodes.length : 0) == l_12146377))) {
                failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        current_12120008.body.nodes[chckIndx(0, 0, (current_12120008.body.nodes != null ? current_12120008.body.nodes.length : 0)+0-1)-0] = orig_12120009;
        current_12120008.pos = oldpos_12120010;
        result_12120004 = return_blok_12120007;
        break BeforeRet;
      } while (false);

      return result_12120004;

    }
    function HEX3Aanonymous_12125001(spry_12125003) {
      var result_12125004 = null;

      BeforeRet: do {
        var blk_12125005 = eval_arg_infix_10625109(spry_12125003);
        var sum_12125006 = 0;
        var sum2_12125007 = 0.0;
        var found_float_12125008 = false;
        L1: do {
          var each_12125015 = null;
          var i_12146382 = 0;
          var l_12146383 = (blk_12125005.nodes != null ? blk_12125005.nodes.length : 0);
          L2: do {
              L3: while (true) {
              if (!(i_12146382 < l_12146383)) break L3;
                each_12125015 = blk_12125005.nodes[chckIndx(i_12146382, 0, (blk_12125005.nodes != null ? blk_12125005.nodes.length : 0)+0-1)-0];
                if (isObj(each_12125015.m_type, NTI9971170)) {
                sum_12125006 = addInt(sum_12125006, each_12125015.value);
                }
                else {
                if (isObj(each_12125015.m_type, NTI9971173)) {
                found_float_12125008 = true;
                sum2_12125007 = (sum2_12125007 + each_12125015.value);
                }
                else {
                raise_runtime_exception_9971245(makeNimstrLit("Block contained something other than an int or float, can not sum."));
                }
                }
                i_12146382 = addInt(i_12146382, 1);
                if (!(((blk_12125005.nodes != null ? blk_12125005.nodes.length : 0) == l_12146383))) {
                failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (found_float_12125008) {
        result_12125004 = new_value_10195941((sum2_12125007 + sum_12125006));
        break BeforeRet;
        }
        else {
          result_12125004 = new_value_10195909(sum_12125006);
          break BeforeRet;
        }
        
      } while (false);

      return result_12125004;

    }
    function HEX3Aanonymous_12130001(spry_12130003) {
      var result_12130004 = null;

      BeforeRet: do {
        var self_12130005 = eval_arg_infix_10625109(spry_12130003);
        var return_blok_12130006 = new_blok_10195717();
        L1: do {
          var each_12130013 = null;
          var i_12146387 = 0;
          var l_12146388 = (self_12130005.nodes != null ? self_12130005.nodes.length : 0);
          L2: do {
              L3: while (true) {
              if (!(i_12146387 < l_12146388)) break L3;
                each_12130013 = self_12130005.nodes[chckIndx(i_12146387, 0, (self_12130005.nodes != null ? self_12130005.nodes.length : 0)+0-1)-0];
                if ((8 < each_12130013.value)) {
                add_10196176(return_blok_12130006, each_12130013);
                }
                
                i_12146387 = addInt(i_12146387, 1);
                if (!(((self_12130005.nodes != null ? self_12130005.nodes.length : 0) == l_12146388))) {
                failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        result_12130004 = return_blok_12130006;
        break BeforeRet;
      } while (false);

      return result_12130004;

    }

    make_word_10625187(spry_12036063, makeNimstrLit("first"), new_prim_meth_10480247(HEX3Aanonymous_12040001));
    make_word_10625187(spry_12036063, makeNimstrLit("last"), new_prim_meth_10480247(HEX3Aanonymous_12045001));
    make_word_10625187(spry_12036063, makeNimstrLit("reset"), new_prim_meth_10480247(HEX3Aanonymous_12050001));
    make_word_10625187(spry_12036063, makeNimstrLit("pos"), new_prim_meth_10480247(HEX3Aanonymous_12055001));
    make_word_10625187(spry_12036063, makeNimstrLit("pos:"), new_prim_meth_10480247(HEX3Aanonymous_12060001));
    make_word_10625187(spry_12036063, makeNimstrLit("read"), new_prim_meth_10480247(HEX3Aanonymous_12065001));
    make_word_10625187(spry_12036063, makeNimstrLit("write:"), new_prim_meth_10480247(HEX3Aanonymous_12070001));
    make_word_10625187(spry_12036063, makeNimstrLit("next"), new_prim_meth_10480247(HEX3Aanonymous_12075001));
    make_word_10625187(spry_12036063, makeNimstrLit("prev"), new_prim_meth_10480247(HEX3Aanonymous_12080001));
    make_word_10625187(spry_12036063, makeNimstrLit("end?"), new_prim_meth_10480247(HEX3Aanonymous_12085001));
    make_word_10625187(spry_12036063, makeNimstrLit("newBlock"), new_prim_func_10480185(HEX3Aanonymous_12090001));
    make_word_10625187(spry_12036063, makeNimstrLit("newBlock:"), new_prim_func_10480185(HEX3Aanonymous_12095001));
    make_word_10625187(spry_12036063, makeNimstrLit("fill:"), new_prim_meth_10480247(HEX3Aanonymous_12105001));
    make_word_10625187(spry_12036063, makeNimstrLit("reverse"), new_prim_meth_10480247(HEX3Aanonymous_12110001));
    make_word_10625187(spry_12036063, makeNimstrLit("map:"), new_prim_meth_10480247(HEX3Aanonymous_12115001));
    make_word_10625187(spry_12036063, makeNimstrLit("select:"), new_prim_meth_10480247(HEX3Aanonymous_12120001));
    make_word_10625187(spry_12036063, makeNimstrLit("sum"), new_prim_meth_10480247(HEX3Aanonymous_12125001));
    make_word_10625187(spry_12036063, makeNimstrLit("selectLarger8"), new_prim_meth_10480247(HEX3Aanonymous_12130001));
    eval_root_10475149(spry_12036063, makeNimstrLit("[\x0A    # Collections\x0A    sprydo: = method [:fun\x0A      self reset\x0A      [self end?] whileFalse: [do fun (self next)]\x0A    ]\x0A\x0A    detect: = method [:pred\x0A      self reset\x0A      [self end?] whileFalse: [\x0A        n = (self next)\x0A        do pred n then: [^n]]\x0A      ^nil\x0A    ]\x0A\x0A    spryselect: = method [:pred\x0A      result = clone []\x0A      self reset\x0A      [self end?] whileFalse: [\x0A        n = (self next)\x0A        do pred n then: [result add: n]]\x0A      ^result]\x0A\x0A    spryselectdo: = method [:pred\x0A      result = clone []\x0A      self do: [\x0A        do pred :n then: [result add: n]]\x0A      ^result]\x0A    \x0A    # Return the max value of the extractor block, or default\x0A    max:default: = method [:extractor :default\x0A      self empty? then: [\x0A        ^default\x0A      ] else: [\x0A        max = do $extractor (self first)\x0A        self do: [\x0A          n = do $extractor :each\x0A          n > max then: [max := n]\x0A        ]\x0A        ^max\x0A      ]\x0A    ]\x0A    \x0A    # Find index of first element matching predicate block, or nil.\x0A    findIndex: = method [:predicate\x0A      self reset\x0A      [self end?] whileFalse: [\x0A        n = (self next)\x0A        do $predicate n then: [^(self pos - 1)]\x0A      ]\x0A      ^nil\x0A    ]\x0A]"));

  
}
function add_browser_12136018(spry_12136020) {
    function HEX3Aanonymous_12140001(spry_12140003) {
      var result_12140004 = null;

        result_12140004 = spry_12140003.nilVal;
        echoSpry(toJSStr(print_9996883(eval_arg_10625170(spry_12140003))));

      return result_12140004;

    }
    function HEX3Aanonymous_12145001(spry_12145003) {
      var result_12145004 = null;

        result_12145004 = eval_arg_10625170(spry_12145003);
        echoSpry(toJSStr(HEX24_9975218(result_12145004)));

      return result_12145004;

    }

    make_word_10625187(spry_12136020, makeNimstrLit("echo"), new_prim_func_10480185(HEX3Aanonymous_12140001));
    make_word_10625187(spry_12136020, makeNimstrLit("probe"), new_prim_func_10480185(HEX3Aanonymous_12145001));

  
}
var spry_12146014 = [new_interpreter_10665014()];
add_core_10686081(spry_12146014[0]);
add_extend_11160031(spry_12146014[0]);
add_math_11948214(spry_12146014[0]);
add_oo_11996161(spry_12146014[0]);
add_debug_12006393(spry_12146014[0]);
add_string_12011028(spry_12146014[0]);
add_modules_12026015(spry_12146014[0]);
add_reflect_12027375(spry_12146014[0]);
add_block_12036061(spry_12146014[0]);
add_browser_12136018(spry_12146014[0]);
function spryEval(code_12146392) {
  var result_12146393 = null;

    result_12146393 = toJSStr(HEX24_9975218(eval_root_10475149(spry_12146014[0], (makeNimstrLit("[") || []).concat(cstrToNimstr(code_12146392) || [],makeNimstrLit("]") || []))));

  return result_12146393;

}
function sys_fatal_235018(message_235022) {
    raiseException({message: nimCopy(null, message_235022, NTI112), m_type: NTI6277, parent: null, name: null, trace: null, up: null}, "NilAccessError");

  
}
function chckNilDisp(p_235016, p_235016_Idx) {
    if ((p_235016 == null && p_235016_Idx == 0)) {
    sys_fatal_235018(makeNimstrLit("cannot dispatch; dispatcher is nil"));
    }
    

  
}
function HEX24_9985767(self_9985769) {
  var result_9985770 = null;

    result_9985770 = nimCopy(null, (makeNimstrLit(":") || []).concat(self_9985769.word || []), NTI112);

  return result_9985770;

}
function HEX24_9985750(self_9985752) {
  var result_9985753 = null;

    result_9985753 = nimCopy(null, (makeNimstrLit("\'") || []).concat(self_9985752.word || []), NTI112);

  return result_9985753;

}
function map_9985494(s_9985499, op_9985502) {
  var result_9985504 = null;

    result_9985504 = new Array(chckRange((s_9985499 != null ? s_9985499.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_9985499 != null ? s_9985499.length : 0), 0, 2147483647);++i) {result_9985504[i]=null;}    L1: do {
      var i_9985527 = 0;
      var colontmp__12146629 = 0;
      colontmp__12146629 = (s_9985499 != null ? s_9985499.length : 0);
      var i_12146630 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146630 < colontmp__12146629)) break L3;
            i_9985527 = i_12146630;
            result_9985504[chckIndx(i_9985527, 0, (result_9985504 != null ? result_9985504.length : 0)+0-1)-0] = nimCopy(null, op_9985502(s_9985499[chckIndx(i_9985527, 0, (s_9985499 != null ? s_9985499.length : 0)+0-1)-0]), NTI112);
            i_12146630 = addInt(i_12146630, 1);
          }
      } while(false);
    } while(false);

  return result_9985504;

}
function HEX24_9985469(self_9985472) {
    function HEX3Aanonymous_9985475(n_9985477) {
      var result_9985478 = null;

        result_9985478 = nimCopy(null, HEX24_9975218(n_9985477), NTI112);

      return result_9985478;

    }

  var result_9985473 = null;

    result_9985473 = nimCopy(null, nsuJoinSep(map_9985494(self_9985472, HEX3Aanonymous_9985475), makeNimstrLit(" ")), NTI112);

  return result_9985473;

}
function HEX24_11996085(self_11996087) {
  var result_11996088 = null;

  BeforeRet: do {
    result_11996088 = nimCopy(null, (makeNimstrLit("polymethod [") || []).concat(HEX24_9985469(self_11996087.nodes) || [],makeNimstrLit("]") || []), NTI112);
    break BeforeRet;
  } while (false);

  return result_11996088;

}
function HEX24_10475217(self_10475219) {
  var result_10475220 = null;

  BeforeRet: do {
    result_10475220 = nimCopy(null, (makeNimstrLit("method [") || []).concat(HEX24_9985469(self_10475219.nodes) || [],makeNimstrLit("]") || []), NTI112);
    break BeforeRet;
  } while (false);

  return result_10475220;

}
function HEX24_10475199(self_10475201) {
  var result_10475202 = null;

  BeforeRet: do {
    result_10475202 = nimCopy(null, (makeNimstrLit("func [") || []).concat(HEX24_9985469(self_10475201.nodes) || [],makeNimstrLit("]") || []), NTI112);
    break BeforeRet;
  } while (false);

  return result_10475202;

}
function HEX24_9985801(self_9985803) {
  var result_9985804 = null;

    result_9985804 = nimCopy(null, (makeNimstrLit("[") || []).concat(HEX24_9985469(self_9985803.nodes) || [],makeNimstrLit("]") || []), NTI112);

  return result_9985804;

}
function HEX24_10475235(self_10475237) {
  var result_10475238 = null;

  BeforeRet: do {
    result_10475238 = nimCopy(null, (makeNimstrLit("activation [") || []).concat(HEX24_9975218(self_10475237.body) || [],makeNimstrLit(" ") || [],cstrToNimstr((self_10475237.pos)+"") || [],makeNimstrLit("]") || []), NTI112);
    break BeforeRet;
  } while (false);

  return result_10475238;

}
function HEX24_9985837(self_9985839) {
  var result_9985840 = null;

    result_9985840 = nimCopy(null, (makeNimstrLit("{") || []).concat(HEX24_9985469(self_9985839.nodes) || [],makeNimstrLit("}") || []), NTI112);

  return result_9985840;

}
function HEX24_9985819(self_9985821) {
  var result_9985822 = null;

    result_9985822 = nimCopy(null, (makeNimstrLit("(") || []).concat(HEX24_9985469(self_9985821.nodes) || [],makeNimstrLit(")") || []), NTI112);

  return result_9985822;

}
function HEX24_9985784(self_9985786) {
  var result_9985787 = null;

    result_9985787 = nimCopy(null, (makeNimstrLit(":$") || []).concat(self_9985786.word || []), NTI112);

  return result_9985787;

}
function HEX24_9985682(self_9985684) {
  var result_9985685 = null;

    result_9985685 = nimCopy(null, (makeNimstrLit("@") || []).concat(self_9985684.word || []), NTI112);

  return result_9985685;

}
function HEX24_10475182(self_10475184) {
  var result_10475185 = null;

    result_10475185 = nimCopy(null, makeNimstrLit("primitive-method"), NTI112);

  return result_10475185;

}
function HEX24_10475165(self_10475167) {
  var result_10475168 = null;

    result_10475168 = nimCopy(null, makeNimstrLit("primitive-func"), NTI112);

  return result_10475168;

}
function HEX24_9985855(self_9985857) {
  var result_9985858 = null;

    result_9985858 = nimCopy(null, [], NTI112);
    L1: do {
      var i_9985872 = 0;
      var colontmp__12146633 = 0;
      colontmp__12146633 = subInt((self_9985857.keys != null ? self_9985857.keys.length : 0), 1);
      var res_12146634 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12146634 <= colontmp__12146633)) break L3;
            i_9985872 = res_12146634;
            result_9985858 = nimCopy(null, (result_9985858 || []).concat(self_9985857.keys[chckIndx(i_9985872, 0, (self_9985857.keys != null ? self_9985857.keys.length : 0)+0-1)-0] || [],makeNimstrLit(" ") || [],HEX24_9975218(self_9985857.args[chckIndx(i_9985872, 0, (self_9985857.args != null ? self_9985857.args.length : 0)+0-1)-0]) || []), NTI112);
            res_12146634 = addInt(res_12146634, 1);
          }
      } while(false);
    } while(false);

  return result_9985858;

}
function HEX24_9985336(self_9985338) {
  var result_9985339 = null;

    result_9985339 = nimCopy(null, cstrToNimstr((self_9985338.value)+""), NTI112);

  return result_9985339;

}
function HEX24_9985733(self_9985735) {
  var result_9985736 = null;

    result_9985736 = nimCopy(null, (makeNimstrLit("$@") || []).concat(self_9985735.word || []), NTI112);

  return result_9985736;

}
function HEX24_9985716(self_9985718) {
  var result_9985719 = null;

    result_9985719 = nimCopy(null, (makeNimstrLit("$") || []).concat(HEX24_9975218(self_9985718.module) || [],makeNimstrLit("::") || [],self_9985718.word || []), NTI112);

  return result_9985719;

}
function HEX24_9985699(self_9985701) {
  var result_9985702 = null;

    result_9985702 = nimCopy(null, (makeNimstrLit("$") || []).concat(self_9985701.word || []), NTI112);

  return result_9985702;

}
function HEX24_9985435(self_9985437) {
  var result_9985438 = null;

    result_9985438 = nimCopy(null, makeNimstrLit("false"), NTI112);

  return result_9985438;

}
function HEX24_9985418(self_9985420) {
  var result_9985421 = null;

    result_9985421 = nimCopy(null, makeNimstrLit("true"), NTI112);

  return result_9985421;

}
function HEX24_9985370(self_9985372) {
  var result_9985373 = null;

    rawEcho(makeNimstrLit("repr not available in js"));

  return result_9985373;

}
function nsuToHex(x_9050243, len_9050244) {
  var result_9050245 = null;

    var n_9050247 = x_9050243;
    result_9050245 = nimCopy(null, mnewString(len_9050244), NTI112);
    L1: do {
      var j_9050254 = 0;
      var colontmp__12146644 = 0;
      colontmp__12146644 = subInt(len_9050244, 1);
      var res_12146645 = colontmp__12146644;
      L2: do {
          L3: while (true) {
          if (!(0 <= res_12146645)) break L3;
            j_9050254 = res_12146645;
            result_9050245[chckIndx(j_9050254, 0, (result_9050245 != null ? result_9050245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9050247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            n_9050247 = (n_9050247 >> 4);
            if (((n_9050247 == 0) && (x_9050243 < 0))) {
            n_9050247 = -1;
            }
            
            res_12146645 = subInt(res_12146645, 1);
          }
      } while(false);
    } while(false);

  return result_9050245;

}
function nsuEscape(s_9475097, prefix_9475098, suffix_9475099) {
  var result_9475100 = null;

    result_9475100 = nimCopy(null, mnewString(0), NTI112);
    if (result_9475100 != null) { result_9475100 = (result_9475100).concat(prefix_9475098); } else { result_9475100 = prefix_9475098.slice(); };
    L1: do {
      var c_9475109 = 0;
      var i_12146640 = 0;
      var l_12146641 = (s_9475097 != null ? s_9475097.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_12146640 < l_12146641)) break L3;
            c_9475109 = s_9475097[chckIndx(i_12146640, 0, (s_9475097 != null ? s_9475097.length : 0)+0-1)-0];
            switch (c_9475109) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
              if (result_9475100 != null) { result_9475100 = (result_9475100).concat(makeNimstrLit("\\x")); } else { result_9475100 = makeNimstrLit("\\x"); };
              if (result_9475100 != null) { result_9475100 = (result_9475100).concat(nsuToHex(c_9475109, 2)); } else { result_9475100 = nsuToHex(c_9475109, 2).slice(); };
              break;
            case 92:
              if (result_9475100 != null) { result_9475100 = (result_9475100).concat(makeNimstrLit("\\\\")); } else { result_9475100 = makeNimstrLit("\\\\"); };
              break;
            case 39:
              if (result_9475100 != null) { result_9475100 = (result_9475100).concat(makeNimstrLit("\\\'")); } else { result_9475100 = makeNimstrLit("\\\'"); };
              break;
            case 34:
              if (result_9475100 != null) { result_9475100 = (result_9475100).concat(makeNimstrLit("\\\"")); } else { result_9475100 = makeNimstrLit("\\\""); };
              break;
            default: 
              if (result_9475100 != null) { addChar(result_9475100, c_9475109); } else { result_9475100 = [c_9475109]; };
              break;
            }
            i_12146640 = addInt(i_12146640, 1);
            if (!(((s_9475097 != null ? s_9475097.length : 0) == l_12146641))) {
            failed_assert_impl_102680(makeNimstrLit("iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if (result_9475100 != null) { result_9475100 = (result_9475100).concat(suffix_9475099); } else { result_9475100 = suffix_9475099.slice(); };

  return result_9475100;

}
function HEX24_9985353(self_9985355) {
  var result_9985356 = null;

    result_9985356 = nimCopy(null, nsuEscape(self_9985355.value, makeNimstrLit("\""), makeNimstrLit("\"")), NTI112);

  return result_9985356;

}
function HEX24_9985665(self_9985667) {
  var result_9985668 = null;

    result_9985668 = nimCopy(null, (HEX24_9975218(self_9985667.module) || []).concat(makeNimstrLit("::") || [],self_9985667.word || []), NTI112);

  return result_9985668;

}
function HEX24_9985648(self_9985650) {
  var result_9985651 = null;

    result_9985651 = nimCopy(null, self_9985650.word, NTI112);

  return result_9985651;

}
function HEX24_9985631(self_9985633) {
  var result_9985634 = null;

    result_9985634 = nimCopy(null, self_9985633.word, NTI112);

  return result_9985634;

}
function HEX24_9975221(self_9975223) {
  var result_9975224 = null;

  BeforeRet: do {
    if ((self_9975223.key == null)) {
    result_9975224 = nimCopy(null, (makeNimstrLit("nil = ") || []).concat(HEX24_9975218(self_9975223.val) || []), NTI112);
    break BeforeRet;
    }
    
    if ((self_9975223.val == null)) {
    result_9975224 = nimCopy(null, (HEX24_9975218(self_9975223.key) || []).concat(makeNimstrLit(" = nil") || []), NTI112);
    break BeforeRet;
    }
    
    result_9975224 = nimCopy(null, (HEX24_9975218(self_9975223.key) || []).concat(makeNimstrLit(" = ") || [],HEX24_9975218(self_9975223.val) || []), NTI112);
  } while (false);

  return result_9975224;

}
function HEX24_9985452(self_9985454) {
  var result_9985455 = null;

    result_9985455 = nimCopy(null, makeNimstrLit("nil"), NTI112);

  return result_9985455;

}
function HEX24_9985319(self_9985321) {
  var result_9985322 = null;

    result_9985322 = nimCopy(null, cstrToNimstr((self_9985321.value)+""), NTI112);

  return result_9985322;

}
function HEX24_9975248(self_9975250) {
  var result_9975251 = null;

  BeforeRet: do {
    result_9975251 = nimCopy(null, makeNimstrLit("{"), NTI112);
    var first_9975252 = true;
    L1: do {
      var k_9985289 = null;
      var v_9985290 = null;
      var l_12146658 = len_9975386(self_9975250.bindings);
      L2: do {
        var h_12146660 = 0;
        var colontmp__12146661 = 0;
        colontmp__12146661 = (self_9975250.bindings.data != null ? (self_9975250.bindings.data.length-1) : -1);
        var res_12146662 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12146662 <= colontmp__12146661)) break L4;
              h_12146660 = res_12146662;
              if (is_filled_9797018(self_9975250.bindings.data[chckIndx(h_12146660, 0, (self_9975250.bindings.data != null ? self_9975250.bindings.data.length : 0)+0-1)-0].Field0)) {
              k_9985289 = self_9975250.bindings.data[chckIndx(h_12146660, 0, (self_9975250.bindings.data != null ? self_9975250.bindings.data.length : 0)+0-1)-0].Field1;
              v_9985290 = self_9975250.bindings.data[chckIndx(h_12146660, 0, (self_9975250.bindings.data != null ? self_9975250.bindings.data.length : 0)+0-1)-0].Field2;
              if (first_9975252) {
              if (result_9975251 != null) { result_9975251 = (result_9975251).concat(HEX24_9975218(v_9985290)); } else { result_9975251 = HEX24_9975218(v_9985290).slice(); };
              first_9975252 = false;
              }
              else {
              if (result_9975251 != null) { result_9975251 = (result_9975251).concat((makeNimstrLit(" ") || []).concat(HEX24_9975218(v_9985290) || [])); } else { result_9975251 = (makeNimstrLit(" ") || []).concat(HEX24_9975218(v_9985290) || []).slice(); };
              }
              
              if (!((len_9975386(self_9975250.bindings) == l_12146658))) {
              failed_assert_impl_102680(makeNimstrLit("tables.nim(664, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_12146662 = addInt(res_12146662, 1);
            }
        } while(false);
      } while(false);
    } while(false);
    result_9975251 = nimCopy(null, (result_9975251 || []).concat(makeNimstrLit("}") || []), NTI112);
    break BeforeRet;
  } while (false);

  return result_9975251;

}
function HEX24_9975181(self_9975183) {
  var result_9975184 = null;

    rawEcho(makeNimstrLit("repr not available in js"));

  return result_9975184;

}
function HEX24_9975218(self_9975183) {
  var result_9975220 = null;

  BeforeRet: do {
    chckNilDisp(self_9975183);
    if (isObj(self_9975183.m_type, NTI9971151)) {
    result_9975220 = HEX24_9985767(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971142)) {
    result_9975220 = HEX24_9985750(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI11996017)) {
    result_9975220 = HEX24_11996085(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI10475117)) {
    result_9975220 = HEX24_10475217(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI10475114)) {
    result_9975220 = HEX24_10475199(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971200)) {
    result_9975220 = HEX24_9985801(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI10475119)) {
    result_9975220 = HEX24_10475235(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971198)) {
    result_9975220 = HEX24_9985837(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971196)) {
    result_9975220 = HEX24_9985819(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971160)) {
    result_9975220 = HEX24_9985784(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971149)) {
    result_9975220 = HEX24_9985682(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI10475112)) {
    result_9975220 = HEX24_10475182(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI10475109)) {
    result_9975220 = HEX24_10475165(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971162)) {
    result_9975220 = HEX24_9985855(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971173)) {
    result_9975220 = HEX24_9985336(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971158)) {
    result_9975220 = HEX24_9985733(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971155)) {
    result_9975220 = HEX24_9985716(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971153)) {
    result_9975220 = HEX24_9985699(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971186)) {
    result_9975220 = HEX24_9985435(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971184)) {
    result_9975220 = HEX24_9985418(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971179)) {
    result_9975220 = HEX24_9985370(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971176)) {
    result_9975220 = HEX24_9985353(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971146)) {
    result_9975220 = HEX24_9985665(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971144)) {
    result_9975220 = HEX24_9985648(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971135)) {
    result_9975220 = HEX24_9985631(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971228)) {
    result_9975220 = HEX24_9975221(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971188)) {
    result_9975220 = HEX24_9985452(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971170)) {
    result_9975220 = HEX24_9985319(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971203)) {
    result_9975220 = HEX24_9975248(self_9975183);
    break BeforeRet;
    }
    else {
    if (isObj(self_9975183.m_type, NTI9971132)) {
    result_9975220 = HEX24_9975181(self_9975183);
    break BeforeRet;
    }
    }}}}}}}}}}}}}}}}}}}}}}}}}}}}}
  } while (false);

  return result_9975220;

}
function hash_9735440(x_9735443) {
  var result_9735444 = 0;

    result_9735444 = x_9735443;

  return result_9735444;

}
function hash_9735433(x_9735435) {
  var result_9735436 = 0;

    var y_9735437 = [(x_9735435 + 0.0)];
    result_9735436 = hash_9735440(y_9735437[0]);

  return result_9735436;

}
function hash_9985989(self_9985991) {
  var result_9985992 = 0;

    result_9985992 = hash_9735433(self_9985991.value);

  return result_9985992;

}
function hash_9985927(self_9985929) {
  var result_9985930 = 0;

    result_9985930 = hash_9775214(self_9985929.word);

  return result_9985930;

}
function hash_9986006(self_9986008) {
  var result_9986009 = 0;

    result_9986009 = hash_9735440(self_9986008.value);

  return result_9986009;

}
function HEX21HEX26_9731031(h_9731033, val_9731034) {
  var result_9731035 = 0;

    var h_9731036 = (h_9731033 >>> 0);
    var val_9731037 = (val_9731034 >>> 0);
    var res_9731038 = ((h_9731036 + val_9731037) >>> 0);
    res_9731038 = ((res_9731038 + (res_9731038 << 10)) >>> 0);
    res_9731038 = (res_9731038 ^ ((res_9731038 >>> 0) >>> 6));
    result_9731035 = (res_9731038|0);

  return result_9731035;

}
function HEX21HEX24_9731066(h_9731068) {
  var result_9731069 = 0;

    var h_9731070 = (h_9731068 >>> 0);
    var res_9731078 = ((h_9731070 + (h_9731070 << 3)) >>> 0);
    res_9731078 = (res_9731078 ^ ((res_9731078 >>> 0) >>> 11));
    res_9731078 = ((res_9731078 + (res_9731078 << 15)) >>> 0);
    result_9731069 = (res_9731078|0);

  return result_9731069;

}
function hash_9986063(self_9986065) {
  var result_9986066 = 0;

    var h_9986070 = -2032395042;
    L1: do {
      var b_9995214 = null;
      var l_12146676 = len_9975386(self_9986065.bindings);
      L2: do {
        var h_12146678 = 0;
        var colontmp__12146679 = 0;
        colontmp__12146679 = (self_9986065.bindings.data != null ? (self_9986065.bindings.data.length-1) : -1);
        var res_12146680 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12146680 <= colontmp__12146679)) break L4;
              h_12146678 = res_12146680;
              if (is_filled_9797018(self_9986065.bindings.data[chckIndx(h_12146678, 0, (self_9986065.bindings.data != null ? self_9986065.bindings.data.length : 0)+0-1)-0].Field0)) {
              b_9995214 = self_9986065.bindings.data[chckIndx(h_12146678, 0, (self_9986065.bindings.data != null ? self_9986065.bindings.data.length : 0)+0-1)-0].Field2;
              h_9986070 = HEX21HEX26_9731031(HEX21HEX26_9731031(h_9986070, hash_9985903(b_9995214.key)), hash_9985903(b_9995214.val));
              if (!((len_9975386(self_9986065.bindings) == l_12146676))) {
              failed_assert_impl_102680(makeNimstrLit("tables.nim(728, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_12146680 = addInt(res_12146680, 1);
            }
        } while(false);
      } while(false);
    } while(false);
    result_9986066 = HEX21HEX24_9731066(h_9986070);

  return result_9986066;

}
function hash_9735214(x_9735216, x_9735216_Idx) {
  var result_9735217 = 0;

          if (typeof x_9735216 == "object") {
        if ("_NimID" in x_9735216)
          result_9735217 = x_9735216["_NimID"];
        else {
          result_9735217 = ++object_id_9735031[0];
          x_9735216["_NimID"] = result_9735217;
        }
      }
    

  return result_9735217;

}
function hash_9986046(self_9986048) {
  var result_9986049 = 0;

    result_9986049 = hash_9735214(self_9986048.value[0], self_9986048.value[1]);

  return result_9986049;

}
function hash_9986027(self_9986029) {
  var result_9986030 = 0;

    result_9986030 = hash_9775214(self_9986029.value);

  return result_9986030;

}
function hash_9995394(self_9995396) {
  var result_9995397 = 0;

    result_9995397 = hash_9735440(1);

  return result_9995397;

}
function hash_9995601(x_9995605) {
  var result_9995606 = 0;

    L1: do {
      var a_9995831 = null;
      var i_12146690 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146690 < (x_9995605 != null ? x_9995605.length : 0))) break L3;
            a_9995831 = x_9995605[chckIndx(i_12146690, 0, (x_9995605 != null ? x_9995605.length : 0)+0-1)-0];
            result_9995606 = HEX21HEX26_9731031(result_9995606, hash_9985903(a_9995831));
            i_12146690 = addInt(i_12146690, 1);
          }
      } while(false);
    } while(false);
    result_9995606 = HEX21HEX24_9731066(result_9995606);

  return result_9995606;

}
function hash_9995595(self_9995597) {
  var result_9995598 = 0;

    result_9995598 = hash_9995601(self_9995597.nodes);

  return result_9995598;

}
function hash_9995547(self_9995549) {
  var result_9995550 = 0;

    result_9995550 = hash_9735440(1);

  return result_9995550;

}
function hash_9995416(self_9995418) {
  var result_9995419 = 0;

    result_9995419 = hash_9735440(0);

  return result_9995419;

}
function hash_9985886(self_9985888) {
  var result_9985889 = 0;

    raise_runtime_exception_9971245(makeNimstrLit("Nodes need to implement hash"));

  return result_9985889;

}
function hash_9985903(self_9985888) {
  var result_9985905 = 0;

  BeforeRet: do {
    chckNilDisp(self_9985888);
    if (isObj(self_9985888.m_type, NTI9971173)) {
    result_9985905 = hash_9985989(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971135)) {
    result_9985905 = hash_9985927(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971170)) {
    result_9985905 = hash_9986006(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971203)) {
    result_9985905 = hash_9986063(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971179)) {
    result_9985905 = hash_9986046(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971176)) {
    result_9985905 = hash_9986027(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971184)) {
    result_9985905 = hash_9995394(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971200)) {
    result_9985905 = hash_9995595(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971188)) {
    result_9985905 = hash_9995547(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971186)) {
    result_9985905 = hash_9995416(self_9985888);
    break BeforeRet;
    }
    else {
    if (isObj(self_9985888.m_type, NTI9971132)) {
    result_9985905 = hash_9985886(self_9985888);
    break BeforeRet;
    }
    }}}}}}}}}}
  } while (false);

  return result_9985905;

}
function HEX3DHEX3D_9995493(self_9995495, other_9995496) {
  var result_9995497 = false;

    result_9995497 = true;

  return result_9995497;

}
function HEX3DHEX3D_9995475(self_9995477, other_9995478) {
  var result_9995479 = false;

    result_9995479 = true;

  return result_9995479;

}
function HEX3DHEX3D_9995529(self_9995531, other_9995532) {
  var result_9995533 = false;

    result_9995533 = false;

  return result_9995533;

}
function HEX3DHEX3D_9995511(self_9995513, other_9995514) {
  var result_9995515 = false;

    result_9995515 = false;

  return result_9995515;

}
function HEX3DHEX3D_9995269(self_9995271, other_9995272) {
    var Tmp1;

  var result_9995273 = false;

    if (!isObj(other_9995272.m_type, NTI9971173)) Tmp1 = false; else {      Tmp1 = (self_9995271.value == other_9995272.value);    }    result_9995273 = Tmp1;

  return result_9995273;

}
function HEX3DHEX3D_9995228(self_9995230, other_9995231) {
    var Tmp1;

  var result_9995232 = false;

    if (!isObj(other_9995231.m_type, NTI9971170)) Tmp1 = false; else {      Tmp1 = (self_9995230.value == other_9995231.value);    }    result_9995232 = Tmp1;

  return result_9995232;

}
function HEX3DHEX3D_9985946(self_9985948, other_9985949) {
    var Tmp1;

  var result_9985950 = false;

    if (!isObj(other_9985949.m_type, NTI9971135)) Tmp1 = false; else {      Tmp1 = eqStrings(self_9985948.word, other_9985949.word);    }    result_9985950 = Tmp1;

  return result_9985950;

}
function HEX3DHEX3D_9995873(x_9995877, y_9995879) {
  var result_9995880 = false;

  BeforeRet: do {
    var same_object_9996401 = false;
    same_object_9996401 = x_9995877 === y_9995879
    if (same_object_9996401) {
    result_9995880 = true;
    break BeforeRet;
    }
    
    if (!(((x_9995877 != null ? x_9995877.length : 0) == (y_9995879 != null ? y_9995879.length : 0)))) {
    result_9995880 = false;
    break BeforeRet;
    }
    
    L1: do {
      var i_9996824 = 0;
      var colontmp__12146697 = 0;
      colontmp__12146697 = subInt((x_9995877 != null ? x_9995877.length : 0), 1);
      var res_12146698 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12146698 <= colontmp__12146697)) break L3;
            i_9996824 = res_12146698;
            if (!(HEX3DHEX3D_9985924(x_9995877[chckIndx(i_9996824, 0, (x_9995877 != null ? x_9995877.length : 0)+0-1)-0], y_9995879[chckIndx(i_9996824, 0, (y_9995879 != null ? y_9995879.length : 0)+0-1)-0]))) {
            result_9995880 = false;
            break BeforeRet;
            }
            
            res_12146698 = addInt(res_12146698, 1);
          }
      } while(false);
    } while(false);
    result_9995880 = true;
    break BeforeRet;
  } while (false);

  return result_9995880;

}
function HEX3DHEX3D_9995858(self_9995860, other_9995861) {
    var Tmp1;

  var result_9995862 = false;

    if (!isObj(other_9995861.m_type, NTI9971200)) Tmp1 = false; else {      Tmp1 = HEX3DHEX3D_9995873(self_9995860.nodes, other_9995861.nodes);    }    result_9995862 = Tmp1;

  return result_9995862;

}
function HEX3DHEX3D_9995569(self_9995571, other_9995572) {
  var result_9995573 = false;

    result_9995573 = isObj(other_9995572.m_type, NTI9971188);

  return result_9995573;

}
function HEX3DHEX3D_9995353(self_9995355, other_9995356) {
    var Tmp1;

  var result_9995357 = false;

    if (!isObj(other_9995356.m_type, NTI9971179)) Tmp1 = false; else {      Tmp1 = (self_9995355.value[0] == other_9995356.value[0] && self_9995355.value[1] == other_9995356.value[1]);    }    result_9995357 = Tmp1;

  return result_9995357;

}
function HEX3DHEX3D_9995310(self_9995312, other_9995313) {
    var Tmp1;

  var result_9995314 = false;

    if (!isObj(other_9995313.m_type, NTI9971176)) Tmp1 = false; else {      Tmp1 = eqStrings(self_9995312.value, other_9995313.value);    }    result_9995314 = Tmp1;

  return result_9995314;

}
function HEX3DHEX3D_9985906(self_9985908, other_9985909) {
  var result_9985910 = false;

    raise_runtime_exception_9971245(makeNimstrLit("Nodes need to implement =="));

  return result_9985910;

}
function HEX3DHEX3D_9985924(self_9985908, other_9985909) {
  var result_9985926 = false;

  BeforeRet: do {
    chckNilDisp(self_9985908);
    chckNilDisp(other_9985909);
    if ((isObj(self_9985908.m_type, NTI9971186) && isObj(other_9985909.m_type, NTI9971186))) {
    result_9985926 = HEX3DHEX3D_9995493(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971184) && isObj(other_9985909.m_type, NTI9971184))) {
    result_9985926 = HEX3DHEX3D_9995475(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971186) && isObj(other_9985909.m_type, NTI9971184))) {
    result_9985926 = HEX3DHEX3D_9995529(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971184) && isObj(other_9985909.m_type, NTI9971186))) {
    result_9985926 = HEX3DHEX3D_9995511(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971173) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995269(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971170) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995228(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971135) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9985946(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971200) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995858(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971188) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995569(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971179) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995353(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971176) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9995310(self_9985908, other_9985909);
    break BeforeRet;
    }
    else {
    if ((isObj(self_9985908.m_type, NTI9971132) && isObj(other_9985909.m_type, NTI9971132))) {
    result_9985926 = HEX3DHEX3D_9985906(self_9985908, other_9985909);
    break BeforeRet;
    }
    }}}}}}}}}}}
  } while (false);

  return result_9985926;

}
function value_9995458(self_9995460) {
  var result_9995461 = false;

    result_9995461 = false;

  return result_9995461;

}
function value_9995438(self_9995440) {
  var result_9995441 = false;

    result_9995441 = true;

  return result_9995441;

}
function value_9995455(self_9995440) {
  var result_9995457 = false;

  BeforeRet: do {
    chckNilDisp(self_9995440);
    if (isObj(self_9995440.m_type, NTI9971186)) {
    result_9995457 = value_9995458(self_9995440);
    break BeforeRet;
    }
    else {
    if (isObj(self_9995440.m_type, NTI9971182)) {
    result_9995457 = value_9995438(self_9995440);
    break BeforeRet;
    }
    }
  } while (false);

  return result_9995457;

}
function print_9996904(self_9996907) {
    function HEX3Aanonymous_9996910(n_9996912) {
      var result_9996913 = null;

        result_9996913 = nimCopy(null, print_9996883(n_9996912), NTI112);

      return result_9996913;

    }

  var result_9996908 = null;

    result_9996908 = nimCopy(null, nsuJoinSep(map_9985494(self_9996907, HEX3Aanonymous_9996910), makeNimstrLit(" ")), NTI112);

  return result_9996908;

}
function print_9996952(self_9996954) {
  var result_9996955 = null;

    result_9996955 = nimCopy(null, print_9996904(self_9996954.nodes), NTI112);

  return result_9996955;

}
function print_9996886(self_9996888) {
  var result_9996889 = null;

    result_9996889 = nimCopy(null, self_9996888.value, NTI112);

  return result_9996889;

}
function print_9996866(self_9996868) {
  var result_9996869 = null;

    result_9996869 = nimCopy(null, HEX24_9975218(self_9996868), NTI112);

  return result_9996869;

}
function print_9996883(self_9996868) {
  var result_9996885 = null;

  BeforeRet: do {
    chckNilDisp(self_9996868);
    if (isObj(self_9996868.m_type, NTI9971200)) {
    result_9996885 = print_9996952(self_9996868);
    break BeforeRet;
    }
    else {
    if (isObj(self_9996868.m_type, NTI9971176)) {
    result_9996885 = print_9996886(self_9996868);
    break BeforeRet;
    }
    else {
    if (isObj(self_9996868.m_type, NTI9971132)) {
    result_9996885 = print_9996866(self_9996868);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_9996885;

}
function concat_10196528(seqs_10196533) {
  var result_10196535 = null;

    var l_10196537 = 0;
    L1: do {
      var seqitm_10196568 = null;
      var i_12146708 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146708 < (seqs_10196533 != null ? seqs_10196533.length : 0))) break L3;
            seqitm_10196568 = seqs_10196533[chckIndx(i_12146708, 0, (seqs_10196533 != null ? seqs_10196533.length : 0)+0-1)-0];
            l_10196537 = addInt(l_10196537, (seqitm_10196568 != null ? seqitm_10196568.length : 0));
            i_12146708 = addInt(i_12146708, 1);
          }
      } while(false);
    } while(false);
    result_10196535 = new Array(chckRange(l_10196537, 0, 2147483647)); for (var i=0;i<chckRange(l_10196537, 0, 2147483647);++i) {result_10196535[i]=null;}    var i_10196588 = 0;
    L4: do {
      var s_10196594 = null;
      var i_12146715 = 0;
      L5: do {
          L6: while (true) {
          if (!(i_12146715 < (seqs_10196533 != null ? seqs_10196533.length : 0))) break L6;
            s_10196594 = seqs_10196533[chckIndx(i_12146715, 0, (seqs_10196533 != null ? seqs_10196533.length : 0)+0-1)-0];
            L7: do {
              var itm_10205214 = null;
              var i_12146712 = 0;
              var l_12146713 = (s_10196594 != null ? s_10196594.length : 0);
              L8: do {
                  L9: while (true) {
                  if (!(i_12146712 < l_12146713)) break L9;
                    itm_10205214 = s_10196594[chckIndx(i_12146712, 0, (s_10196594 != null ? s_10196594.length : 0)+0-1)-0];
                    result_10196535[chckIndx(i_10196588, 0, (result_10196535 != null ? result_10196535.length : 0)+0-1)-0] = itm_10205214;
                    i_10196588 = addInt(i_10196588, 1);
                    i_12146712 = addInt(i_12146712, 1);
                    if (!(((s_10196594 != null ? s_10196594.length : 0) == l_12146713))) {
                    failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            i_12146715 = addInt(i_12146715, 1);
          }
      } while(false);
    } while(false);

  return result_10196535;

}
function concat_10205313(self_10205315, nodes_10205317) {
  var result_10205318 = null;

    result_10205318 = new_curly_10195829(concat_10196528([nimCopy(null, self_10205315.nodes, NTI10205319), nimCopy(null, nodes_10205317, NTI10205324)]));

  return result_10205318;

}
function concat_10205279(self_10205281, nodes_10205283) {
  var result_10205284 = null;

    result_10205284 = new_paren_10195749(concat_10196528([nimCopy(null, self_10205281.nodes, NTI10205285), nimCopy(null, nodes_10205283, NTI10205290)]));

  return result_10205284;

}
function concat_10196514(self_10196516, nodes_10196518) {
  var result_10196519 = null;

    result_10196519 = new_blok_10195684(concat_10196528([nimCopy(null, self_10196516.nodes, NTI10196520), nimCopy(null, nodes_10196518, NTI10196525)]));

  return result_10196519;

}
function concat_10196476(self_10196478, nodes_10196480) {
  var result_10196481 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Should not happen...") || []).concat(HEX24_9975218(self_10196478) || [],makeNimstrLit(" ") || [],HEX24_9985469(nodes_10196480) || []));

  return result_10196481;

}
function concat_10196511(self_10196478, nodes_10196480) {
  var result_10196513 = null;

  BeforeRet: do {
    chckNilDisp(self_10196478);
    if (isObj(self_10196478.m_type, NTI9971198)) {
    result_10196513 = concat_10205313(self_10196478, nodes_10196480);
    break BeforeRet;
    }
    else {
    if (isObj(self_10196478.m_type, NTI9971196)) {
    result_10196513 = concat_10205279(self_10196478, nodes_10196480);
    break BeforeRet;
    }
    else {
    if (isObj(self_10196478.m_type, NTI9971200)) {
    result_10196513 = concat_10196514(self_10196478, nodes_10196480);
    break BeforeRet;
    }
    else {
    if (isObj(self_10196478.m_type, NTI9971192)) {
    result_10196513 = concat_10196476(self_10196478, nodes_10196480);
    break BeforeRet;
    }
    }}}
  } while (false);

  return result_10196513;

}
function clone_10210535(self_10210537) {
  var result_10210538 = null;

    result_10210538 = new_value_10195973(self_10210537.value);

  return result_10210538;

}
function clone_10210503(self_10210505) {
  var result_10210506 = null;

    result_10210506 = self_10210505;

  return result_10210506;

}
function new_map_10125657(bindings_10125666) {
  var result_10125667 = null;

    result_10125667 = new_map_10105045();
    L1: do {
      var key_10125675 = null;
      var binding_10125676 = null;
      var l_12146718 = len_9975386(bindings_10125666);
      L2: do {
        var h_12146720 = 0;
        var colontmp__12146721 = 0;
        colontmp__12146721 = (bindings_10125666.data != null ? (bindings_10125666.data.length-1) : -1);
        var res_12146722 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12146722 <= colontmp__12146721)) break L4;
              h_12146720 = res_12146722;
              if (is_filled_9797018(bindings_10125666.data[chckIndx(h_12146720, 0, (bindings_10125666.data != null ? bindings_10125666.data.length : 0)+0-1)-0].Field0)) {
              key_10125675 = bindings_10125666.data[chckIndx(h_12146720, 0, (bindings_10125666.data != null ? bindings_10125666.data.length : 0)+0-1)-0].Field1;
              binding_10125676 = bindings_10125666.data[chckIndx(h_12146720, 0, (bindings_10125666.data != null ? bindings_10125666.data.length : 0)+0-1)-0].Field2;
              make_binding_10021643(result_10125667, key_10125675, binding_10125676.val);
              if (!((len_9975386(bindings_10125666) == l_12146718))) {
              failed_assert_impl_102680(makeNimstrLit("tables.nim(664, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_12146722 = addInt(res_12146722, 1);
            }
        } while(false);
      } while(false);
    } while(false);

  return result_10125667;

}
function clone_10210552(self_10210554) {
  var result_10210555 = null;

    result_10210555 = new_map_10125657(self_10210554.bindings);

  return result_10210555;

}
function clone_10210603(self_10210605) {
  var result_10210606 = null;

    result_10210606 = new_curly_10195829(self_10210605.nodes);

  return result_10210606;

}
function clone_10210586(self_10210588) {
  var result_10210589 = null;

    result_10210589 = new_paren_10195749(self_10210588.nodes);

  return result_10210589;

}
function clone_10210569(self_10210571) {
  var result_10210572 = null;

    result_10210572 = new_blok_10195684(self_10210571.nodes);

  return result_10210572;

}
function clone_10210483(self_10210485) {
  var result_10210486 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Should not happen...") || []).concat(HEX24_9975218(self_10210485) || []));

  return result_10210486;

}
function clone_10210500(self_10210485) {
  var result_10210502 = null;

  BeforeRet: do {
    chckNilDisp(self_10210485);
    if (isObj(self_10210485.m_type, NTI9971176)) {
    result_10210502 = clone_10210535(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971168)) {
    result_10210502 = clone_10210503(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971203)) {
    result_10210502 = clone_10210552(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971198)) {
    result_10210502 = clone_10210603(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971196)) {
    result_10210502 = clone_10210586(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971200)) {
    result_10210502 = clone_10210569(self_10210485);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210485.m_type, NTI9971132)) {
    result_10210502 = clone_10210483(self_10210485);
    break BeforeRet;
    }
    }}}}}}
  } while (false);

  return result_10210502;

}
function nsuStartsWith(s_9275016, prefix_9275017) {
            var Tmp3;

  var result_9275018 = false;

  BeforeRet: do {
    var i_9275020 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          if (((prefix_9275017 != null ? prefix_9275017.length : 0) <= i_9275020)) {
          result_9275018 = true;
          break BeforeRet;
          }
          
            if (((s_9275016 != null ? s_9275016.length : 0) <= i_9275020)) Tmp3 = true; else {              Tmp3 = !((s_9275016[chckIndx(i_9275020, 0, (s_9275016 != null ? s_9275016.length : 0)+0-1)-0] == prefix_9275017[chckIndx(i_9275020, 0, (prefix_9275017 != null ? prefix_9275017.length : 0)+0-1)-0]));            }          if (Tmp3) {
          result_9275018 = false;
          break BeforeRet;
          }
          
          i_9275020 = addInt(i_9275020, 1);
        }
    } while(false);
  } while (false);

  return result_9275018;

}
function parse_hex_9160019(s_9160022, number_9160024, number_9160024_Idx, start_9160025, max_len_9160026) {
    var Tmp1;

  var result_9160027 = 0;

    var i_9160028 = start_9160025;
    var output_9160029 = 0;
    var found_digit_9160030 = false;
    if ((max_len_9160026 == 0)) {
    Tmp1 = (s_9160022 != null ? s_9160022.length : 0);
    }
    else {
    Tmp1 = addInt(i_9160028, max_len_9160026);
    }
    
    var last_9160031 = nimMin((s_9160022 != null ? s_9160022.length : 0), Tmp1);
    if ((((addInt(i_9160028, 1) < last_9160031) && (s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0] == 48)) && (ConstSet5[s_9160022[chckIndx(addInt(i_9160028, 1), 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0]] != undefined))) {
    i_9160028 = addInt(i_9160028, 2);
    }
    else {
    if (((i_9160028 < last_9160031) && (s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0] == 35))) {
    i_9160028 = addInt(i_9160028, 1);
    }
    }
    L2: do {
        L3: while (true) {
        if (!(i_9160028 < last_9160031)) break L3;
          switch (s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0]) {
          case 95:
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            output_9160029 = ((output_9160029 << 4) | subInt(s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0], 48));
            found_digit_9160030 = true;
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
            output_9160029 = ((output_9160029 << 4) | addInt(subInt(s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0], 97), 10));
            found_digit_9160030 = true;
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
            output_9160029 = ((output_9160029 << 4) | addInt(subInt(s_9160022[chckIndx(i_9160028, 0, (s_9160022 != null ? s_9160022.length : 0)+0-1)-0], 65), 10));
            found_digit_9160030 = true;
            break;
          default: 
            break L2;
            break;
          }
          i_9160028 = addInt(i_9160028, 1);
        }
    } while(false);
    if (found_digit_9160030) {
    number_9160024[number_9160024_Idx] = output_9160029;
    result_9160027 = subInt(i_9160028, start_9160025);
    }
    

  return result_9160027;

}
function nsuEndsWith(s_9295017, suffix_9295018) {
          var Tmp3;

  var result_9295019 = false;

  BeforeRet: do {
    var i_9295021 = 0;
    var j_9295022 = subInt((s_9295017 != null ? s_9295017.length : 0), (suffix_9295018 != null ? suffix_9295018.length : 0));
    L1: do {
        L2: while (true) {
          if (!(0 <= addInt(i_9295021, j_9295022))) Tmp3 = false; else {            Tmp3 = (addInt(i_9295021, j_9295022) < (s_9295017 != null ? s_9295017.length : 0));          }        if (!Tmp3) break L2;
          if (!((s_9295017[chckIndx(addInt(i_9295021, j_9295022), 0, (s_9295017 != null ? s_9295017.length : 0)+0-1)-0] == suffix_9295018[chckIndx(i_9295021, 0, (suffix_9295018 != null ? suffix_9295018.length : 0)+0-1)-0]))) {
          result_9295019 = false;
          break BeforeRet;
          }
          
          i_9295021 = addInt(i_9295021, 1);
        }
    } while(false);
    if (((suffix_9295018 != null ? suffix_9295018.length : 0) <= i_9295021)) {
    result_9295019 = true;
    break BeforeRet;
    }
    
  } while (false);

  return result_9295019;

}
function nsuUnescape(s_9475129, prefix_9475130, suffix_9475131) {
  var result_9475132 = null;

    result_9475132 = nimCopy(null, mnewString(0), NTI112);
    var i_9475133 = (prefix_9475130 != null ? prefix_9475130.length : 0);
    if (!(nsuStartsWith(s_9475129, prefix_9475130))) {
    raiseException({message: (makeNimstrLit("String does not start with: ") || []).concat(prefix_9475130 || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          if ((subInt((s_9475129 != null ? s_9475129.length : 0), (suffix_9475131 != null ? suffix_9475131.length : 0)) <= i_9475133)) {
          break L1;
          }
          
          if ((s_9475129[chckIndx(i_9475133, 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0] == 92)) {
          if (((s_9475129 != null ? s_9475129.length : 0) <= addInt(i_9475133, 1))) {
          if (result_9475132 != null) { addChar(result_9475132, 92); } else { result_9475132 = [92]; };
          break L1;
          }
          
          switch (s_9475129[chckIndx(addInt(i_9475133, 1), 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0]) {
          case 120:
            i_9475133 = addInt(i_9475133, 2);
            var c_9490007 = [0];
            i_9475133 = addInt(i_9475133, parse_hex_9160019(s_9475129, c_9490007, 0, i_9475133, 2));
            if (result_9475132 != null) { addChar(result_9475132, chckRange(c_9490007[0], 0, 255)); } else { result_9475132 = [chckRange(c_9490007[0], 0, 255)]; };
            i_9475133 = subInt(i_9475133, 2);
            break;
          case 92:
            if (result_9475132 != null) { addChar(result_9475132, 92); } else { result_9475132 = [92]; };
            break;
          case 39:
            if (result_9475132 != null) { addChar(result_9475132, 39); } else { result_9475132 = [39]; };
            break;
          case 34:
            if (result_9475132 != null) { addChar(result_9475132, 34); } else { result_9475132 = [34]; };
            break;
          default: 
            if (result_9475132 != null) { result_9475132 = (result_9475132).concat((makeNimstrLit("\\") || []).concat([s_9475129[chckIndx(addInt(i_9475133, 1), 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0]])); } else { result_9475132 = (makeNimstrLit("\\") || []).concat([s_9475129[chckIndx(addInt(i_9475133, 1), 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0]]).slice(); };
            break;
          }
          i_9475133 = addInt(i_9475133, 2);
          }
          else {
            if (result_9475132 != null) { addChar(result_9475132, s_9475129[chckIndx(i_9475133, 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0]); } else { result_9475132 = [s_9475129[chckIndx(i_9475133, 0, (s_9475129 != null ? s_9475129.length : 0)+0-1)-0]]; };
            i_9475133 = addInt(i_9475133, 1);
          }
          
        }
    } while(false);
    if (!(nsuEndsWith(s_9475129, suffix_9475131))) {
    raiseException({message: (makeNimstrLit("String does not end in: ") || []).concat(suffix_9475131 || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    

  return result_9475132;

}
function parse_value_10220014(self_10220016, s_10220017) {
      var Tmp1;
      var Tmp2;

  var result_10220018 = null;

      if (!(1 < (s_10220017 != null ? s_10220017.length : 0))) Tmp2 = false; else {        Tmp2 = (s_10220017[chckIndx(0, 0, (s_10220017 != null ? s_10220017.length : 0)+0-1)-0] == 34);      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (HEX5BHEX5D_326029(s_10220017, 1) == 34);      }    if (Tmp1) {
    result_10220018 = new_value_10195973(nsuUnescape(s_10220017, makeNimstrLit("\""), makeNimstrLit("\"")));
    }
    

  return result_10220018;

}
function nsuIsDigitChar(c_8700030) {
  var result_8700031 = false;

  BeforeRet: do {
    result_8700031 = (ConstSet6[c_8700030] != undefined);
    break BeforeRet;
  } while (false);

  return result_8700031;

}
function ten_to_the_power_of_275046(b_275048) {
  var result_275049 = 0.0;

    var b_275050 = b_275048;
    var a_275051 = 1.0000000000000000e+01;
    result_275049 = 1.0000000000000000e+00;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          if (((b_275050 & 1) == 1)) {
          result_275049 = (result_275049 * a_275051);
          }
          
          b_275050 = (b_275050 >> 1);
          if ((b_275050 == 0)) {
          break L1;
          }
          
          a_275051 = (a_275051 * a_275051);
        }
    } while(false);

  return result_275049;

}
function npuParseFloat(s_780023, number_780025, number_780025_Idx, start_780026) {
  var result_780028 = 0;

    var bf_780029 = [0.0];
    result_780028 = nimParseBiggestFloat(s_780023, bf_780029, 0, start_780026);
    if (!((result_780028 == 0))) {
    number_780025[number_780025_Idx] = bf_780029[0];
    }
    

  return result_780028;

}
function nsuParseFloat(s_9090017) {
      var Tmp1;

  var result_9090018 = [0.0];

    var l_9090020 = npuParseFloat(s_9090017, result_9090018, 0, 0);
      if (!((l_9090020 == (s_9090017 != null ? s_9090017.length : 0)))) Tmp1 = true; else {        Tmp1 = (l_9090020 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_9090017 || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    

  return result_9090018[0];

}
function is_nim_exception_156082() {
    return lastJSError && lastJSError.m_type;

  
}
function parse_value_10215014(self_10215016, s_10215017) {
      var Tmp1;
    var Tmp3;

  var result_10215018 = null;

  BeforeRet: do {
      if (!(0 < (s_10215017 != null ? s_10215017.length : 0))) Tmp1 = false; else {        Tmp1 = ((nsuIsDigitChar(s_10215017[chckIndx(0, 0, (s_10215017 != null ? s_10215017.length : 0)+0-1)-0]) || (s_10215017[chckIndx(0, 0, (s_10215017 != null ? s_10215017.length : 0)+0-1)-0] == 43)) || (s_10215017[chckIndx(0, 0, (s_10215017 != null ? s_10215017.length : 0)+0-1)-0] == 45));      }    if (Tmp1) {
++excHandler;
    Tmp3 = framePtr;
    try {
    result_10215018 = new_value_10195941(nsuParseFloat(s_10215017));
    break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI6243))) {
    result_10215018 = null;
    break BeforeRet;
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp3;
    }
    }
    
  } while (false);

  return result_10215018;

}
function integer_out_of_range_error_700049() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");

  
}
function raw_parse_int_705201(s_705203, b_705205, b_705205_Idx, start_705206) {
      var Tmp1;
          var Tmp4;
      var Tmp7;

  var result_705208 = 0;

    var sign_705209 = -1;
    var i_705210 = start_705206;
    if ((i_705210 < (s_705203 != null ? s_705203.length : 0))) {
    if ((s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0] == 43)) {
    i_705210 += 1;
    }
    else {
    if ((s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0] == 45)) {
    i_705210 += 1;
    sign_705209 = 1;
    }
    }
    }
    
      if (!(i_705210 < (s_705203 != null ? s_705203.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet14[s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    b_705205[b_705205_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_705210 < (s_705203 != null ? s_705203.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet15[s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          var c_715016 = (s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0] - 48);
          if ((Math.trunc((-9223372036854775808 + c_715016) / 10) <= b_705205[b_705205_Idx])) {
          b_705205[b_705205_Idx] = ((b_705205[b_705205_Idx] * 10) - c_715016);
          }
          else {
          integer_out_of_range_error_700049();
          }
          
          i_705210 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_705210 < (s_705203 != null ? s_705203.length : 0)) && (s_705203[chckIndx(i_705210, 0, (s_705203 != null ? s_705203.length : 0)+0-1)-0] == 95))) break L6;
                i_705210 += 1;
              }
          } while(false);
        }
    } while(false);
      if (!(sign_705209 == -1)) Tmp7 = false; else {        Tmp7 = (b_705205[b_705205_Idx] == -9223372036854775808);      }    if (Tmp7) {
    integer_out_of_range_error_700049();
    }
    else {
      b_705205[b_705205_Idx] = (b_705205[b_705205_Idx] * sign_705209);
      result_705208 = (i_705210 - start_705206);
    }
    
    }
    

  return result_705208;

}
function npuParseBiggestInt(s_720203, number_720205, number_720205_Idx, start_720206) {
  var result_720208 = 0;

    var res_720209 = [0];
    result_720208 = raw_parse_int_705201(s_720203, res_720209, 0, start_720206);
    if (!((result_720208 == 0))) {
    number_720205[number_720205_Idx] = res_720209[0];
    }
    

  return result_720208;

}
function npuParseInt(s_725016, number_725018, number_725018_Idx, start_725019) {
      var Tmp1;

  var result_725021 = 0;

    var res_725022 = [0];
    result_725021 = npuParseBiggestInt(s_725016, res_725022, 0, start_725019);
      if ((res_725022[0] < -2147483648)) Tmp1 = true; else {        Tmp1 = (2147483647 < res_725022[0]);      }    if (Tmp1) {
    integer_out_of_range_error_700049();
    }
    
    if (!((result_725021 == 0))) {
    number_725018[number_725018_Idx] = chckRange(res_725022[0], -2147483648, 2147483647);
    }
    

  return result_725021;

}
function nsuParseInt(s_9050419) {
      var Tmp1;

  var result_9050420 = [0];

    var l_9050422 = npuParseInt(s_9050419, result_9050420, 0, 0);
      if (!((l_9050422 == (s_9050419 != null ? s_9050419.length : 0)))) Tmp1 = true; else {        Tmp1 = (l_9050422 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_9050419 || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    

  return result_9050420[0];

}
function parse_value_10210641(self_10210643, s_10210644) {
      var Tmp1;
    var Tmp3;

  var result_10210645 = null;

  BeforeRet: do {
      if (!(0 < (s_10210644 != null ? s_10210644.length : 0))) Tmp1 = false; else {        Tmp1 = ((nsuIsDigitChar(s_10210644[chckIndx(0, 0, (s_10210644 != null ? s_10210644.length : 0)+0-1)-0]) || (s_10210644[chckIndx(0, 0, (s_10210644 != null ? s_10210644.length : 0)+0-1)-0] == 43)) || (s_10210644[chckIndx(0, 0, (s_10210644 != null ? s_10210644.length : 0)+0-1)-0] == 45));      }    if (Tmp1) {
++excHandler;
    Tmp3 = framePtr;
    try {
    result_10210645 = new_value_10195909(nsuParseInt(s_10210644));
    break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp3;
    if (lastJSError && (isObj(lastJSError.m_type, NTI6243))) {
    result_10210645 = null;
    break BeforeRet;
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp3;
    }
    }
    
  } while (false);

  return result_10210645;

}
function HEX5BHEX5D_11105068(s_11105072, x_11105074) {
  var result_11105075 = null;

    var a_11105201 = subInt((s_11105072 != null ? s_11105072.length : 0), x_11105074.a);
    var l_11105401 = addInt(subInt(subInt((s_11105072 != null ? s_11105072.length : 0), x_11105074.b), a_11105201), 1);
    result_11105075 = nimCopy(null, mnewString(chckRange(l_11105401, 0, 2147483647)), NTI112);
    L1: do {
      var i_11105409 = 0;
      var i_12146763 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12146763 < l_11105401)) break L3;
            i_11105409 = i_12146763;
            result_11105075[chckIndx(i_11105409, 0, (result_11105075 != null ? result_11105075.length : 0)+0-1)-0] = s_11105072[chckIndx(addInt(i_11105409, a_11105201), 0, (s_11105072 != null ? s_11105072.length : 0)+0-1)-0];
            i_12146763 = addInt(i_12146763, 1);
          }
      } while(false);
    } while(false);

  return result_11105075;

}
function HEX2EHEX2E_11105001(a_11105006, b_11105008) {
  var result_11105014 = {a: 0, b: 0};

    nimCopy(result_11105014, {a: a_11105006, b: b_11105008}, NTI11105011);

  return result_11105014;

}
function parse_value_11086032(self_11086034, s_11086035) {
      var Tmp1;

  var result_11086036 = null;

    if ((5 < (s_11086035 != null ? s_11086035.length : 0))) {
      if (!eqStrings(HEX5BHEX5D_2005283(s_11086035, HEX2EHEX2E_2005220(0, 2)), makeNimstrLit("\'\'\'"))) Tmp1 = false; else {        Tmp1 = eqStrings(HEX5BHEX5D_11105068(s_11086035, HEX2EHEX2E_11105001(3, 1)), makeNimstrLit("\'\'\'"));      }    if (Tmp1) {
    result_11086036 = new_value_10195973(HEX5BHEX5D_4455068(s_11086035, HEX2EHEX2E_4455001(3, 4)));
    }
    
    }
    

  return result_11086036;

}
function parse_value_10210620(self_10210622, s_10210623) {
  var result_10210624 = null;

  return result_10210624;

}
function parse_value_10210638(self_10210622, s_10210623) {
  var result_10210640 = null;

  BeforeRet: do {
    chckNilDisp(self_10210622);
    if (isObj(self_10210622.m_type, NTI9971130)) {
    result_10210640 = parse_value_10220014(self_10210622, s_10210623);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210622.m_type, NTI9971128)) {
    result_10210640 = parse_value_10215014(self_10210622, s_10210623);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210622.m_type, NTI9971126)) {
    result_10210640 = parse_value_10210641(self_10210622, s_10210623);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210622.m_type, NTI11086017)) {
    result_10210640 = parse_value_11086032(self_10210622, s_10210623);
    break BeforeRet;
    }
    else {
    if (isObj(self_10210622.m_type, NTI9971123)) {
    result_10210640 = parse_value_10210620(self_10210622, s_10210623);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10210640;

}
function prefix_length_10230100(self_10230102) {
  var result_10230103 = 0;

    result_10230103 = 1;

  return result_10230103;

}
function prefix_length_10230018(self_10230020) {
  var result_10230021 = 0;

    result_10230021 = 0;

  return result_10230021;

}
function prefix_length_10230035(self_10230020) {
  var result_10230037 = 0;

  BeforeRet: do {
    chckNilDisp(self_10230020);
    if (isObj(self_10230020.m_type, NTI9971130)) {
    result_10230037 = prefix_length_10230100(self_10230020);
    break BeforeRet;
    }
    else {
    if (isObj(self_10230020.m_type, NTI9971123)) {
    result_10230037 = prefix_length_10230018(self_10230020);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10230037;

}
function some_10240005(val_10240008) {
  var result_10240010 = {val: null, has: false};

    result_10240010.has = true;
    result_10240010.val = nimCopy(null, val_10240008, NTI112);

  return result_10240010;

}
function none_10240215() {
  var result_10240233 = {val: null, has: false};

  return result_10240233;

}
function token_ready_11125087(self_11125089, token_11125090, c_11125091) {
      var Tmp1;
      var Tmp2;

  var result_11125096 = {val: null, has: false};

  BeforeRet: do {
      if (!(c_11125091 == 39)) Tmp2 = false; else {        Tmp2 = (4 < (token_11125090 != null ? token_11125090.length : 0));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = eqStrings(HEX5BHEX5D_11105068(token_11125090, HEX2EHEX2E_11105001(2, 1)), makeNimstrLit("\'\'"));      }    if (Tmp1) {
    nimCopy(result_11125096, some_10240005((token_11125090 || []).concat([c_11125091])), NTI10230049);
    break BeforeRet;
    }
    else {
      nimCopy(result_11125096, none_10240215(), NTI10240221);
      break BeforeRet;
    }
    
  } while (false);

  return result_11125096;

}
function token_ready_10230136(self_10230138, token_10230139, ch_10230140) {
      var Tmp1;

  var result_10230145 = {val: null, has: false};

  BeforeRet: do {
      if (!(ch_10230140 == 34)) Tmp1 = false; else {        Tmp1 = !((HEX5BHEX5D_326029(token_10230139, 1) == 92));      }    if (Tmp1) {
    nimCopy(result_10230145, some_10240005((token_10230139 || []).concat([ch_10230140])), NTI10230049);
    break BeforeRet;
    }
    else {
      nimCopy(result_10230145, none_10240215(), NTI10240221);
      break BeforeRet;
    }
    
  } while (false);

  return result_10230145;

}
function token_ready_10230038(self_10230040, token_10230041, ch_10230042) {
  var result_10230061 = {val: null, has: false};

  return result_10230061;

}
function token_ready_10230075(self_10230040, token_10230041, ch_10230042) {
  var result_10230077 = {val: null, has: false};

  BeforeRet: do {
    chckNilDisp(self_10230040);
    if (isObj(self_10230040.m_type, NTI11086017)) {
    nimCopy(result_10230077, token_ready_11125087(self_10230040, token_10230041, ch_10230042), NTI10230049);
    break BeforeRet;
    }
    else {
    if (isObj(self_10230040.m_type, NTI9971130)) {
    nimCopy(result_10230077, token_ready_10230136(self_10230040, token_10230041, ch_10230042), NTI10230049);
    break BeforeRet;
    }
    else {
    if (isObj(self_10230040.m_type, NTI9971123)) {
    nimCopy(result_10230077, token_ready_10230038(self_10230040, token_10230041, ch_10230042), NTI10230049);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_10230077;

}
function token_start_10230117(self_10230119, token_10230120, ch_10230121) {
  var result_10230122 = false;

    result_10230122 = (ch_10230121 == 34);

  return result_10230122;

}
function token_start_11125066(self_11125068, s_11125069, c_11125070) {
  var result_11125071 = false;

    result_11125071 = (eqStrings(s_11125069, makeNimstrLit("\'\'")) && (c_11125070 == 39));

  return result_11125071;

}
function token_start_10230078(self_10230080, token_10230081, ch_10230082) {
  var result_10230083 = false;

    result_10230083 = false;

  return result_10230083;

}
function token_start_10230097(self_10230080, token_10230081, ch_10230082) {
  var result_10230099 = false;

  BeforeRet: do {
    chckNilDisp(self_10230080);
    if (isObj(self_10230080.m_type, NTI9971130)) {
    result_10230099 = token_start_10230117(self_10230080, token_10230081, ch_10230082);
    break BeforeRet;
    }
    else {
    if (isObj(self_10230080.m_type, NTI9971123)) {
    result_10230099 = token_start_11125066(self_10230080, token_10230081, ch_10230082);
    break BeforeRet;
    }
    else {
    if (isObj(self_10230080.m_type, NTI9971123)) {
    result_10230099 = token_start_10230078(self_10230080, token_10230081, ch_10230082);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_10230099;

}
function new_activation_10480593(body_10480595) {
  var result_10480596 = null;

    result_10480596 = {body: body_10480595, m_type: NTI10475134, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
    result_10480596.locals = new_map_10105045();

  return result_10480596;

}
function eval_10645069(self_10645071, spry_10645072) {
  var result_10645073 = null;

  BeforeRet: do {
    var activation_10645074 = new_activation_10480593(self_10645071);
    eval_10630590(activation_10645074, spry_10645072);
    activation_10645074.returned = true;
    result_10645073 = activation_10645074.locals;
    break BeforeRet;
  } while (false);

  return result_10645073;

}
function eval_10645142(self_10645144, spry_10645145) {
  var result_10645146 = null;

    result_10645146 = eval_10475157(self_10645144.val, spry_10645145);

  return result_10645146;

}
function new_activation_10480546(body_10480548) {
  var result_10480549 = null;

    result_10480549 = {body: body_10480548, m_type: NTI10475132, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

  return result_10480549;

}
function eval_10645051(self_10645053, spry_10645054) {
  var result_10645055 = null;

    result_10645055 = eval_10630590(new_activation_10480546(self_10645053), spry_10645054);

  return result_10645055;

}
function eval_10645106(self_10645108, spry_10645109) {
  var result_10645110 = null;

    result_10645110 = self_10645108;

  return result_10645110;

}
function eval_11996103(self_11996105, spry_11996106) {
  var result_11996107 = null;

  BeforeRet: do {
    var receiver_11996108 = eval_arg_infix_10625109(spry_11996106);
    if ((receiver_11996108 == null)) {
    result_11996107 = spry_11996106.nilVal;
    break BeforeRet;
    }
    
    var tags_11996114 = receiver_11996108.tags;
    if ((tags_11996114 == null)) {
    result_11996107 = spry_11996106.nilVal;
    break BeforeRet;
    }
    
    var node_tags_11996120 = nimCopy(null, tags_11996114.nodes, NTI9971193);
    if (((node_tags_11996120 != null ? node_tags_11996120.length : 0) == 9)) {
    result_11996107 = spry_11996106.nilVal;
    break BeforeRet;
    }
    
    L1: do {
      var n_11996132 = null;
      var i_12146779 = 0;
      var l_12146780 = (self_11996105.nodes != null ? self_11996105.nodes.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_12146779 < l_12146780)) break L3;
            n_11996132 = self_11996105.nodes[chckIndx(i_12146779, 0, (self_11996105.nodes != null ? self_11996105.nodes.length : 0)+0-1)-0];
            var fun_tags_11996133 = nimCopy(null, n_11996132.tags.nodes, NTI9971193);
            L4: do {
              var nt_11996140 = null;
              var i_12146776 = 0;
              var l_12146777 = (node_tags_11996120 != null ? node_tags_11996120.length : 0);
              L5: do {
                  L6: while (true) {
                  if (!(i_12146776 < l_12146777)) break L6;
                    nt_11996140 = node_tags_11996120[chckIndx(i_12146776, 0, (node_tags_11996120 != null ? node_tags_11996120.length : 0)+0-1)-0];
                    if (contains_10196277(fun_tags_11996133, nt_11996140)) {
                    result_11996107 = eval_10475157(n_11996132, spry_11996106);
                    break BeforeRet;
                    }
                    
                    i_12146776 = addInt(i_12146776, 1);
                    if (!(((node_tags_11996120 != null ? node_tags_11996120.length : 0) == l_12146777))) {
                    failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            i_12146779 = addInt(i_12146779, 1);
            if (!(((self_11996105.nodes != null ? self_11996105.nodes.length : 0) == l_12146780))) {
            failed_assert_impl_102680(makeNimstrLit("iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_11996107 = spry_11996106.nilVal;
    break BeforeRet;
  } while (false);

  return result_11996107;

}
function new_activation_10480452(funk_10480454) {
  var result_10480455 = null;

    result_10480455 = {body: funk_10480454, m_type: NTI10475130, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

  return result_10480455;

}
function set_self_10625148(spry_10625150) {
  var result_10625151 = null;

    result_10625151 = eval_arg_infix_10625109(spry_10625150);
    if ((result_10625151 == null)) {
    spry_10625150.currentActivation.self = spry_10625150.nilVal;
    result_10625151 = spry_10625150.nilVal;
    }
    else {
      spry_10625150.currentActivation.self = result_10625151;
    }
    

  return result_10625151;

}
function eval_10645032(self_10645034, spry_10645035) {
  var result_10645036 = null;

    var act_10645037 = new_activation_10480452(self_10645034);
    set_self_10625148(spry_10645035);
    result_10645036 = eval_10630590(act_10645037, spry_10645035);

  return result_10645036;

}
function eval_10645014(self_10645016, spry_10645017) {
  var result_10645018 = null;

    result_10645018 = eval_10630590(new_activation_10480452(self_10645016), spry_10645017);

  return result_10645018;

}
function eval_10645088(self_10645090, spry_10645091) {
  var result_10645092 = null;

    result_10645092 = self_10645090;

  return result_10645092;

}
function eval_10645124(self_10645126, spry_10645127) {
  var result_10645128 = null;

    result_10645128 = self_10645126;

  return result_10645128;

}
function eval_10630514(self_10630516, spry_10630517) {
  var result_10630518 = null;

    result_10630518 = self_10630516;

  return result_10630518;

}
function eval_10630571(self_10630573, spry_10630574) {
  var result_10630575 = null;

    result_10630575 = self_10630573.primitive(spry_10630574);

  return result_10630575;

}
function make_binding_10575041(self_10575043, key_10575044, val_10575045) {
  var result_10575046 = null;

    if ((self_10575043.locals == null)) {
    self_10575043.locals = new_map_10105045();
    }
    
    result_10575046 = make_binding_10021643(self_10575043.locals, key_10575044, val_10575045);

  return result_10575046;

}
function make_binding_10575019(self_10575021, key_10575022, val_10575023) {
  var result_10575024 = null;

    raise_runtime_exception_9971245(makeNimstrLit("This activation should not be called with makeBinding"));

  return result_10575024;

}
function make_binding_10575038(self_10575021, key_10575022, val_10575023) {
  var result_10575040 = null;

  BeforeRet: do {
    chckNilDisp(self_10575021);
    if (isObj(self_10575021.m_type, NTI10475127)) {
    result_10575040 = make_binding_10575041(self_10575021, key_10575022, val_10575023);
    break BeforeRet;
    }
    else {
    if (isObj(self_10575021.m_type, NTI10475119)) {
    result_10575040 = make_binding_10575019(self_10575021, key_10575022, val_10575023);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10575040;

}
function make_local_binding_10625019(spry_10625021, key_10625022, val_10625023) {
                  var Tmp6;
            var Tmp7;

  var result_10625024 = null;

  BeforeRet: do {
    L1: do {
      var activation_10625025 = null;
      var activation_12146784 = spry_10625021.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146784 == null))) break L3;
            L4: do {
                L5: while (true) {
                if (!!(!(isObj(activation_12146784.m_type, NTI10475132)))) break L5;
                  if (isObj(activation_12146784.m_type, NTI10475130)) {
                  Tmp6 = activation_12146784.body.parent;
                  }
                  else {
                  Tmp6 = activation_12146784.parent;
                  }
                  
                  activation_12146784 = Tmp6;
                }
            } while(false);
            activation_10625025 = activation_12146784;
            result_10625024 = make_binding_10575038(activation_10625025, key_10625022, val_10625023);
            break BeforeRet;
            if (isObj(activation_12146784.m_type, NTI10475130)) {
            Tmp7 = activation_12146784.body.parent;
            }
            else {
            Tmp7 = activation_12146784.parent;
            }
            
            activation_12146784 = Tmp7;
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10625024;

}
function eval_10630553(self_10630555, spry_10630556) {
  var result_10630557 = null;

    result_10630557 = next_10520920(arg_parent_10570019(spry_10630556));
    make_local_binding_10625019(spry_10630556, self_10630555, result_10630557);

  return result_10630557;

}
function eval_10630532(self_10630534, spry_10630535) {
  var result_10630536 = null;

    var previous_activation_10630537 = arg_parent_10570019(spry_10630535);
    var arg_10630538 = next_10520920(previous_activation_10630537);
    var here_10630539 = spry_10630535.currentActivation;
    spry_10630535.currentActivation = previous_activation_10630537;
    result_10630536 = eval_10475157(arg_10630538, spry_10630535);
    spry_10630535.currentActivation = here_10630539;
    make_local_binding_10625019(spry_10630535, self_10630534, result_10630536);

  return result_10630536;

}
function eval_10630370(self_10630372, spry_10630373) {
    var Tmp1;

  var result_10630374 = null;

    var hit_10630375 = lookup_10540019(spry_10630373, self_10630372);
    if ((hit_10630375 == null)) {
    Tmp1 = spry_10630373.nilVal;
    }
    else {
    Tmp1 = hit_10630375.val;
    }
    
    result_10630374 = Tmp1;

  return result_10630374;

}
function eval_10630394(self_10630396, spry_10630397) {
    var Tmp1;

  var result_10630398 = null;

    var hit_10630399 = lookup_10540019(spry_10630397, self_10630396);
    if ((hit_10630399 == null)) {
    Tmp1 = spry_10630397.nilVal;
    }
    else {
    Tmp1 = hit_10630399.val;
    }
    
    result_10630398 = Tmp1;

  return result_10630398;

}
function eval_10630442(self_10630444, spry_10630445) {
    var Tmp1;

  var result_10630446 = null;

    var hit_10630447 = lookup_10540019(spry_10630445, self_10630444);
    if ((hit_10630447 == null)) {
    Tmp1 = spry_10630445.nilVal;
    }
    else {
    Tmp1 = eval_10475157(hit_10630447.val, spry_10630445);
    }
    
    result_10630446 = Tmp1;

  return result_10630446;

}
function lookup_self_10570037(spry_10570039, key_10570040) {
  var result_10570041 = null;

  BeforeRet: do {
    var self_10570042 = spry_10570039.currentActivation.self;
    if (isObj(self_10570042.m_type, NTI9971203)) {
    result_10570041 = lookup_9996969(self_10570042, key_10570040);
    break BeforeRet;
    }
    
  } while (false);

  return result_10570041;

}
function eval_10630418(self_10630420, spry_10630421) {
    var Tmp1;

  var result_10630422 = null;

    var hit_10630423 = lookup_self_10570037(spry_10630421, self_10630420);
    if ((hit_10630423 == null)) {
    Tmp1 = spry_10630421.nilVal;
    }
    else {
    Tmp1 = hit_10630423.val;
    }
    
    result_10630422 = Tmp1;

  return result_10630422;

}
function eval_10630490(self_10630492, spry_10630493) {
    var Tmp1;

  var result_10630494 = null;

    var hit_10630495 = lookup_self_10570037(spry_10630493, self_10630492);
    if ((hit_10630495 == null)) {
    Tmp1 = spry_10630493.nilVal;
    }
    else {
    Tmp1 = eval_10475157(hit_10630495.val, spry_10630493);
    }
    
    result_10630494 = Tmp1;

  return result_10630494;

}
function eval_10630466(self_10630468, spry_10630469) {
    var Tmp1;

  var result_10630470 = null;

    var hit_10630471 = lookup_10540019(spry_10630469, self_10630468);
    if ((hit_10630471 == null)) {
    Tmp1 = spry_10630469.nilVal;
    }
    else {
    Tmp1 = eval_10475157(hit_10630471.val, spry_10630469);
    }
    
    result_10630470 = Tmp1;

  return result_10630470;

}
function eval_10630346(self_10630348, spry_10630349) {
  var result_10630350 = null;

  BeforeRet: do {
    var binding_10630351 = lookup_10540019(spry_10630349, self_10630348);
    if ((binding_10630351 == null)) {
    raise_runtime_exception_9971245((makeNimstrLit("Word not found: ") || []).concat(HEX24_9975218(self_10630348) || []));
    }
    
    result_10630350 = eval_10475157(binding_10630351.val, spry_10630349);
    break BeforeRet;
  } while (false);

  return result_10630350;

}
function eval_10475153(self_10475155, spry_10475156) {
  var result_10630332 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Should not happen ") || []).concat(HEX24_9975218(self_10475155) || []));

  return result_10630332;

}
function eval_10475157(self_10475155, spry_10475156) {
  var result_10630332 = null;

  BeforeRet: do {
    chckNilDisp(self_10475155);
    if (isObj(self_10475155.m_type, NTI9971198)) {
    result_10630332 = eval_10645069(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971228)) {
    result_10630332 = eval_10645142(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971196)) {
    result_10630332 = eval_10645051(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971168)) {
    result_10630332 = eval_10645106(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI11996017)) {
    result_10630332 = eval_11996103(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI10475117)) {
    result_10630332 = eval_10645032(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI10475114)) {
    result_10630332 = eval_10645014(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971200)) {
    result_10630332 = eval_10645088(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971203)) {
    result_10630332 = eval_10645124(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971142)) {
    result_10630332 = eval_10630514(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI10475109)) {
    result_10630332 = eval_10630571(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971160)) {
    result_10630332 = eval_10630553(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971151)) {
    result_10630332 = eval_10630532(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971155)) {
    result_10630332 = eval_10630370(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971153)) {
    result_10630332 = eval_10630394(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971146)) {
    result_10630332 = eval_10630442(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971158)) {
    result_10630332 = eval_10630418(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971149)) {
    result_10630332 = eval_10630490(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971144)) {
    result_10630332 = eval_10630466(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971135)) {
    result_10630332 = eval_10630346(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971132)) {
    result_10630332 = eval_10475153(self_10475155, spry_10475156);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475155.m_type, NTI9971132)) {
    result_10630332 = eval_10475153(self_10475155, spry_10475156);
    break BeforeRet;
    }
    }}}}}}}}}}}}}}}}}}}}}
  } while (false);

  return result_10630332;

}
function eval_do_10645178(self_10645180, spry_10645181) {
  var result_10645182 = null;

    result_10645182 = eval_10630590(new_activation_10480452(self_10645180), spry_10645181);

  return result_10645182;

}
function eval_do_10645196(self_10645198, spry_10645199) {
  var result_10645200 = null;

    result_10645200 = eval_10630590(new_activation_10480499(self_10645198), spry_10645199);

  return result_10645200;

}
function eval_do_10645232(self_10645234, spry_10645235) {
  var result_10645236 = null;

    result_10645236 = eval_10630590(new_activation_10480593(self_10645234), spry_10645235);

  return result_10645236;

}
function eval_do_10645214(self_10645216, spry_10645217) {
  var result_10645218 = null;

    result_10645218 = eval_10630590(new_activation_10480546(self_10645216), spry_10645217);

  return result_10645218;

}
function eval_do_10475159(self_10475161, spry_10475162) {
  var result_10645164 = null;

    raise_runtime_exception_9971245(makeNimstrLit("Do only works for sequences"));

  return result_10645164;

}
function eval_do_10475163(self_10475161, spry_10475162) {
  var result_10645164 = null;

  BeforeRet: do {
    chckNilDisp(self_10475161);
    if (isObj(self_10475161.m_type, NTI10475114)) {
    result_10645164 = eval_do_10645178(self_10475161, spry_10475162);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475161.m_type, NTI9971200)) {
    result_10645164 = eval_do_10645196(self_10475161, spry_10475162);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475161.m_type, NTI9971198)) {
    result_10645164 = eval_do_10645232(self_10475161, spry_10475162);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475161.m_type, NTI9971196)) {
    result_10645164 = eval_do_10645214(self_10475161, spry_10475162);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475161.m_type, NTI9971132)) {
    result_10645164 = eval_do_10475159(self_10475161, spry_10475162);
    break BeforeRet;
    }
    else {
    if (isObj(self_10475161.m_type, NTI9971132)) {
    result_10645164 = eval_do_10475159(self_10475161, spry_10475162);
    break BeforeRet;
    }
    }}}}}
  } while (false);

  return result_10645164;

}
function HEX2B_10520079(a_10520081, b_10520082) {
  var result_10520083 = null;

    result_10520083 = new_value_10195941((a_10520081.value + b_10520082.value));

  return result_10520083;

}
function HEX2B_10520061(a_10520063, b_10520064) {
  var result_10520065 = null;

    result_10520065 = new_value_10195941((a_10520063.value + b_10520064.value));

  return result_10520065;

}
function HEX2B_10520043(a_10520045, b_10520046) {
  var result_10520047 = null;

    result_10520047 = new_value_10195909(addInt(a_10520045.value, b_10520046.value));

  return result_10520047;

}
function HEX2B_10520097(a_10520099, b_10520100) {
  var result_10520101 = null;

    result_10520101 = new_value_10195941((a_10520099.value + b_10520100.value));

  return result_10520101;

}
function HEX2B_10520022(a_10520024, b_10520025) {
  var result_10520026 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520024) || [],makeNimstrLit(" + ") || [],HEX24_9975218(b_10520025) || []));

  return result_10520026;

}
function HEX2B_10520040(a_10520024, b_10520025) {
  var result_10520042 = null;

  BeforeRet: do {
    chckNilDisp(a_10520024);
    chckNilDisp(b_10520025);
    if ((isObj(a_10520024.m_type, NTI9971173) && isObj(b_10520025.m_type, NTI9971170))) {
    result_10520042 = HEX2B_10520079(a_10520024, b_10520025);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520024.m_type, NTI9971170) && isObj(b_10520025.m_type, NTI9971173))) {
    result_10520042 = HEX2B_10520061(a_10520024, b_10520025);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520024.m_type, NTI9971170) && isObj(b_10520025.m_type, NTI9971170))) {
    result_10520042 = HEX2B_10520043(a_10520024, b_10520025);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520024.m_type, NTI9971173) && isObj(b_10520025.m_type, NTI9971173))) {
    result_10520042 = HEX2B_10520097(a_10520024, b_10520025);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520024.m_type, NTI9971132) && isObj(b_10520025.m_type, NTI9971132))) {
    result_10520042 = HEX2B_10520022(a_10520024, b_10520025);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10520042;

}
function HEX2D_10520172(a_10520174, b_10520175) {
  var result_10520176 = null;

    result_10520176 = new_value_10195941((a_10520174.value - b_10520175.value));

  return result_10520176;

}
function HEX2D_10520154(a_10520156, b_10520157) {
  var result_10520158 = null;

    result_10520158 = new_value_10195941((a_10520156.value - b_10520157.value));

  return result_10520158;

}
function HEX2D_10520136(a_10520138, b_10520139) {
  var result_10520140 = null;

    result_10520140 = new_value_10195909(subInt(a_10520138.value, b_10520139.value));

  return result_10520140;

}
function HEX2D_10520190(a_10520192, b_10520193) {
  var result_10520194 = null;

    result_10520194 = new_value_10195941((a_10520192.value - b_10520193.value));

  return result_10520194;

}
function HEX2D_10520115(a_10520117, b_10520118) {
  var result_10520119 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520117) || [],makeNimstrLit(" - ") || [],HEX24_9975218(b_10520118) || []));

  return result_10520119;

}
function HEX2D_10520133(a_10520117, b_10520118) {
  var result_10520135 = null;

  BeforeRet: do {
    chckNilDisp(a_10520117);
    chckNilDisp(b_10520118);
    if ((isObj(a_10520117.m_type, NTI9971173) && isObj(b_10520118.m_type, NTI9971170))) {
    result_10520135 = HEX2D_10520172(a_10520117, b_10520118);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520117.m_type, NTI9971170) && isObj(b_10520118.m_type, NTI9971173))) {
    result_10520135 = HEX2D_10520154(a_10520117, b_10520118);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520117.m_type, NTI9971170) && isObj(b_10520118.m_type, NTI9971170))) {
    result_10520135 = HEX2D_10520136(a_10520117, b_10520118);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520117.m_type, NTI9971173) && isObj(b_10520118.m_type, NTI9971173))) {
    result_10520135 = HEX2D_10520190(a_10520117, b_10520118);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520117.m_type, NTI9971132) && isObj(b_10520118.m_type, NTI9971132))) {
    result_10520135 = HEX2D_10520115(a_10520117, b_10520118);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10520135;

}
function HEX2A_10520265(a_10520267, b_10520268) {
  var result_10520269 = null;

    result_10520269 = new_value_10195941((a_10520267.value * b_10520268.value));

  return result_10520269;

}
function HEX2A_10520247(a_10520249, b_10520250) {
  var result_10520251 = null;

    result_10520251 = new_value_10195941((a_10520249.value * b_10520250.value));

  return result_10520251;

}
function HEX2A_10520229(a_10520231, b_10520232) {
  var result_10520233 = null;

    result_10520233 = new_value_10195909(mulInt(a_10520231.value, b_10520232.value));

  return result_10520233;

}
function HEX2A_10520283(a_10520285, b_10520286) {
  var result_10520287 = null;

    result_10520287 = new_value_10195941((a_10520285.value * b_10520286.value));

  return result_10520287;

}
function HEX2A_10520208(a_10520210, b_10520211) {
  var result_10520212 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520210) || [],makeNimstrLit(" * ") || [],HEX24_9975218(b_10520211) || []));

  return result_10520212;

}
function HEX2A_10520226(a_10520210, b_10520211) {
  var result_10520228 = null;

  BeforeRet: do {
    chckNilDisp(a_10520210);
    chckNilDisp(b_10520211);
    if ((isObj(a_10520210.m_type, NTI9971173) && isObj(b_10520211.m_type, NTI9971170))) {
    result_10520228 = HEX2A_10520265(a_10520210, b_10520211);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520210.m_type, NTI9971170) && isObj(b_10520211.m_type, NTI9971173))) {
    result_10520228 = HEX2A_10520247(a_10520210, b_10520211);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520210.m_type, NTI9971170) && isObj(b_10520211.m_type, NTI9971170))) {
    result_10520228 = HEX2A_10520229(a_10520210, b_10520211);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520210.m_type, NTI9971173) && isObj(b_10520211.m_type, NTI9971173))) {
    result_10520228 = HEX2A_10520283(a_10520210, b_10520211);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520210.m_type, NTI9971132) && isObj(b_10520211.m_type, NTI9971132))) {
    result_10520228 = HEX2A_10520208(a_10520210, b_10520211);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10520228;

}
function HEX2F_10520358(a_10520360, b_10520361) {
  var result_10520362 = null;

    result_10520362 = new_value_10195941((a_10520360.value / b_10520361.value));

  return result_10520362;

}
function HEX2F_10520340(a_10520342, b_10520343) {
  var result_10520344 = null;

    result_10520344 = new_value_10195941((a_10520342.value / b_10520343.value));

  return result_10520344;

}
function HEX2F_325648(x_325650, y_325651) {
  var result_325652 = 0.0;

    result_325652 = (to_float_26459(x_325650) / to_float_26459(y_325651));

  return result_325652;

}
function HEX2F_10520322(a_10520324, b_10520325) {
  var result_10520326 = null;

    result_10520326 = new_value_10195941(HEX2F_325648(a_10520324.value, b_10520325.value));

  return result_10520326;

}
function HEX2F_10520376(a_10520378, b_10520379) {
  var result_10520380 = null;

    result_10520380 = new_value_10195941((a_10520378.value / b_10520379.value));

  return result_10520380;

}
function HEX2F_10520301(a_10520303, b_10520304) {
  var result_10520305 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520303) || [],makeNimstrLit(" / ") || [],HEX24_9975218(b_10520304) || []));

  return result_10520305;

}
function HEX2F_10520319(a_10520303, b_10520304) {
  var result_10520321 = null;

  BeforeRet: do {
    chckNilDisp(a_10520303);
    chckNilDisp(b_10520304);
    if ((isObj(a_10520303.m_type, NTI9971173) && isObj(b_10520304.m_type, NTI9971170))) {
    result_10520321 = HEX2F_10520358(a_10520303, b_10520304);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520303.m_type, NTI9971170) && isObj(b_10520304.m_type, NTI9971173))) {
    result_10520321 = HEX2F_10520340(a_10520303, b_10520304);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520303.m_type, NTI9971170) && isObj(b_10520304.m_type, NTI9971170))) {
    result_10520321 = HEX2F_10520322(a_10520303, b_10520304);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520303.m_type, NTI9971173) && isObj(b_10520304.m_type, NTI9971173))) {
    result_10520321 = HEX2F_10520376(a_10520303, b_10520304);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520303.m_type, NTI9971132) && isObj(b_10520304.m_type, NTI9971132))) {
    result_10520321 = HEX2F_10520301(a_10520303, b_10520304);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10520321;

}
function HEX3C_10520415(a_10520417, b_10520418) {
  var result_10520419 = null;

    result_10520419 = new_value_10196037((a_10520417.value < b_10520418.value));

  return result_10520419;

}
function HEX3C_10520451(a_10520453, b_10520454) {
  var result_10520455 = null;

    result_10520455 = new_value_10196037((a_10520453.value < b_10520454.value));

  return result_10520455;

}
function HEX3C_10520433(a_10520435, b_10520436) {
  var result_10520437 = null;

    result_10520437 = new_value_10196037((a_10520435.value < b_10520436.value));

  return result_10520437;

}
function HEX3C_10520487(a_10520489, b_10520490) {
  var result_10520491 = null;

    result_10520491 = new_value_10196037((cmpStrings(a_10520489.value, b_10520490.value) < 0));

  return result_10520491;

}
function HEX3C_10520469(a_10520471, b_10520472) {
  var result_10520473 = null;

    result_10520473 = new_value_10196037((a_10520471.value < b_10520472.value));

  return result_10520473;

}
function HEX3C_10520394(a_10520396, b_10520397) {
  var result_10520398 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520396) || [],makeNimstrLit(" < ") || [],HEX24_9975218(b_10520397) || []));

  return result_10520398;

}
function HEX3C_10520412(a_10520396, b_10520397) {
  var result_10520414 = null;

  BeforeRet: do {
    chckNilDisp(a_10520396);
    chckNilDisp(b_10520397);
    if ((isObj(a_10520396.m_type, NTI9971170) && isObj(b_10520397.m_type, NTI9971170))) {
    result_10520414 = HEX3C_10520415(a_10520396, b_10520397);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520396.m_type, NTI9971173) && isObj(b_10520397.m_type, NTI9971170))) {
    result_10520414 = HEX3C_10520451(a_10520396, b_10520397);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520396.m_type, NTI9971170) && isObj(b_10520397.m_type, NTI9971173))) {
    result_10520414 = HEX3C_10520433(a_10520396, b_10520397);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520396.m_type, NTI9971176) && isObj(b_10520397.m_type, NTI9971176))) {
    result_10520414 = HEX3C_10520487(a_10520396, b_10520397);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520396.m_type, NTI9971173) && isObj(b_10520397.m_type, NTI9971173))) {
    result_10520414 = HEX3C_10520469(a_10520396, b_10520397);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520396.m_type, NTI9971132) && isObj(b_10520397.m_type, NTI9971132))) {
    result_10520414 = HEX3C_10520394(a_10520396, b_10520397);
    break BeforeRet;
    }
    }}}}}
  } while (false);

  return result_10520414;

}
function HEX3CHEX3D_10520526(a_10520528, b_10520529) {
  var result_10520530 = null;

    result_10520530 = new_value_10196037((a_10520528.value <= b_10520529.value));

  return result_10520530;

}
function HEX3CHEX3D_10520562(a_10520564, b_10520565) {
  var result_10520566 = null;

    result_10520566 = new_value_10196037((a_10520564.value <= b_10520565.value));

  return result_10520566;

}
function HEX3CHEX3D_10520544(a_10520546, b_10520547) {
  var result_10520548 = null;

    result_10520548 = new_value_10196037((a_10520546.value <= b_10520547.value));

  return result_10520548;

}
function HEX3CHEX3D_10520598(a_10520600, b_10520601) {
  var result_10520602 = null;

    result_10520602 = new_value_10196037((cmpStrings(a_10520600.value, b_10520601.value) <= 0));

  return result_10520602;

}
function HEX3CHEX3D_10520580(a_10520582, b_10520583) {
  var result_10520584 = null;

    result_10520584 = new_value_10196037((a_10520582.value <= b_10520583.value));

  return result_10520584;

}
function HEX3CHEX3D_10520505(a_10520507, b_10520508) {
  var result_10520509 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520507) || [],makeNimstrLit(" <= ") || [],HEX24_9975218(b_10520508) || []));

  return result_10520509;

}
function HEX3CHEX3D_10520523(a_10520507, b_10520508) {
  var result_10520525 = null;

  BeforeRet: do {
    chckNilDisp(a_10520507);
    chckNilDisp(b_10520508);
    if ((isObj(a_10520507.m_type, NTI9971170) && isObj(b_10520508.m_type, NTI9971170))) {
    result_10520525 = HEX3CHEX3D_10520526(a_10520507, b_10520508);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520507.m_type, NTI9971173) && isObj(b_10520508.m_type, NTI9971170))) {
    result_10520525 = HEX3CHEX3D_10520562(a_10520507, b_10520508);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520507.m_type, NTI9971170) && isObj(b_10520508.m_type, NTI9971173))) {
    result_10520525 = HEX3CHEX3D_10520544(a_10520507, b_10520508);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520507.m_type, NTI9971176) && isObj(b_10520508.m_type, NTI9971176))) {
    result_10520525 = HEX3CHEX3D_10520598(a_10520507, b_10520508);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520507.m_type, NTI9971173) && isObj(b_10520508.m_type, NTI9971173))) {
    result_10520525 = HEX3CHEX3D_10520580(a_10520507, b_10520508);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520507.m_type, NTI9971132) && isObj(b_10520508.m_type, NTI9971132))) {
    result_10520525 = HEX3CHEX3D_10520505(a_10520507, b_10520508);
    break BeforeRet;
    }
    }}}}}
  } while (false);

  return result_10520525;

}
function eq_10520637(a_10520639, b_10520640) {
  var result_10520641 = null;

    result_10520641 = new_value_10196037((a_10520639.value == b_10520640.value));

  return result_10520641;

}
function eq_10520655(a_10520657, b_10520658) {
  var result_10520659 = null;

    result_10520659 = new_value_10196037((a_10520657.value == b_10520658.value));

  return result_10520659;

}
function eq_10520709(a_10520711, b_10520712) {
  var result_10520713 = null;

    result_10520713 = new_value_10196037(eqStrings(a_10520711.value, b_10520712.value));

  return result_10520713;

}
function eq_10520673(a_10520675, b_10520676) {
  var result_10520677 = null;

    result_10520677 = new_value_10196037((a_10520675.value == b_10520676.value));

  return result_10520677;

}
function eq_10520729(a_10520731, b_10520732) {
  var result_10520733 = null;

    result_10520733 = new_value_10196037((value_9995455(a_10520731) == value_9995455(b_10520732)));

  return result_10520733;

}
function eq_10520801(a_10520803, b_10520804) {
  var result_10520805 = null;

    result_10520805 = {m_type: NTI9971184, tags: null};

  return result_10520805;

}
function eq_10520691(a_10520693, b_10520694) {
  var result_10520695 = null;

    result_10520695 = new_value_10196037((a_10520693.value == b_10520694.value));

  return result_10520695;

}
function eq_10520747(a_10520749, b_10520750) {
    var Tmp1;

  var result_10520751 = null;

    if (!isObj(b_10520750.m_type, NTI9971200)) Tmp1 = false; else {      Tmp1 = HEX3DHEX3D_9985924(a_10520749, b_10520750);    }    result_10520751 = new_value_10196037(Tmp1);

  return result_10520751;

}
function eq_10520773(a_10520775, b_10520776) {
    var Tmp1;

  var result_10520777 = null;

    if (!isObj(b_10520776.m_type, NTI9971135)) Tmp1 = false; else {      Tmp1 = eqStrings(a_10520775.word, b_10520776.word);    }    result_10520777 = new_value_10196037(Tmp1);

  return result_10520777;

}
function eq_10520819(a_10520821, b_10520822) {
  var result_10520823 = null;

    result_10520823 = {m_type: NTI9971186, tags: null};

  return result_10520823;

}
function eq_10520616(a_10520618, b_10520619) {
  var result_10520620 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520618) || [],makeNimstrLit(" == ") || [],HEX24_9975218(b_10520619) || []));

  return result_10520620;

}
function eq_10520634(a_10520618, b_10520619) {
  var result_10520636 = null;

  BeforeRet: do {
    chckNilDisp(a_10520618);
    chckNilDisp(b_10520619);
    if ((isObj(a_10520618.m_type, NTI9971170) && isObj(b_10520619.m_type, NTI9971170))) {
    result_10520636 = eq_10520637(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971170) && isObj(b_10520619.m_type, NTI9971173))) {
    result_10520636 = eq_10520655(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971176) && isObj(b_10520619.m_type, NTI9971176))) {
    result_10520636 = eq_10520709(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971173) && isObj(b_10520619.m_type, NTI9971170))) {
    result_10520636 = eq_10520673(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971182) && isObj(b_10520619.m_type, NTI9971182))) {
    result_10520636 = eq_10520729(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971188) && isObj(b_10520619.m_type, NTI9971188))) {
    result_10520636 = eq_10520801(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971173) && isObj(b_10520619.m_type, NTI9971173))) {
    result_10520636 = eq_10520691(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971200) && isObj(b_10520619.m_type, NTI9971132))) {
    result_10520636 = eq_10520747(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971135) && isObj(b_10520619.m_type, NTI9971132))) {
    result_10520636 = eq_10520773(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971132) && isObj(b_10520619.m_type, NTI9971188))) {
    result_10520636 = eq_10520819(a_10520618, b_10520619);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520618.m_type, NTI9971132) && isObj(b_10520619.m_type, NTI9971132))) {
    result_10520636 = eq_10520616(a_10520618, b_10520619);
    break BeforeRet;
    }
    }}}}}}}}}}
  } while (false);

  return result_10520636;

}
function HEX26_10520876(a_10520878, b_10520879) {
  var result_10520880 = null;

  BeforeRet: do {
    add_10196200(a_10520878, b_10520879.nodes);
    result_10520880 = a_10520878;
    break BeforeRet;
  } while (false);

  return result_10520880;

}
function HEX26_10520858(a_10520860, b_10520861) {
  var result_10520862 = null;

    result_10520862 = new_value_10195973((a_10520860.value || []).concat(b_10520861.value || []));

  return result_10520862;

}
function HEX26_10520837(a_10520839, b_10520840) {
  var result_10520841 = null;

    raise_runtime_exception_9971245((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_9975218(a_10520839) || [],makeNimstrLit(" & ") || [],HEX24_9975218(b_10520840) || []));

  return result_10520841;

}
function HEX26_10520855(a_10520839, b_10520840) {
  var result_10520857 = null;

  BeforeRet: do {
    chckNilDisp(a_10520839);
    chckNilDisp(b_10520840);
    if ((isObj(a_10520839.m_type, NTI9971192) && isObj(b_10520840.m_type, NTI9971192))) {
    result_10520857 = HEX26_10520876(a_10520839, b_10520840);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520839.m_type, NTI9971176) && isObj(b_10520840.m_type, NTI9971176))) {
    result_10520857 = HEX26_10520858(a_10520839, b_10520840);
    break BeforeRet;
    }
    else {
    if ((isObj(a_10520839.m_type, NTI9971132) && isObj(b_10520840.m_type, NTI9971132))) {
    result_10520857 = HEX26_10520837(a_10520839, b_10520840);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_10520857;

}
function do_return_10525021(self_10525023, spry_10525024) {
    spry_10525024.currentActivation = self_10525023.parent;

  
}
function do_return_10520977(self_10520979, spry_10520980) {
    spry_10520980.currentActivation = self_10520979.parent;
    if (!((spry_10520980.currentActivation == null))) {
    spry_10520980.currentActivation.returned = true;
    }
    

  
}
function do_return_10525019(self_10520979, spry_10520980) {
    chckNilDisp(self_10520979);
    if (isObj(self_10520979.m_type, NTI10475130)) {
    do_return_10525021(self_10520979, spry_10520980);
    }
    else {
    if (isObj(self_10520979.m_type, NTI10475119)) {
    do_return_10520977(self_10520979, spry_10520980);
    }
    }

  
}
function is_object_10525059(self_10525061, spry_10525062) {
    var Tmp1;

  var result_10525063 = false;

    if (!!((self_10525061.tags == null))) Tmp1 = false; else {      Tmp1 = contains_10196271(self_10525061.tags, spry_10525062.objectTag);    }    result_10525063 = Tmp1;

  return result_10525063;

}
function is_object_10525038(self_10525040, spry_10525041) {
  var result_10525042 = false;

    result_10525042 = false;

  return result_10525042;

}
function is_object_10525056(self_10525040, spry_10525041) {
  var result_10525058 = false;

  BeforeRet: do {
    chckNilDisp(self_10525040);
    if (isObj(self_10525040.m_type, NTI9971203)) {
    result_10525058 = is_object_10525059(self_10525040, spry_10525041);
    break BeforeRet;
    }
    else {
    if (isObj(self_10525040.m_type, NTI9971132)) {
    result_10525058 = is_object_10525038(self_10525040, spry_10525041);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10525058;

}
function lookup_10530040(self_10530042, key_10530043) {
  var result_10530044 = null;

  BeforeRet: do {
    if (!((self_10530042.locals == null))) {
    result_10530044 = lookup_9996969(self_10530042.locals, key_10530043);
    break BeforeRet;
    }
    
  } while (false);

  return result_10530044;

}
function lookup_10530019(self_10530021, key_10530022) {
  var result_10530023 = null;

  return result_10530023;

}
function lookup_10530037(self_10530021, key_10530022) {
  var result_10530039 = null;

  BeforeRet: do {
    chckNilDisp(self_10530021);
    if (isObj(self_10530021.m_type, NTI10475127)) {
    result_10530039 = lookup_10530040(self_10530021, key_10530022);
    break BeforeRet;
    }
    else {
    if (isObj(self_10530021.m_type, NTI10475119)) {
    result_10530039 = lookup_10530019(self_10530021, key_10530022);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10530039;

}
function contains_10535040(self_10535042, key_10535043) {
  var result_10535044 = false;

  BeforeRet: do {
    if (!((self_10535042.locals == null))) {
    result_10535044 = contains_10196342(self_10535042.locals, key_10535043);
    break BeforeRet;
    }
    
  } while (false);

  return result_10535044;

}
function contains_10535019(self_10535021, key_10535022) {
  var result_10535023 = false;

  return result_10535023;

}
function contains_10535037(self_10535021, key_10535022) {
  var result_10535039 = false;

  BeforeRet: do {
    chckNilDisp(self_10535021);
    if (isObj(self_10535021.m_type, NTI10475127)) {
    result_10535039 = contains_10535040(self_10535021, key_10535022);
    break BeforeRet;
    }
    else {
    if (isObj(self_10535021.m_type, NTI10475119)) {
    result_10535039 = contains_10535019(self_10535021, key_10535022);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10535039;

}
function assign_binding_10100676(self_10100678, key_10100679, val_10100680) {
    var Tmp1;

  var result_10100681 = null;

    if (has_key_10015289(self_10100678.bindings, key_10100679)) {
    result_10100681 = (Tmp1 = HEX5BHEX5D_10015463(self_10100678.bindings, key_10100679), Tmp1)[0][Tmp1[1]];
    result_10100681.val = val_10100680;
    result_10100681.key = key_10100679;
    }
    

  return result_10100681;

}
function assign_binding_10580041(self_10580043, key_10580044, val_10580045) {
  var result_10580046 = null;

    if ((self_10580043.locals == null)) {
    self_10580043.locals = new_map_10105045();
    }
    
    result_10580046 = assign_binding_10100676(self_10580043.locals, key_10580044, val_10580045);

  return result_10580046;

}
function assign_binding_10580019(self_10580021, key_10580022, val_10580023) {
  var result_10580024 = null;

    raise_runtime_exception_9971245(makeNimstrLit("This activation should not be called with assignBinding"));

  return result_10580024;

}
function assign_binding_10580038(self_10580021, key_10580022, val_10580023) {
  var result_10580040 = null;

  BeforeRet: do {
    chckNilDisp(self_10580021);
    if (isObj(self_10580021.m_type, NTI10475127)) {
    result_10580040 = assign_binding_10580041(self_10580021, key_10580022, val_10580023);
    break BeforeRet;
    }
    else {
    if (isObj(self_10580021.m_type, NTI10475119)) {
    result_10580040 = assign_binding_10580019(self_10580021, key_10580022, val_10580023);
    break BeforeRet;
    }
    }
  } while (false);

  return result_10580040;

}
function make_binding_in_map_10595019(spry_10595021, key_10595022, val_10595023) {
  var result_10595024 = null;

  BeforeRet: do {
    var binding_10595025 = lookup_10540019(spry_10595021, key_10595022.module);
    if (!((binding_10595025 == null))) {
    var module_10600006 = binding_10595025.val;
    if (!((module_10600006 == null))) {
    result_10595024 = make_binding_10021643(module_10600006, new_eval_word_10125690(key_10595022.word), val_10595023);
    break BeforeRet;
    }
    
    }
    
  } while (false);

  return result_10595024;

}
function make_binding_in_map_10590022(spry_10590024, key_10590025, val_10590026) {
                  var Tmp6;
            var Tmp7;

  var result_10590027 = null;

  BeforeRet: do {
    L1: do {
      var activation_10590028 = null;
      var activation_12146810 = spry_10590024.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146810 == null))) break L3;
            L4: do {
                L5: while (true) {
                if (!!(!(isObj(activation_12146810.m_type, NTI10475132)))) break L5;
                  if (isObj(activation_12146810.m_type, NTI10475130)) {
                  Tmp6 = activation_12146810.body.parent;
                  }
                  else {
                  Tmp6 = activation_12146810.parent;
                  }
                  
                  activation_12146810 = Tmp6;
                }
            } while(false);
            activation_10590028 = activation_12146810;
            if ((activation_10590028.locals == null)) {
            activation_10590028.locals = new_map_10105045();
            }
            
            result_10590027 = make_binding_10021643(activation_10590028.locals, key_10590025, val_10590026);
            break BeforeRet;
            if (isObj(activation_12146810.m_type, NTI10475130)) {
            Tmp7 = activation_12146810.body.parent;
            }
            else {
            Tmp7 = activation_12146810.parent;
            }
            
            activation_12146810 = Tmp7;
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10590027;

}
function make_binding_in_map_10585019(spry_10585021, key_10585022, val_10585023) {
                  var Tmp6;
            var Tmp7;

  var result_10585024 = null;

  BeforeRet: do {
    L1: do {
      var activation_10585025 = null;
      var activation_12146817 = spry_10585021.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146817 == null))) break L3;
            L4: do {
                L5: while (true) {
                if (!!(!(isObj(activation_12146817.m_type, NTI10475132)))) break L5;
                  if (isObj(activation_12146817.m_type, NTI10475130)) {
                  Tmp6 = activation_12146817.body.parent;
                  }
                  else {
                  Tmp6 = activation_12146817.parent;
                  }
                  
                  activation_12146817 = Tmp6;
                }
            } while(false);
            activation_10585025 = activation_12146817;
            if ((activation_10585025.locals == null)) {
            activation_10585025.locals = new_map_10105045();
            }
            
            result_10585024 = make_binding_10021643(activation_10585025.locals, key_10585022, val_10585023);
            break BeforeRet;
            if (isObj(activation_12146817.m_type, NTI10475130)) {
            Tmp7 = activation_12146817.body.parent;
            }
            else {
            Tmp7 = activation_12146817.parent;
            }
            
            activation_12146817 = Tmp7;
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10585024;

}
function make_binding_in_map_10590019(spry_10585021, key_10585022, val_10585023) {
  var result_10590021 = null;

  BeforeRet: do {
    chckNilDisp(key_10585022);
    if (isObj(key_10585022.m_type, NTI9971146)) {
    result_10590021 = make_binding_in_map_10595019(spry_10585021, key_10585022, val_10585023);
    break BeforeRet;
    }
    else {
    if (isObj(key_10585022.m_type, NTI9971144)) {
    result_10590021 = make_binding_in_map_10590022(spry_10585021, key_10585022, val_10585023);
    break BeforeRet;
    }
    else {
    if (isObj(key_10585022.m_type, NTI9971132)) {
    result_10590021 = make_binding_in_map_10585019(spry_10585021, key_10585022, val_10585023);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_10590021;

}
function assign_binding_in_map_10615019(spry_10615021, key_10615022, val_10615023) {
  var result_10615024 = null;

  BeforeRet: do {
    var binding_10615025 = lookup_10540019(spry_10615021, key_10615022.module);
    if (!((binding_10615025 == null))) {
    var module_10620006 = binding_10615025.val;
    if (!((module_10620006 == null))) {
    if (contains_10196342(module_10620006, key_10615022)) {
    result_10615024 = assign_binding_10100676(module_10620006, new_eval_word_10125690(key_10615022.word), val_10615023);
    break BeforeRet;
    }
    
    }
    
    }
    
  } while (false);

  return result_10615024;

}
function assign_binding_in_map_10610022(spry_10610024, key_10610025, val_10610026) {
                  var Tmp6;
            var Tmp7;

  var result_10610027 = null;

  BeforeRet: do {
    L1: do {
      var activation_10610028 = null;
      var activation_12146824 = spry_10610024.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146824 == null))) break L3;
            L4: do {
                L5: while (true) {
                if (!!(!(isObj(activation_12146824.m_type, NTI10475132)))) break L5;
                  if (isObj(activation_12146824.m_type, NTI10475130)) {
                  Tmp6 = activation_12146824.body.parent;
                  }
                  else {
                  Tmp6 = activation_12146824.parent;
                  }
                  
                  activation_12146824 = Tmp6;
                }
            } while(false);
            activation_10610028 = activation_12146824;
            if (contains_10535037(activation_10610028, key_10610025)) {
            if ((activation_10610028.locals == null)) {
            activation_10610028.locals = new_map_10105045();
            }
            
            result_10610027 = assign_binding_10100676(activation_10610028.locals, key_10610025, val_10610026);
            break BeforeRet;
            }
            
            if (isObj(activation_12146824.m_type, NTI10475130)) {
            Tmp7 = activation_12146824.body.parent;
            }
            else {
            Tmp7 = activation_12146824.parent;
            }
            
            activation_12146824 = Tmp7;
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10610027;

}
function assign_binding_in_map_10605019(spry_10605021, key_10605022, val_10605023) {
                  var Tmp6;
            var Tmp7;

  var result_10605024 = null;

  BeforeRet: do {
    L1: do {
      var activation_10605025 = null;
      var activation_12146831 = spry_10605021.currentActivation;
      L2: do {
          L3: while (true) {
          if (!!((activation_12146831 == null))) break L3;
            L4: do {
                L5: while (true) {
                if (!!(!(isObj(activation_12146831.m_type, NTI10475132)))) break L5;
                  if (isObj(activation_12146831.m_type, NTI10475130)) {
                  Tmp6 = activation_12146831.body.parent;
                  }
                  else {
                  Tmp6 = activation_12146831.parent;
                  }
                  
                  activation_12146831 = Tmp6;
                }
            } while(false);
            activation_10605025 = activation_12146831;
            if (contains_10535037(activation_10605025, key_10605022)) {
            if ((activation_10605025.locals == null)) {
            activation_10605025.locals = new_map_10105045();
            }
            
            result_10605024 = assign_binding_10100676(activation_10605025.locals, key_10605022, val_10605023);
            break BeforeRet;
            }
            
            if (isObj(activation_12146831.m_type, NTI10475130)) {
            Tmp7 = activation_12146831.body.parent;
            }
            else {
            Tmp7 = activation_12146831.parent;
            }
            
            activation_12146831 = Tmp7;
          }
      } while(false);
    } while(false);
  } while (false);

  return result_10605024;

}
function assign_binding_in_map_10610019(spry_10605021, key_10605022, val_10605023) {
  var result_10610021 = null;

  BeforeRet: do {
    chckNilDisp(key_10605022);
    if (isObj(key_10605022.m_type, NTI9971146)) {
    result_10610021 = assign_binding_in_map_10615019(spry_10605021, key_10605022, val_10605023);
    break BeforeRet;
    }
    else {
    if (isObj(key_10605022.m_type, NTI9971144)) {
    result_10610021 = assign_binding_in_map_10610022(spry_10605021, key_10605022, val_10605023);
    break BeforeRet;
    }
    else {
    if (isObj(key_10605022.m_type, NTI9971132)) {
    result_10610021 = assign_binding_in_map_10605019(spry_10605021, key_10605022, val_10605023);
    break BeforeRet;
    }
    }}
  } while (false);

  return result_10610021;

}
function is_method_10630115(self_10630117, spry_10630118) {
  var result_10630119 = false;

  BeforeRet: do {
    result_10630119 = is_method_10630076(self_10630117.val, spry_10630118);
    break BeforeRet;
  } while (false);

  return result_10630119;

}
function is_method_10630097(self_10630099, spry_10630100) {
  var result_10630101 = false;

    result_10630101 = true;

  return result_10630101;

}
function is_method_10630079(self_10630081, spry_10630082) {
  var result_10630083 = false;

    result_10630083 = true;

  return result_10630083;

}
function is_method_10630133(self_10630135, spry_10630136) {
  var result_10630137 = false;

  BeforeRet: do {
    var binding_10630138 = lookup_10540019(spry_10630136, self_10630135);
    if ((binding_10630138 == null)) {
    result_10630137 = false;
    break BeforeRet;
    }
    else {
      result_10630137 = is_method_10630076(binding_10630138.val, spry_10630136);
      break BeforeRet;
    }
    
  } while (false);

  return result_10630137;

}
function is_method_10630058(self_10630060, spry_10630061) {
  var result_10630062 = false;

    result_10630062 = false;

  return result_10630062;

}
function is_method_10630076(self_10630060, spry_10630061) {
  var result_10630078 = false;

  BeforeRet: do {
    chckNilDisp(self_10630060);
    if (isObj(self_10630060.m_type, NTI9971228)) {
    result_10630078 = is_method_10630115(self_10630060, spry_10630061);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630060.m_type, NTI10475117)) {
    result_10630078 = is_method_10630097(self_10630060, spry_10630061);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630060.m_type, NTI10475112)) {
    result_10630078 = is_method_10630079(self_10630060, spry_10630061);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630060.m_type, NTI9971144)) {
    result_10630078 = is_method_10630133(self_10630060, spry_10630061);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630060.m_type, NTI9971132)) {
    result_10630078 = is_method_10630058(self_10630060, spry_10630061);
    break BeforeRet;
    }
    }}}}
  } while (false);

  return result_10630078;

}
function can_eval_10630220(self_10630222, spry_10630223) {
  var result_10630224 = false;

    result_10630224 = true;

  return result_10630224;

}
function can_eval_10630202(self_10630204, spry_10630205) {
  var result_10630206 = false;

  BeforeRet: do {
    result_10630206 = can_eval_10630175(self_10630204.val, spry_10630205);
    break BeforeRet;
  } while (false);

  return result_10630206;

}
function can_eval_10630178(self_10630180, spry_10630181) {
  var result_10630182 = false;

  BeforeRet: do {
    var binding_10630183 = lookup_10540019(spry_10630181, self_10630180);
    if ((binding_10630183 == null)) {
    result_10630182 = false;
    break BeforeRet;
    }
    else {
      result_10630182 = can_eval_10630175(binding_10630183.val, spry_10630181);
      break BeforeRet;
    }
    
  } while (false);

  return result_10630182;

}
function can_eval_10630238(self_10630240, spry_10630241) {
  var result_10630242 = false;

    result_10630242 = true;

  return result_10630242;

}
function can_eval_10630292(self_10630294, spry_10630295) {
  var result_10630296 = false;

    result_10630296 = true;

  return result_10630296;

}
function can_eval_10630274(self_10630276, spry_10630277) {
  var result_10630278 = false;

    result_10630278 = true;

  return result_10630278;

}
function can_eval_10630256(self_10630258, spry_10630259) {
  var result_10630260 = false;

    result_10630260 = true;

  return result_10630260;

}
function can_eval_10630310(self_10630312, spry_10630313) {
  var result_10630314 = false;

    result_10630314 = true;

  return result_10630314;

}
function can_eval_10630157(self_10630159, spry_10630160) {
  var result_10630161 = false;

    result_10630161 = false;

  return result_10630161;

}
function can_eval_10630175(self_10630159, spry_10630160) {
  var result_10630177 = false;

  BeforeRet: do {
    chckNilDisp(self_10630159);
    if (isObj(self_10630159.m_type, NTI10475114)) {
    result_10630177 = can_eval_10630220(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971228)) {
    result_10630177 = can_eval_10630202(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971144)) {
    result_10630177 = can_eval_10630178(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI10475109)) {
    result_10630177 = can_eval_10630238(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971196)) {
    result_10630177 = can_eval_10630292(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971160)) {
    result_10630177 = can_eval_10630274(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971151)) {
    result_10630177 = can_eval_10630256(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971198)) {
    result_10630177 = can_eval_10630310(self_10630159, spry_10630160);
    break BeforeRet;
    }
    else {
    if (isObj(self_10630159.m_type, NTI9971132)) {
    result_10630177 = can_eval_10630157(self_10630159, spry_10630160);
    break BeforeRet;
    }
    }}}}}}}}
  } while (false);

  return result_10630177;

}
function dump_12006300(self_12006302) {
    rawEcho(makeNimstrLit("FUNKACTIVATION"));
    rawEcho(HEX24_9975218(self_12006302.body));
    if ((self_12006302.pos < len_10480163(self_12006302))) {
    rawEcho((makeNimstrLit("POS(") || []).concat(cstrToNimstr((self_12006302.pos)+"") || [],makeNimstrLit("): ") || [],HEX24_9975218(HEX5BHEX5D_10480055(self_12006302.body, self_12006302.pos)) || []));
    }
    
    rawEcho(HEX24_9975218(self_12006302.locals));

  
}
function dump_12006272(self_12006274) {
    rawEcho(makeNimstrLit("CURLYACTIVATION"));
    rawEcho(HEX24_9975218(self_12006274.body));
    if ((self_12006274.pos < len_10480163(self_12006274))) {
    rawEcho((makeNimstrLit("POS(") || []).concat(cstrToNimstr((self_12006274.pos)+"") || [],makeNimstrLit("): ") || [],HEX24_9975218(HEX5BHEX5D_10480055(self_12006274.body, self_12006274.pos)) || []));
    }
    

  
}
function dump_12006244(self_12006246) {
    rawEcho(makeNimstrLit("PARENACTIVATION"));
    rawEcho(HEX24_9975218(self_12006246.body));
    if ((self_12006246.pos < len_10480163(self_12006246))) {
    rawEcho((makeNimstrLit("POS(") || []).concat(cstrToNimstr((self_12006246.pos)+"") || [],makeNimstrLit("): ") || [],HEX24_9975218(HEX5BHEX5D_10480055(self_12006246.body, self_12006246.pos)) || []));
    }
    

  
}
function dump_12006332(self_12006334) {
    rawEcho(makeNimstrLit("BLOKACTIVATION"));
    rawEcho(HEX24_9975218(self_12006334.body));
    if ((self_12006334.pos < len_10480163(self_12006334))) {
    rawEcho((makeNimstrLit("POS(") || []).concat(cstrToNimstr((self_12006334.pos)+"") || [],makeNimstrLit("): ") || [],HEX24_9975218(HEX5BHEX5D_10480055(self_12006334.body, self_12006334.pos)) || []));
    }
    
    rawEcho(HEX24_9975218(self_12006334.locals));

  
}
function dump_12006214(self_12006216) {
    rawEcho(makeNimstrLit("ACTIVATION"));
    rawEcho(HEX24_9975218(self_12006216.body));
    if ((self_12006216.pos < len_10480163(self_12006216))) {
    rawEcho((makeNimstrLit("POS(") || []).concat(cstrToNimstr((self_12006216.pos)+"") || [],makeNimstrLit("): ") || [],HEX24_9975218(HEX5BHEX5D_10480055(self_12006216.body, self_12006216.pos)) || []));
    }
    

  
}
function dump_12006242(self_12006216) {
    chckNilDisp(self_12006216);
    if (isObj(self_12006216.m_type, NTI10475130)) {
    dump_12006300(self_12006216);
    }
    else {
    if (isObj(self_12006216.m_type, NTI10475134)) {
    dump_12006272(self_12006216);
    }
    else {
    if (isObj(self_12006216.m_type, NTI10475132)) {
    dump_12006244(self_12006216);
    }
    else {
    if (isObj(self_12006216.m_type, NTI10475127)) {
    dump_12006332(self_12006216);
    }
    else {
    if (isObj(self_12006216.m_type, NTI10475119)) {
    dump_12006214(self_12006216);
    }
    }}}}

  
}
function type_name_12027239(self_12027241) {
  var result_12027242 = null;

    result_12027242 = nimCopy(null, makeNimstrLit("litword"), NTI112);

  return result_12027242;

}
function type_name_12027290(self_12027292) {
  var result_12027293 = null;

    result_12027293 = nimCopy(null, makeNimstrLit("block"), NTI112);

  return result_12027293;

}
function type_name_12027273(self_12027275) {
  var result_12027276 = null;

    result_12027276 = nimCopy(null, makeNimstrLit("getargword"), NTI112);

  return result_12027276;

}
function type_name_12027307(self_12027309) {
  var result_12027310 = null;

    result_12027310 = nimCopy(null, makeNimstrLit("paren"), NTI112);

  return result_12027310;

}
function type_name_12027358(self_12027360) {
  var result_12027361 = null;

    result_12027361 = nimCopy(null, makeNimstrLit("binding"), NTI112);

  return result_12027361;

}
function type_name_12027341(self_12027343) {
  var result_12027344 = null;

    result_12027344 = nimCopy(null, makeNimstrLit("map"), NTI112);

  return result_12027344;

}
function type_name_12027256(self_12027258) {
  var result_12027259 = null;

    result_12027259 = nimCopy(null, makeNimstrLit("evalargword"), NTI112);

  return result_12027259;

}
function type_name_12027205(self_12027207) {
  var result_12027208 = null;

    result_12027208 = nimCopy(null, makeNimstrLit("getmoduleword"), NTI112);

  return result_12027208;

}
function type_name_12027188(self_12027190) {
  var result_12027191 = null;

    result_12027191 = nimCopy(null, makeNimstrLit("getword"), NTI112);

  return result_12027191;

}
function type_name_12027324(self_12027326) {
  var result_12027327 = null;

    result_12027327 = nimCopy(null, makeNimstrLit("curly"), NTI112);

  return result_12027327;

}
function type_name_12027154(self_12027156) {
  var result_12027157 = null;

    result_12027157 = nimCopy(null, makeNimstrLit("evalmoduleword"), NTI112);

  return result_12027157;

}
function type_name_12027137(self_12027139) {
  var result_12027140 = null;

    result_12027140 = nimCopy(null, makeNimstrLit("evalword"), NTI112);

  return result_12027140;

}
function type_name_12027052(self_12027054) {
  var result_12027055 = null;

    result_12027055 = nimCopy(null, makeNimstrLit("float"), NTI112);

  return result_12027055;

}
function type_name_12027035(self_12027037) {
  var result_12027038 = null;

    result_12027038 = nimCopy(null, makeNimstrLit("int"), NTI112);

  return result_12027038;

}
function type_name_12027171(self_12027173) {
  var result_12027174 = null;

    result_12027174 = nimCopy(null, makeNimstrLit("evalselfword"), NTI112);

  return result_12027174;

}
function type_name_12027222(self_12027224) {
  var result_12027225 = null;

    result_12027225 = nimCopy(null, makeNimstrLit("getselfword"), NTI112);

  return result_12027225;

}
function type_name_12027120(self_12027122) {
  var result_12027123 = null;

    result_12027123 = nimCopy(null, makeNimstrLit("novalue"), NTI112);

  return result_12027123;

}
function type_name_12027103(self_12027105) {
  var result_12027106 = null;

    result_12027106 = nimCopy(null, makeNimstrLit("boolean"), NTI112);

  return result_12027106;

}
function type_name_12027086(self_12027088) {
  var result_12027089 = null;

    result_12027089 = nimCopy(null, makeNimstrLit("boolean"), NTI112);

  return result_12027089;

}
function type_name_12027069(self_12027071) {
  var result_12027072 = null;

    result_12027072 = nimCopy(null, makeNimstrLit("string"), NTI112);

  return result_12027072;

}
function type_name_12027015(self_12027017) {
  var result_12027018 = null;

    raise_runtime_exception_9971245(makeNimstrLit("Nodes need to implement typeName"));

  return result_12027018;

}
function type_name_12027032(self_12027017) {
  var result_12027034 = null;

  BeforeRet: do {
    chckNilDisp(self_12027017);
    if (isObj(self_12027017.m_type, NTI9971142)) {
    result_12027034 = type_name_12027239(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971200)) {
    result_12027034 = type_name_12027290(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971160)) {
    result_12027034 = type_name_12027273(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971196)) {
    result_12027034 = type_name_12027307(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971228)) {
    result_12027034 = type_name_12027358(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971203)) {
    result_12027034 = type_name_12027341(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971151)) {
    result_12027034 = type_name_12027256(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971155)) {
    result_12027034 = type_name_12027205(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971153)) {
    result_12027034 = type_name_12027188(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971198)) {
    result_12027034 = type_name_12027324(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971146)) {
    result_12027034 = type_name_12027154(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971144)) {
    result_12027034 = type_name_12027137(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971173)) {
    result_12027034 = type_name_12027052(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971170)) {
    result_12027034 = type_name_12027035(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971149)) {
    result_12027034 = type_name_12027171(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971158)) {
    result_12027034 = type_name_12027222(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971188)) {
    result_12027034 = type_name_12027120(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971186)) {
    result_12027034 = type_name_12027103(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971184)) {
    result_12027034 = type_name_12027086(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971176)) {
    result_12027034 = type_name_12027069(self_12027017);
    break BeforeRet;
    }
    else {
    if (isObj(self_12027017.m_type, NTI9971132)) {
    result_12027034 = type_name_12027015(self_12027017);
    break BeforeRet;
    }
    }}}}}}}}}}}}}}}}}}}}
  } while (false);

  return result_12027034;

}
